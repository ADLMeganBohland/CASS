id=#add(a="@",b="id");
type=#add(a="@",b="type");
graph=#add(a="@",b="graph");
context=#add(a="@",b="context");

asnToCassFrameworkContext=#asnContext().put(
	_key="asn:StandardDocument",
	_value="http://schema.cassproject.org/0.2/Framework"
).put(
	_key="dc:title",
	_value="http://schema.cassproject.org/0.2/name"
).put(
	_key="dcterms:description",
	_value="http://schema.cassproject.org/0.2/description"
);

asnToCassCompetencyContext=#asnContext().put(
	_key="asn:Statement",
	_value="http://schema.cassproject.org/0.2/Competency"
).put(
	_key="dcterms:description",
	_value="http://schema.cassproject.org/0.2/name"
);

relation=#object(
	source="@source",
	target="@target",
	relationType="narrows"
);

relation=relation.put(_key=#context(),_value="http://schema.cassproject.org/0.2/");
relation=relation.put(_key=#type(),_value="Relation");
relation=relation.put(
	_key=#id(),
	_value=#repoEndpoint().add(
		p="data/",
		q="@type",
		r="/",
		s="@id",
		t="/",
		u="@version"
	)
);

buildRelationship=#if(
	operator=#variableGet(key="idMap").toObject().has(
		has=#toObject(obj="@comp").getByParam(param=id)
	),
	operand="true",
	eq=#object(
		a=#variableGet(key="cassRelationships").toArray().append(
			a=#toObject(obj="@relation").getByParam(param=id)
		).variableSet(key="cassRelationships")
	).call(
		relation=relation.skyrepoPut(
			type="@type",
			id="@id",
			version="@version"
		)
	)
).call(
	type="schema.cassproject.org.0.2.Relation",
	id=#generateUUID(),
	version=#date(raw="true")
);

// TODO: Check that generated UUID are not in use
extractCompetenciesAndRelationships = #object(
	a=#variableGet(key="idMap").toObject().put(
		_key="@asnId",
		_value=#toObject(obj="@comp").getByParam(param=id)
	).variableSet(key="idMap"),
	b=#toArray(obj="@childComps").forEach(
		paramName="childRef",
		op=#variableGet(key="parentMap").toObject().put(
			_key=#toObject(obj="@childRef").getByParam(param=id),
			_value=#toObject(obj="@comp").getByParam(param=id)
		).variableSet(key="parentMap")
	),
	c=#if(operator=#toObject(obj="@comp").has(has="gemq:isChildOf"), operand="true",
		eq=buildRelationship.call(
			parentId=#toObject(obj="@comp").has(has="gemq:isChildOf").toObject().getByParam(param=id)
		)
	),
	d=#variableSet(key="cassCompetencies").toArray().append(
		a=#toObject(obj="@comp").getByParam(param=id)
	),
	e=#toObject(obj="@comp")
).call(
	comp=#toObject(obj="@asnComp").removeByParam(param="gemq:hasChild").put(
		_key=context,
		_value=asnToCassCompetencyContext
	).jsonLdExpand(
	).jsonLdCompact(
		context="http://schema.cassproject.org/0.2"
	).put(
		_key=id,
		_value=#add(
			a=#repoEndpoint(), 
			b="data/",
			c="@type",
			d="/",
			e="@id",
			f="/",
			g="@version"
		)	
	).put(
		context="http://schema.cassproject.org/0.2"	
	).skyrepoPut(
		type="@type",
		id="@id",
		version="@version"
	).debug(),
	childComps=#toObject(obj="@asnComp").getByParam(param="gemq:hasChild"),
	asnId=#toObject(obj="@asnComp").getByParam(param=id)
).call(
	type="schema.cassproject.org.0.2.Competency",
	id=#generateUUID(),
	version=#date(raw="true")
).get(e="");

asnToCassFramework=#object(
	a=#object(
		a=#variableSet(key="frameworkObj", obj=#toObject(obj=#add(a="{", b="}"))),
		b=#variableSet(key="competencyList", obj=#toArray(obj=#add(a="[",b="]"))),
		c=#variableSet(key="cassCompetencies", obj=#toArray(obj=#add(a="[",b="]"))),
		d=#variableSet(key="cassRelationships", obj=#toArray(obj=#add(a="[",b="]"))),
		e=#variableSet(key="idMap", obj=#toObject(obj=#add(a="{",b="}"))),
		f=#variableSet(key="parentMap", obj=#toObject(obj=#add(a="{",b="}")))
	),
	e=#if(operator=#toObject(obj="@jsonld").has(has=graph), operand="true",
		eq=#toObject(obj="@jsonld").getByParam(param=graph).forEach(
			paramName="graphObj",
			op=#if(operator=#toObject(obj="@graphObj").getByParam(param=type), operand="asn:StandardDocument",
				eq=#variableSet(key="frameworkObj", obj=#toObject(obj="@graphObj")),
				ne=#if(operator=#toObject(obj="@graphObj").getByParam(param=type), operand="asn:Statement",
					eq=#variableGet(key="competencyList").toArray().append(a=#toObject(obj="@graphObj")).variableSet(key="competencyList"),
					ne="false"
				),
			),
			array="true"
		),
		ne=#error(msg="unsure how to parse")
	).removeDuplicates().removeFromArray(
		item="false"
	),
	f=#variableGet(key="competencyList").toArray().forEach(
		paramName="asnComp",
		op=extractCompetenciesAndRelationships,
		array="true"
	),
	g=#variableGet(key="frameworkObj").put(
		_key=context,
		_value=asnToCassFrameworkContext
	).jsonLdExpand(
	).jsonLdCompact(
		context="http://schema.cassproject.org/0.2"
	).removeByParam(
		param="http://purl.org/gem/qualifiers/hasChild"
	).put(
		_key="competency",
		_value=#variableGet(key="cassCompetencies").toArray()
	).put(
		_key="relation",
		_value=#variableGet(key="cassRelationships").toArray()
	),
	h=#variableGet(key="idMap"),
	i=#variableGet(key="parentMap")
);

convertAsnToCass=asnToCassFramework.call(
	jsonld=#rdfToJsonLd(
		obj=#if(operator="@url", operand="",
			ne=#httpGet(obj="@url"),
			eq=#if(operator="@file", operand="",
				ne=#fileLoad(path="@file").fileToString(),
				eq=#if(operator="@rdf", operand="",
					ne="@rdf",
					eq=#error(msg="unable to find rdf")
				)
			)
		)
	)
).displayJson(_collapse="true");

/asn/to/cass=convertAsnToCass;

