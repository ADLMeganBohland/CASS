//-----FRAMEWORK UPDATING-----

frameworkGuid=#toArray(obj="@frameworkId").getIndex(index=#toArray(obj="@frameworkId").count().add(z="-2"));
frameworkLastModified=#toArray(obj="@frameworkId").getIndex(index=#toArray(obj="@frameworkId").count().add(z="-1")).toLong();
moodleFrameworkLastModified=#toObject(obj="@moodleFramework").get(timemodified="").multiply(b="1000").toLong();

moodleFramework=#toArray(obj="@moodleFrameworks").forEach(
    array="true",
    paramName="moodleFramework",
    op=#if(
	operator=#toObject(obj="@moodleFramework").get(idnumber=""),
	operand=frameworkGuid,
	eq=#toObject(obj="@moodleFramework")
    )
).getIndex(index="0");

addFramework=#object(
	a=#moodleCreateCompetencyFramework(
		id=frameworkGuid,
		name=#toObject(obj="@framework").get(name=""),
		description=#toObject(obj="@framework").get(description=""),
		lastModified=#divide(numerator=frameworkLastModified,denominator="1000").toLong()
	),
	b=#cassUpdateCompetencyFramework(
		id=frameworkGuid,
		name=#toObject(obj="@framework").get(name=""),
		description=#toObject(obj="@framework").get(description=""),
		lastModified=#divide(numerator=frameworkLastModified,denominator="1000").toLong().multiply(b="1000").toLong(),
		ppk=#moodlePpk()
	),
	c=#idxSet(
		databaseName="adapter.moodle.sync.db",
		indexDir=".",
		index=#moodleWsToken(),
		key=frameworkGuid,
		obj=frameworkLastModified
	),
	d=#variableSet(key=#add(a="cassNewer-",b=frameworkGuid), obj="true")
);

addFramework=#if(operator=#idxGet(
		databaseName="adapter.moodle.sync.db",
		indexDir=".",
		index=#moodleWsToken(),
		key=frameworkGuid
	), 
	operand="",
	eq=addFramework
);

updateFramework=#object(
	a=#moodleUpdateCompetencyFramework(
		id=frameworkGuid,
		internalId=#toObject(obj="@moodleFramework").get(id=""),
		name=#toObject(obj="@framework").get(name=""),
		description=#toObject(obj="@framework").get(description=""),
	),
	b=#cassUpdateCompetencyFramework(
		id=frameworkGuid,
		name=#toObject(obj="@framework").get(name=""),
		description=#toObject(obj="@framework").get(description=""),
		lastModified=moodleFramework.get(timemodified="").multiply(b="1000").toLong(),
		ppk=#moodlePpk()
	).call(
		moodleFrameworks=#moodleListCompetencyFrameworks()
	),
	c=#variableSet(key=#add(a="cassNewer-",b=frameworkGuid), obj="true")
);
	
checkDateFramework=#if(
	operator=frameworkLastModified.debug(prefix="updating framework cass: "),
	operand=moodleFrameworkLastModified.debug(prefix="updating framework mood: "),
	gt=updateFramework,
	le=#variableSet(key=#add(a="cassNewer-",b=frameworkGuid), obj="false")
);

checkFramework=#if(
	operator=#toObject(obj="@moodleFramework"),
	operand="",
	eq=addFramework,
	ne=checkDateFramework
);

cassToMoodleFrameworks=#getFrameworks(ppk=#moodlePpk()).forEach(
	threaded="false",
	array="true",
	paramName="framework",
	op=checkFramework.call(moodleFramework=moodleFramework).call(frameworkId=#toObject(obj="@framework").getByParam(param=#id()).split(split="/"))
).call(moodleFrameworks=#moodleListCompetencyFrameworks());

//-----COMPETENCY UPDATING-----

competencyGuid=#toArray(obj="@competencyId").getIndex(index=#toArray(obj="@competencyId").count().add(z="-2"));
competencyLastModified=#toArray(obj="@competencyId").getIndex(index=#toArray(obj="@competencyId").count().add(z="-1")).toLong();

moodleCompetency=#toArray(obj="@moodleCompetencies").forEach(array="true",paramName="moodleCompetency",op=#if(
	operator=#toObject(obj="@moodleCompetency").get(idnumber=""),
	operand=competencyGuid,
	eq=#toObject(obj="@moodleCompetency")
)).getIndex(index="0");

addCompetency=#moodleCreateCompetency(
	id=competencyGuid,
	name=#toObject(obj="@competency").get(name=""),
	description=#toObject(obj="@competency").get(description=""),
	lastModified=#divide(numerator=competencyLastModified,denominator="1000").toLong()
);

updateCompetency=#moodleUpdateCompetency(
	id=competencyGuid,
	internalId=#toObject(obj="@moodleCompetency").get(id=""),
	name=#toObject(obj="@competency").get(name=""),
	description=#toObject(obj="@competency").get(description=""),
	lastModified=#divide(numerator=competencyLastModified,denominator="1000").toLong()
);

checkDateCompetency=#if(
	operator=competencyLastModified,
	operand=#toObject(obj="@moodleCompetency").get(timemodified="").multiply(a="1000").toLong(),
	gt=updateCompetency,
);

checkCompetency=#if(
	operator=#toObject(obj="@moodleCompetency"),
	operand="",
	eq=addCompetency,
	ne=checkDateCompetency
);

checkCompetencies=#toObject(obj="@framework").get(competency="").forEach(
	paramName="competencyShortId",
	array="true",
	op=checkCompetency.call(
		moodleCompetency=moodleCompetency
	).call(
		competencyId=#toObject(obj="@competency").getByParam(param=#id()).split(split="/")
	).call(
		competency=#getCompetencyById(id="@competencyShortId")
	)
).call(moodleCompetencies=#moodleListCompetencies()).call(competencyframeworkid=#toObject(obj="@moodleFramework").get(id=""));

cassToMoodleCompetencies=#getFrameworks(ppk=#moodlePpk()).forEach(
	array="true",
	paramName="framework",
	threaded="false",
	op=#if(operator=#variableGet(key=#add(a="cassNewer-",b=frameworkGuid)), operand="true",
		eq=checkCompetencies
	).call(moodleFramework=moodleFramework).call(frameworkId=#toObject(obj="@framework").getByParam(param=#id()).split(split="/"))
).call(moodleFrameworks=#moodleListCompetencyFrameworks());

//-----RELATION UPDATING-----

competencyGuidFromShortId=#toArray(obj="@competencyId").getIndex(index=#toArray(obj="@competencyId").count().add(z="-1"));
moodleCompetencyFromShortId=#toArray(obj="@moodleCompetencies").forEach(array="true",paramName="moodleCompetency",op=#if(
	operator=#toObject(obj="@moodleCompetency").get(idnumber=""),
	operand=competencyGuidFromShortId,
	eq=#toObject(obj="@moodleCompetency")
)).getIndex(index="0");

relationNarrows=#moodleUpdateCompetencyParent(
	internalId=#toObject(obj="@moodleCompetencySource").get(id=""),
	parentId=#toObject(obj="@moodleCompetencyTarget").get(id="")
);

checkRelationNarrows=#if(
	operator=#toObject(obj="@moodleCompetencySource").get(parentid=""),
	operand=#toObject(obj="@moodleCompetencyTarget").get(id=""),
	ne=relationNarrows
);

shortId=#toArray(obj="@splitId").removeFromArray(item=#toArray(obj="@splitId").getIndex(index=#toArray(obj="@splitId").count().add(z="-1"))).flatten(_delimiter="/");

startSection=#moodleUpdateCompetency(
	id=#toObject(obj="@moodleCompetencySource").get(idnumber=""),
	internalId=#toObject(obj="@moodleCompetencySource").get(id=""),
	description=#add(
		a="@description",
		b=#if(operator="@description", operand="",
			ne=#if(operator=#string(
					op="split", 
					str="@description", 
					regex="\|CASS\|"
				).count().debug(),
				operand="1",
				le="<br />",
				gt=""
			),
			eq=""
		),
		c="<br />|CASS|",
		d="@sectionName",
		e=": ",
		f="@sectionAddition"
	).debug(),
	name=#toObject(obj="@moodleCompetencySource").get(shortname=""),
	lastModified=#add(a=#toObject(obj="@moodleCompetencySource").get(timemodified=""), b="1")
);

appendSection=#moodleUpdateCompetency(
	id=#toObject(obj="@moodleCompetencySource").get(idnumber=""),
	internalId=#toObject(obj="@moodleCompetencySource").get(id=""),
	description="@description",
	name=#toObject(obj="@moodleCompetencySource").get(shortname=""),
	lastModified=#add(a=#toObject(obj="@moodleCompetencySource").get(timemodified=""), b="1")
);

replaceInSection = #object(
	a=#string(op="replace", str="@section", regex="@oldAddition", with="@sectionAddition"),
	b=#idxSet(
		databaseName="adapter.moodle.sync.db",
		indexDir=".",
		index=#moodleWsToken(),
		key=shortId.ccall(splitId=#toObject(obj="@object").getByParam(param=#id()).split(split="/")),
		obj="@sectionAddition"
	)
).get(a="");

addToSection = #object(
	a=#add(
		a="@section",
		b=", ",
		c="@sectionAddition"
	),
	b=#idxSet(
		databaseName="adapter.moodle.sync.db",
		indexDir=".",
		index=#moodleWsToken(),
		key=shortId.ccall(splitId=#toObject(obj="@object").getByParam(param=#id()).split(split="/")),
		obj="@sectionAddition"
	)
).get(a="");

checkSectionHasAddition=#if(operator=#indexOf(str="@section", substr="@sectionAddition"),
	operand="0",
	lt=#if(operator="@oldAddition", operand="",
		eq=addToSection,
		ne=#if(operator=#indexOf(str="@section", substr="@oldAddition"), 
			operand="0",
			ge=replaceInSection,
			lt=addToSection
		)
	).ccall(
		oldAddition=#idxGet(
			databaseName="adapter.moodle.sync.db",
			indexDir=".",
			index=#moodleWsToken(),
			key=shortId.ccall(splitId=#toObject(obj="@object").getByParam(param=#id()).split(split="/"))
		).debug()
	),
	ge="@section"
);

checkSection=#if(operator=#indexOf(str="@section", substr="@sectionName"),
	operand="0",
	eq=checkSectionHasAddition,
	ne="@section"
);

checkDescriptionHasSection=#if(operator=#indexOf(str="@description", substr=#add(a="|CASS|", b="@sectionName")), 
	operand="0",
	ge=#string(
		op="split", 
		str="@description", 
		regex="\|CASS\|"
	).toArray().forEach(
		op=checkSection,
		paramName="section", 
		array="true"
	).toArray().flatten(_delimiter="|CASS|").toParameter(op=appendSection, paramName="description"),
	lt=#object(
		a=startSection,
		b=#idxSet(
			databaseName="adapter.moodle.sync.db",
			indexDir=".",
			index=#moodleWsToken(),
			key=shortId.ccall(splitId=#toObject(obj="@object").getByParam(param=#id()).split(split="/")),
			obj="@sectionAddition"
		)
	)
);

checkRelationRequires=checkDescriptionHasSection.call(
	description=#moodleGetCompetency(internalId=#toObject(obj="@moodleCompetencySource").get(id="")).get(description=""),
	sectionName="Required Competencies",
	sectionAddition=#toObject(obj="@moodleCompetencyTarget").get(shortname=""),
	moodleCompetencySource=#moodleGetCompetency(internalId=#toObject(obj="@moodleCompetencySource").get(id="")),
	object=#toObject(obj="@relation")
);

checkRelation=#if(
	operator=#toObject(obj="@relation").get(relationType=""),
	operand="narrows",
	eq=checkRelationNarrows,
	ne=#if(
		operator=#toObject(obj="@relation").get(relationType=""),
		operand="requires",
		eq=checkRelationRequires,
	)
).call(
	moodleCompetencySource=moodleCompetencyFromShortId.call(competencyId=#toObject(obj="@relation").get(source="").split(split="/")),
	moodleCompetencyTarget=moodleCompetencyFromShortId.call(competencyId=#toObject(obj="@relation").get(target="").split(split="/"))
);

checkRelations=#toObject(obj="@framework").get(relation="").forEach(
	paramName="relationShortId",
	array="true",
	threaded="false",
	op=checkRelation.call(
		moodleCompetencies=#moodleListCompetencies(),
		relation=#getRelationById(id="@relationShortId")
	)
).call(competencyframeworkid=#toObject(obj="@moodleFramework").get(id=""));

cassToMoodleRelations=#getFrameworks(ppk=#moodlePpk()).forEach(
	array="true",
	paramName="framework",
	threaded="false",
	op=#if(operator=#variableGet(key=#add(a="cassNewer-",b=frameworkGuid)), operand="true",
		eq=checkRelations
	).call(moodleFramework=moodleFramework).call(frameworkId=#toObject(obj="@framework").getByParam(param=#id()).split(split="/"))
).call(moodleFrameworks=#moodleListCompetencyFrameworks());



//-----FRAMEWORK DELETING -----

checkFrameworkExists=#if(operator="@shortFramework", operand="",
	eq=#if(operator="@longFramework", operand="",
			ne=#moodleDeleteCompetencyFramework(competencyframeworkid=#toObject(obj="@moodleFramework").get(id="")),
		),
).ccall(
	shortFramework=#cassGetFramework(frameworkId=#toObject(obj="@moodleFramework").get(idnumber=""), ppk=#moodlePpk()),
	longFramework=#cassGetFramework(
		frameworkId=#toObject(obj="@moodleFramework").get(idnumber=""), 
		frameworkVersion=moodleFrameworkLastModified, 
		ppk=#moodlePpk()
	)
);

cassToMoodleDeleteFrameworks=#moodleListCompetencyFrameworks().forEach(
	paramName="moodleFramework",
	op=checkFrameworkExists
).call(frameworks=#getFrameworks());

//-----COMPETENCY DELETING -----

removeCompetency=#moodleDeleteCompetency(competencyid=#toObject(obj="@moodleCompetency").get(id=""));

checkExists=#if(operator=#has(obj="@guidArray", has=#toObject(obj="@moodleCompetency").get(idnumber="")), operand="true",
	ne=removeCompetency
).ccall(
	guidArray=#toObject(obj="@framework").get(competency="").forEach(paramName="competencyId", op=#split(obj="@competencyId", split="/"), array="true").forEach(paramName="competencyId", op=competencyGuidFromShortId, array="true")
);

compareCompetencies=#moodleListCompetencies(competencyframeworkid=#toObject(obj="@moodleFramework").get(id="")).forEach(
	paramName="moodleCompetency",
	op=checkExists
);

checkFrameworkCompetencies=#if(operator=#variableGet(key=#add(a="cassNewer-",b=frameworkGuid)), operand="true",
	eq=compareCompetencies
).call(
	framework=#toArray(obj="@frameworks").forEach(
		array="true",
		threaded="false",
		paramName="framework",
		op=#if(
			operator=#toObject(obj="@moodleFramework").get(idnumber=""),
			operand=frameworkGuid,
			eq=#toObject(obj="@framework")
		).call(frameworkId=#toObject(obj="@framework").getByParam(param=#id()).split(split="/"))
	).getIndex(index="0")
);

cassToMoodleDeleteCompetencies=#moodleListCompetencyFrameworks().forEach(
	paramName="moodleFramework",
	op=checkFrameworkCompetencies,
).call(frameworks=#getFrameworks());


//-----RELATION DELETING -----

findInMoodle = #object(
	moodle="@moodleCompetency",
	cassArray=#toObject(obj="@framework").get(relation=""),
	guidArray=#toObject(obj="@framework").get(relation="").forEach(paramName="relationId", op=#split(obj="@relationId", split="/"), array="true").forEach(paramName="relationId", op=competencyGuidFromShortId, array="true"),
	has=""
);

checkMoodleRelations = #object(
	cassArray=#toObject(obj="@framework").get(relation=""),
	relationsByGuid=#toObject(obj="@relationsByGuid"),
	moodle=#toArray(obj="@moodleCompetencies"),
);

checkExistsInCass=#if(operator=#toObject(obj="@relationsByGuid").getByParam(param=#toObject(obj="@moodleCompetency").get(idnumber="")), operand="",
	eq=#moodleUpdateCompetencyParent(
		internalId=#toObject(obj="@moodleCompetency").get(id=""),
		parentId="0"
	)
);

checkHasParent=#if(operator=#toObject(obj="@moodleCompetency").get(parentid=""), operand="0",
	gt=checkExistsInCass
);

checkMoodleRelations=#moodleListCompetencies(competencyframeworkid=#toObject(obj="@moodleFramework").get(id="")).forEach(
	op=checkHasParent,
	paramName="moodleCompetency",
);

checkMoodleRelations=checkMoodleRelations.call(
	relationsByGuid=#toObject(obj="@framework").get(relation="").forEach(
		paramName="relation",
		array="true",
		op=#if(
			operator=#toObject(obj="@relation").get(relationType=""),
			operand="narrows",
			eq=#toObject(obj="@relation").put(
				competencySourceGuid=#toArray(obj="@competencySource").getIndex(index=#toArray(obj="@competencySource").count().add(z="-1"))
			).call(
				competencySource=#toObject(obj="@relation").get(source="").split(split="/"),
				competencyTarget=#toObject(obj="@relation").get(target="").split(split="/")
			)
		).call(
			relation=#getRelationById(id="@relation")
		)
	).collapse(keyKey="competencySourceGuid",accumulate="false"),
	moodleCompetencies=#moodleListCompetencies(competencyframeworkid=#toObject(obj="@moodleFramework").get(id=""))
).call(
	competencyframeworkid=#toObject(obj="@moodleFramework").get(id="")
);

cassToMoodleDeleteRelations=#moodleListCompetencyFrameworks().forEach(
	array="true",
	paramName="moodleFramework",
	op=#if(operator=#variableGet(key=#add(a="cassNewer-",b=frameworkGuid)), operand="true",
		eq=checkMoodleRelations
	).call(
		frameworkId=#toObject(obj="@framework").getByParam(param=#id()).split(split="/")
	).call(
		framework=#toArray(obj="@frameworks").forEach(
			array="true",
			threaded="false",
			paramName="framework",
			op=#if(
				operator=#toObject(obj="@moodleFramework").get(idnumber=""),
				operand=frameworkGuid,
				eq=#toObject(obj="@framework")
			).call(frameworkId=#toObject(obj="@framework").getByParam(param=#id()).split(split="/"))
		).getIndex(index="0")
	)
).call(frameworks=#getFrameworks());


//-----CREATIVE WORKS--------

frameworkShortId=#toArray(obj="@frameworkId").removeFromArray(item=#toArray(obj="@frameworkId").getIndex(index=#toArray(obj="@frameworkId").count().add(z="-1"))).flatten(_delimiter="/");

checkCreativeWorkInDescription=checkDescriptionHasSection.call(
	description=#moodleGetCompetency(internalId=#toObject(obj="@moodleCompetencySource").get(id="")).get(description="").debug(),
	sectionName=#add(a=#toObject(obj="@creativeWork").get(educationalUse=""), b="s"),
	sectionAddition=#if(operator=#toObject(obj="@creativeWork").get(educationalUse=""), operand="Reference",
		eq=#add(
			a='<a href="',
			b=#toObject(obj="@creativeWork").get(url=""),
			c='">',
			d=#toObject(obj="@creativeWork").get(name=""),
			e='</a>'
		),
		ne=#toObject(obj="@creativeWork").get(name="")
	),
	moodleCompetencySource=#moodleGetCompetency(internalId=#toObject(obj="@moodleCompetencySource").get(id="")),
	object=#toObject(obj="@creativeWork")
);


checkCreativeWork=#if(operator="@creativeWork", operand="",
	ne=#if(operator=#toObject(obj="@creativeWork").count(), operand="0",
		gt=checkCreativeWorkInDescription.ccall(
			moodleCompetencySource=moodleCompetencyFromShortId.call(competencyId=#toObject(obj="@creativeWork").get(educationalAlignment="").get(targetUrl="").split(split="/"))
		)
	)
);

checkFrameworkWorks=#getFrameworkCreativeWorks(frameworkId=frameworkShortId).forEach(
	op=checkCreativeWork.call(
		moodleCompetencies=#moodleListCompetencies()
	),
	paramName="creativeWork",
	threaded="false"
);

checkCreativeWorks=checkFrameworkWorks.ccall(
	competencyframeworkid=#toObject(obj="@moodleFramework").get(id="")
);

cassToMoodleCreativeWorks=#getFrameworks(ppk=#moodlePpk()).forEach(
	array="true",
	paramName="framework",
	threaded="false",
	op=#if(operator=#variableGet(key=#add(a="cassNewer-",b=frameworkGuid)), operand="true",
		eq=checkCreativeWorks
	).call(moodleFramework=moodleFramework).call(frameworkId=#toObject(obj="@framework").getByParam(param=#id()).split(split="/"))
).call(moodleFrameworks=#moodleListCompetencyFrameworks());



//-----CONTROL FUNCTIONS-----

cassToMoodle=#object(
	a_frameworks=cassToMoodleFrameworks,
	b_competencies=cassToMoodleCompetencies,
	c_relations=cassToMoodleRelations,
	d_creativeWorks=cassToMoodleCreativeWorks,
	e_delete_frameworks=cassToMoodleDeleteFrameworks,
	f_delete_competencies=cassToMoodleDeleteCompetencies,
	g_delete_relations=cassToMoodleDeleteRelations
);

cassToMoodleDebug=cassToMoodle.displayJson(_collapse="true");

cassToMoodleIf=#if(
	operator=#moodleAdapterCassToMoodleEnabled(),
	operand="true",
	eq=cassToMoodleDebug
);

#cassToMoodle=cassToMoodleIf;

/moodle/cassToMoodle=cassToMoodleIf;