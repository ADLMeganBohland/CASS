encrypt=#object(
	payload = #aesEncrypt(
		obj="@obj",
		secret="@secret",
		iv="@iv"
	),
	secret=#object(
		owners=#toArray(obj="@owner").forEach(array="true",paramName="pk",op=#object(
			v="@iv",
			s="@secret",
			f="@field"
		).rsaEncrypt(pk="@pk")),		
		readers=#toArray(obj="@reader").forEach(array="true",paramName="pk",op=#object(
			v="@iv",
			s="@secret",
			f="@field"
		).rsaEncrypt(pk="@pk"))
	).valueSet().union()
).put(
	_key=#context(),
	_value="http://schema.eduworks.com/ebac/0.2/"
).put(
	_key=#type(),
	_value="http://schema.eduworks.com/ebac/0.2/encryptedValue"
).put(
	_key=#owner(),
	_value=#toArray(obj="@owner")
).put(
	_key=#reader(),
	_value=#toArray(obj="@reader")
).call(secret=#randomBase64(length=#toInteger(obj="16")),iv=#randomBase64(length=#toInteger(obj="16")));

#cassEncrypt=encrypt;

signatureSheet=#object(
	filename="signatureSheet.json",
	mimeType="application/json",
	data=#object(
		a=#toObject(obj="@signableObject").put(
			_key=#signature(),
			_value=#toObject(obj="@signableObject").rsaSign(ppk="@ppk")
		).call(
			signableObject=#object(
				expiry=#date(_raw="true").add(z="10000").toLong()
			).put(
				_key=#type(),
				_value="http://schema.eduworks.com/ebac/0.2/timeLimitedSignature"
			).put(
				_key=#owner(),
				_value=#rsaPpkToPk(obj="@ppk")
			)
		)
	).valueSet().toString()
).stringToFile();

#cassSignatureSheet=signatureSheet;