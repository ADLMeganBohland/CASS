backupPath=#string(str="backup/");

testBackupLocation=#fileSave(path=backupPath.add(z="temp.tmp"))
checkBackupLocation=#if(
	operator=#fileExists(path=backupPath.add(z="temp.tmp")),
	operand="true",
	ne=#error(code="500",msg="Backup path not created or permissions not set.")
);
deleteBackupTest=#fileDelete(path=backupPath.add(z="temp.tmp"));

query=#object(
	query=#object(
		filtered=#object(
			query=#object(
				query_string=#object(
					query="*:*"
				)
			)
		)
	),
	explain="false",
	size="50",
	fields=#object().valueSet(),
	sort="_doc"
);

check=#object(
	word=#urlBase().add(
		z="/data/",
		zz=#toObject(obj="@hit").getByParam(param="_type"),
		zzz="/",
		zzzz=#toObject(obj="@hit").getByParam(param="_id").urlEncode()
	).httpGet().toObject().getByParam(param="_source").toString().fileSave(
		path=backupPath.add(
			z="/",
			zz=#toObject(obj="@hit").getByParam(param="_type"),
			zzz="/",
			zzzz=#toObject(obj="@hit").getByParam(param="_id").stringToHex()
		)
	)
);

search=query.httpPost(
	url=#add(a=#urlBase(),z="/data/_search?scroll=1m"),
	contentType="application/json",
	multipart="false"	
).debug();

scroll=#object(
	a=#toObject(obj="@search").cget(hits="").cget(hits="").cforEach(
		paramName="hit",
		array="true",
		op=check
	),
	aa=#if(
		operator=#toObject(obj="@search").cget(hits="").cget(hits="").count().debug(),
		operand="0",
		eq=#error(code="200",msg="Complete.")
	),
	b=#toObject(obj="@search").cgetByParam(param="_scroll_id").variableSet(key="scroll")
).call(
	search=#httpGet(
		obj=#add(a=#urlBase(),b="/_search/scroll?scroll=1m&scroll_id=",c=#variableGet(key="scroll")).debug(),
		contentType="text/plain",
		multipart="false"	
	).debug()
);

backupActual=#object(
	a=#toObject(obj="@search").cget(hits="").cget(hits="").cforEach(
		paramName="hit",
		array="true",
		op=check
	),
	b=#toObject(obj="@search").cgetByParam(param="_scroll_id").debug().variableSet(key="scroll"),
	c=scroll.while(
		condition=#if(
			operator=#variableGet(key="scroll").debug(),
			operand="",
			eq="false",
			ne="true"
		)
	)
).call(search=search).abortable();

backup=#object(
	a=testBackupLocation,
	b=checkBackupLocation,
	c=deleteBackupTest,
	d=backupActual
);

backup=#if(
	operator="@secret",
	operand=#fileLoad(path="skyId.secret").fileToString(),
	eq=backup,
	ne=#error(code="401",msg="Must provide secret.")
);

/skyrepo/util/backup=backup;

restore=#fileList(path=backupPath).forEach(
	paramName="dir",
	op=#fileList(path=backupPath.add(z="@dir")).forEach(
		paramName="file",
		op=#object(
			a=#fileLoad(path=#add(_string="true",a=backupPath,aa="/",b="@dir",bb="/",f="@file")).fileToString().toObject().skyRepoCheckType(
				type="@dir"
			),
			z=#fileLoad(path=#add(_string="true",a=backupPath,aa="/",b="@dir",bb="/",f="@file")).fileToString().toObject().httpPut(
				url=#urlBase().add(
					z="/data/",
					zz="@dir",
					zzz="/",
					zzzz=#hexToString(obj="@file").urlEncode()
				),
				reliable="true",
				contentType="application/json"
			)
		).get(z="")
	)
).displayJson();

restore=#if(
	operator="@secret",
	operand=#fileLoad(path="skyId.secret").fileToString(),
	eq=restore,
	ne=#error(code="401",msg="Must provide secret.")
);

/skyrepo/util/restore=restore;