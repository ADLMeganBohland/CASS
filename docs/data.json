{
    "project": {
        "name": "CASS Javascript Library",
        "description": "CASS Javascript Library API: ",
        "version": "0.2",
        "url": "http://cassproject.org/",
        "logo": "http://www.cassproject.org/_/rsrc/1451948061999/config/customLogo.gif?revision=16"
    },
    "files": {
        "cass.competency.js": {
            "name": "cass.competency.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "cass.rollup.js": {
            "name": "cass.rollup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ebac.identity.js": {
            "name": "ebac.identity.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ebac.repository.js": {
            "name": "ebac.repository.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ec.base.js": {
            "name": "ec.base.js",
            "modules": {},
            "classes": {
                "Triple": 1,
                "EcObject": 1,
                "EcArray": 1,
                "EcAsyncHelper": 1,
                "Hypergraph": 1,
                "EcRemote": 1,
                "Graph": 1,
                "EcDirectedGraph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ec.crypto.js": {
            "name": "ec.crypto.js",
            "modules": {},
            "classes": {
                "EcPk": 1,
                "EcAes": 1,
                "EcRsaOaep": 1,
                "EcPpk": 1,
                "EcAesCtr": 1,
                "EcAesCtrAsync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ec.ui.framework.js": {
            "name": "ec.ui.framework.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "es.cassManager.js": {
            "name": "es.cassManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org.cassproject.schema.cass.js": {
            "name": "org.cassproject.schema.cass.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org.cassproject.schema.ebac.js": {
            "name": "org.cassproject.schema.ebac.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org.cassproject.schema.general.js": {
            "name": "org.cassproject.schema.general.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org.json-ld.js": {
            "name": "org.json-ld.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Triple": {
            "name": "Triple",
            "shortname": "Triple",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 10,
            "description": "Object to hold a triple, used in graph.",
            "author": "fritz.ray@eduworks.com"
        },
        "EcObject": {
            "name": "EcObject",
            "shortname": "EcObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 52,
            "description": "Object Helper Functions",
            "author": "fritz.ray@eduworks.com"
        },
        "EcArray": {
            "name": "EcArray",
            "shortname": "EcArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 70,
            "description": "Array Helper Functions",
            "author": "fritz.ray@eduworks.com"
        },
        "EcAsyncHelper": {
            "name": "EcAsyncHelper",
            "shortname": "EcAsyncHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 103,
            "description": "Pattern (probably similar to Promise) that provides fine grained control over asynchronous execution.\nWill iterate over all items in an array and perform 'each(item,callback)'. \nEvery 'each' needs to call the callback. This callback can be passed down through several asynchronous calls. \nWhen all callbacks have been called, 'after(array)' is called.",
            "author": "fritz.ray@eduworks.com"
        },
        "Hypergraph": {
            "name": "Hypergraph",
            "shortname": "Hypergraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 149,
            "description": "A hypergraph, consisting of a set of vertices of type <code>V</code> and a\nset of hyperedges of type <code>E</code> which connect the vertices. This is\nthe base interface for all JUNG graph types.\n<P>\nThis interface permits, but does not enforce, any of the following common\nvariations of graphs:\n<ul>\n<li/>hyperedges (edges which connect a set of vertices of any size)\n<li/>edges (these have have exactly two endpoints, which may or may not be\ndistinct)\n<li/>self-loops (edges which connect exactly one vertex)\n<li>directed and undirected edges\n<li>vertices and edges with attributes (for example, weighted edges)\n<li>vertices and edges with different constraints or properties (for example,\nbipartite or multimodal graphs)\n<li>parallel edges (multiple edges which connect a single set of vertices)\n<li>internal representations as matrices or as adjacency lists or adjacency\nmaps\n</ul>\nExtensions or implementations of this interface may enforce or disallow any\nor all of these variations.\n<p>\n<b>Notes</b>:\n<ul>\n<li/>The collections returned by <code>Hypergraph</code> instances should be\ntreated in general as if read-only. While they are not contractually\nguaranteed (or required) to be immutable, this interface does not define the\noutcome if they are mutated. Mutations should be done via\n<code>{add,remove}{Edge,Vertex}</code>, or in the constructor.\n<li/>\n</ul>",
            "author": "Tom Buskirk (Eduworks)"
        },
        "EcRemote": {
            "name": "EcRemote",
            "shortname": "EcRemote",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 631,
            "description": "Wrapper to handle all remote web service invocations.",
            "author": "devlin.junker@eduworks.com"
        },
        "Graph": {
            "name": "Graph",
            "shortname": "Graph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 807,
            "description": "A graph consisting of a set of vertices of type <code>V</code>\nset and a set of edges of type <code>E</code>.  Edges of this\ngraph type have exactly two endpoints; whether these endpoints \nmust be distinct depends on the implementation.\n<P>\nThis interface permits, but does not enforce, any of the following \ncommon variations of graphs:\n<ul>\n<li> directed and undirected edges\n<li> vertices and edges with attributes (for example, weighted edges)\n<li> vertices and edges of different types (for example, bipartite \n     or multimodal graphs)\n<li> parallel edges (multiple edges which connect a single set of vertices)\n<li> representations as matrices or as adjacency lists or adjacency maps\n</ul> \nExtensions or implementations of this interface \nmay enforce or disallow any or all of these variations.\n\n<p>Definitions (with respect to a given vertex <code>v</code>):\n<ul>\n<li/><b>incoming edge</b> of <code>v</code>: an edge that can be traversed \nfrom a neighbor of <code>v</code> to reach <code>v</code>\n<li/><b>outgoing edge</b> of <code>v</code>: an edge that can be traversed\nfrom <code>v</code> to reach some neighbor of <code>v</code> \n<li/><b>predecessor</b> of <code>v</code>: a vertex at the other end of an\nincoming edge of <code>v</code>\n<li/><b>successor</b> of <code>v</code>: a vertex at the other end of an \noutgoing edge of <code>v</code>\n<li/>\n</ul>",
            "extends": "Hypergraph",
            "author": "Tom Buskirk (Eduworks)"
        },
        "EcDirectedGraph": {
            "name": "EcDirectedGraph",
            "shortname": "EcDirectedGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.base.js",
            "line": 1013,
            "description": "A directed implementation of {{#crossLink \"Graph\"}}Graph{{/crossLink}}. Edges have types. Two vertices may have many edges between them.",
            "extends": "Graph",
            "author": "fray",
            "params": [
                {
                    "name": "<V>",
                    "description": ""
                },
                {
                    "name": "<E>",
                    "description": ""
                }
            ]
        },
        "EcPk": {
            "name": "EcPk",
            "shortname": "EcPk",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.crypto.js",
            "line": 20,
            "description": "Helper classes for dealing with RSA Public Keys.",
            "author": "fritz.ray@eduworks.com"
        },
        "EcAes": {
            "name": "EcAes",
            "shortname": "EcAes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.crypto.js",
            "line": 3671,
            "description": "AES encryption tasks common across all variants of AES.",
            "author": "fritz.ray@eduworks.com"
        },
        "EcRsaOaep": {
            "name": "EcRsaOaep",
            "shortname": "EcRsaOaep",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.crypto.js",
            "line": 4043,
            "description": "Helper methods for performing RSA Encryption methods. \nUses Optimal Asymmetric Encryption Padding (OAEP) encryption and decryption.\nUses RSA SSA PKCS#1 v1.5 (RSASSA-PKCS1-V1_5) signing and verifying with UTF8 encoding.",
            "author": "fritz.ray@eduworks.com"
        },
        "EcPpk": {
            "name": "EcPpk",
            "shortname": "EcPpk",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.crypto.js",
            "line": 6349,
            "description": "Helper classes for dealing with RSA Private Keys.",
            "author": "fritz.ray@eduworks.com"
        },
        "EcAesCtr": {
            "name": "EcAesCtr",
            "shortname": "EcAesCtr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.crypto.js",
            "line": 6593,
            "description": "Encrypts data synchronously using AES-256-CTR. Requires secret and iv to be 32 bytes.\nOutput is encoded in base64 for easier handling.",
            "author": "fritz.ray@eduworks.com"
        },
        "EcAesCtrAsync": {
            "name": "EcAesCtrAsync",
            "shortname": "EcAesCtrAsync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ec.crypto.js",
            "line": 6640,
            "description": "Asynchronous implementation of {{#crossLink \"EcAesCtr\"}}EcAesCtr{{/crossLink}}. Uses web workers and assumes 8 workers.",
            "author": "fritz.ray@eduworks.com"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "cass.competency.js",
            "line": 10,
            "description": "The sequence that assertions should be built as such: 1. Generate the ID. 2.\nAdd the owner. 3. Set the subject. 4. Set the agent. Further functions may be\ncalled afterwards in any order. WARNING: The modifications of ownership and\nreadership do not \"just work\".",
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "cass.competency.js",
            "line": 119,
            "description": "Sets the subject of an assertion. Makes a few assumptions: Owners of the\nobject should be able to see and change the encrypted value. Owners and\nreaders of the object should be persisted.",
            "params": [
                {
                    "name": "pk",
                    "description": ""
                }
            ],
            "class": "Triple"
        },
        {
            "file": "cass.competency.js",
            "line": 325,
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "cass.competency.js",
            "line": 383,
            "description": "TODO: Test case where an absent relation is in the framework.",
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "cass.competency.js",
            "line": 552,
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "cass.competency.js",
            "line": 659,
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "cass.rollup.js",
            "line": 972,
            "description": "IF IP type is COMPETENCY|ROLLUPRULE: assertionResult = ( IF number of\npositive assertions > 0 && number of negative assertions = 0 THEN\nassertionResult = TRUE IF number of positive assertions = 0 && number of\nnegative assertions > 0 THEN assertionResult = FALSE IF number of\npositive assertions > 0 && number of negative assertions > 0 THEN\nassertionResult = INDETERMINANT IF number of positive assertions = 0 &&\nnumber of negative assertions = 0 THEN assertionResult = UNKNOWN )\n\nIF assertionResult = INDETERMINANT THEN INDETERMINANT ELSE IF any\nequivalent packets = INDETERMINANT THEN INDETERMINANT ELSE IF any sub\npackets = INDETERMINANT THEN INDETERMINANT\n\nELSE IF assertionResult = UNKNOWN: IF all equivalent packets = UNKNOWN IF\nall sub packets = UNKNOWN THEN UNKNOWN IF all sub packets = TRUE|UNKNOWN\nTHEN TRUE IF all sub packets = FALSE|UNKNOWN THEN FALSE ELSE\nINDETERMINANT\n\nELSE IF all equivalent packets = TRUE|UNKNOWN IF all sub packets =\nTRUE|UNKNOWN THEN TRUE ELSE INDETERMINANT\n\nELSE IF all equivalent packets = FALSE|UNKNOWN IF all sub packets =\nFALSE|UNKNOWN THEN FALSE ELSE INDETERMINANT\n\nELSE INDETERMINANT\n\n\nELSE IF assertionResult = TRUE: IF all equivalent packets = TRUE|UNKNOWN\nIF all sub packets = TRUE|UNKNOWN THEN TRUE ELSE INDETERMINANT\n\nELSE INDETERMINANT\n\nELSE IF assertionResult = FALSE: IF all equivalent packets =\nFALSE|UNKNOWN IF all sub packets = FALSE|UNKNOWN THEN FALSE ELSE\nINDETERMINANT\n\nELSE INDETERMINANT",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 10,
            "description": "A contact is an identity that we do not own. Using the public key we may: 1.\nSend them information (by encrypting data with their public key) 2. Verify a\nsigned message that was sent (by using the verify function of the public key)\n3. Distinguish between this identity and other identities through the\ndisplayName.",
            "author": "fray",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 32,
            "description": "Helper function to encrypt a contact into an encrypted contact (storable\nversion of a contact)",
            "params": [
                {
                    "name": "secret",
                    "description": "AES secret used to encrypt the contact."
                }
            ],
            "return": {
                "description": "Encrypted contact object."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 50,
            "description": "Helper function to decrypt an encrypted contact (storable version of an contact)\ninto an contact",
            "params": [
                {
                    "name": "contact",
                    "description": "Contact to decrypt."
                },
                {
                    "name": "secret",
                    "description": "AES secret used to decrypt the credential."
                },
                {
                    "name": "source",
                    "description": "Source of the credential, used to track where a contact\n           came from."
                }
            ],
            "return": {
                "description": "Decrypted identity object, ready for use."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 72,
            "description": "An identity is an alias that a person or system may own. It consists of a\nprivate key and a display name. Using the private key we may: 1. Perform all\noperations of a EcContact. 2. Decrypt messages using our private key. 3. Sign\nmessages, ensuring the recipient knows that we sent the message and it was\nnot altered.",
            "author": "fray",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 94,
            "description": "Helper function to encrypt an identity into a credential (storable\nversion of an identity)",
            "params": [
                {
                    "name": "secret",
                    "description": "AES secret used to encrypt the credential."
                }
            ],
            "return": {
                "description": "Encrypted credential object."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 110,
            "description": "Helper function to decrypt a credential (storable version of an identity)\ninto an identity)",
            "params": [
                {
                    "name": "credential",
                    "description": "Credential to decrypt."
                },
                {
                    "name": "secret",
                    "description": "AES secret used to decrypt the credential."
                },
                {
                    "name": "source",
                    "description": "Source of the credential, used to track where a credential\n           came from."
                }
            ],
            "return": {
                "description": "Decrypted identity object, ready for use."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 131,
            "description": "Converts an identity to a contact.",
            "return": {
                "description": "Contact object."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 143,
            "description": "Manages identities and contacts, provides hooks to respond to identity and\ncontact events, and builds signatures and signature sheets for authorizing\nmovement of data. Also provides helper functions for identity management.",
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 168,
            "description": "Reads contact data from localstorage.",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 193,
            "description": "Writes contact data to localstorage.",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 209,
            "description": "Reads contact data from localstorage.",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 234,
            "description": "Writes contact data to localstorage.",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 254,
            "description": "Adds an identity to the identity manager. Checks for duplicates. Triggers\nevents.",
            "params": [
                {
                    "name": "identity",
                    "description": "Identity to add."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 268,
            "description": "Adds a contact to the identity manager. Checks for duplicates. Triggers\nevents.",
            "params": [
                {
                    "name": "contact",
                    "description": "Contact to add."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 292,
            "description": "Create a signature sheet, authorizing movement of data outside of our\ncontrol.",
            "params": [
                {
                    "name": "identityPksinPem",
                    "description": "Which identities to create signatures for."
                },
                {
                    "name": "duration",
                    "description": "Length of time in milliseconds to authorize control."
                },
                {
                    "name": "server",
                    "description": "Server that we are authorizing."
                }
            ],
            "return": {
                "description": "JSON Array containing signatures."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 341,
            "description": "Create a signature sheet for all identities, authorizing movement of data\noutside of our control.",
            "params": [
                {
                    "name": "duration",
                    "description": "Length of time in milliseconds to authorize control."
                },
                {
                    "name": "server",
                    "description": "Server that we are authorizing."
                }
            ],
            "return": {
                "description": "JSON Array containing signatures."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 389,
            "description": "Get PPK from PK (if we have it)",
            "params": [
                {
                    "name": "fromPem",
                    "description": "PK to use to look up PPK"
                }
            ],
            "return": {
                "description": "PPK or null."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 404,
            "description": "Get Contact from PK (if we have it)",
            "params": [
                {
                    "name": "pk",
                    "description": "PK to use to look up PPK"
                }
            ],
            "return": {
                "description": "PPK or null."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 418,
            "description": "Get Identity from PK (if we have it)",
            "params": [
                {
                    "name": "pk",
                    "description": "PK to use to look up PPK"
                }
            ],
            "return": {
                "description": "PPK or null."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 432,
            "description": "Sign a piece of data with all available keys that own that data.",
            "params": [
                {
                    "name": "d",
                    "description": "Data to sign."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 489,
            "description": "Logs into and stores/retrieves credentials from a compatible remote server.\nPerforms anonymization of the user.\n\nRequires initialization with server specific salts. Server specific salts\nprevent co-occurrence attacks, should credentials on one server be\ncompromised (intercepted in transit).\n\nTransmits hashed username, hashed password, and encrypts credentials using\nthe hashed combination of the username and password. This prevents the system\nstoring the credentials from having any knowledge of the user.\n\nPassword recovery is done by, when the password changes, creating a\ncryptographic pad (or perfect cipher) where one half is stored on the server,\nand the other half is stored with the user. Should the user lose this pad and\nforget their password, they are not able to recover or reset their password,\nand their data should be considered lost.",
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 526,
            "description": "Configure parameters of the remote login storage.",
            "params": [
                {
                    "name": "usernameSalt",
                    "description": "Salt used in hashing the username."
                },
                {
                    "name": "usernameIterations",
                    "description": "Number of times to hash the username."
                },
                {
                    "name": "usernameWidth",
                    "description": "Resultant width of username in bytes."
                },
                {
                    "name": "passwordSalt",
                    "description": "Salt used to hash password."
                },
                {
                    "name": "passwordIterations",
                    "description": "Number of times to hash password."
                },
                {
                    "name": "passwordWidth",
                    "description": "Resultant width of password in bytes."
                },
                {
                    "name": "secretSalt",
                    "description": "Salt used to hash secret (composed of username + password)"
                },
                {
                    "name": "secretIterations",
                    "description": "Number of times to hash secret."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 611,
            "description": "Wipes login data.",
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 621,
            "description": "Configure compatible remote identity management server.",
            "params": [
                {
                    "name": "server",
                    "description": "URL to remote identity management server."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 630,
            "description": "\"Log Into\" system, generating credentials. Does not actually remotely\naccess any machine.\n\nPlease clear username and password fields after this function is called.",
            "params": [
                {
                    "name": "username",
                    "description": "Username"
                },
                {
                    "name": "password",
                    "description": "Password"
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 653,
            "description": "Change password of user in memory. Does not automatically commit new credentials.\n\nPlease clear username and password fields after this function is called.",
            "params": [
                {
                    "name": "username",
                    "description": "Username"
                },
                {
                    "name": "oldPassword",
                    "description": "Current password"
                },
                {
                    "name": "newPassword",
                    "description": "Desired password"
                }
            ],
            "return": {
                "description": "Valid password change request."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 684,
            "description": "Fetch credentials from server, invoking events based on login success or\nfailure.\n\nAutomatically populates EcIdentityManager.\n\nRequires login().",
            "params": [
                {
                    "name": "success",
                    "description": ""
                },
                {
                    "name": "failure",
                    "description": ""
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 731,
            "description": "Commits credentials in EcIdentityManager to remote server.\n\nWill trigger pad generation and fail if the pad has not been specified.",
            "params": [
                {
                    "name": "success",
                    "description": ""
                },
                {
                    "name": "failure",
                    "description": ""
                },
                {
                    "name": "padGenerationCallback",
                    "description": ""
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 744,
            "description": "Creates an account.\n\nPlease note that the remote login server does not throw error messages if\nan account creation is blocked due to being a duplicate. This prevents\nlogin probing. This will always succeed (if the request is properly\nformed and makes it to the server).\n\nWill trigger pad generation and fail if the pad has not been specified.",
            "params": [
                {
                    "name": "success",
                    "description": ""
                },
                {
                    "name": "failure",
                    "description": ""
                },
                {
                    "name": "padGenerationCallback",
                    "description": ""
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.identity.js",
            "line": 806,
            "description": "Splices together passwords (in a fashion more like shuffling a deck of\ncards, not appending).",
            "params": [
                {
                    "name": "passwords",
                    "description": "Passwords to splice."
                }
            ],
            "return": {
                "description": "Spliced password."
            },
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 10,
            "description": "Represents an encrypted piece of data. Provides helper functions for\nencryption/decryption of JSON-LD objects, and provides some searchability of\nthe data within.",
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 319,
            "description": "Adds a reader to the object, if the reader does not exist.",
            "params": [
                {
                    "name": "newReader",
                    "description": "PK of the new reader."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 340,
            "description": "Removes a reader from the object, if the reader does exist.",
            "params": [
                {
                    "name": "oldReader",
                    "description": "PK of the old reader."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 355,
            "description": "A representation of a file.",
            "author": "fritz.ray@eduworks.com",
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 367,
            "description": "Optional checksum of the file, used to verify if the file has been\ntransmitted correctly.",
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 372,
            "description": "Mime type of the file.",
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 376,
            "description": "Base-64 encoded version of the bytestream of a file.\n\nPlease note: This field will be empty in search results, but be populated\nin a direct get.",
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 384,
            "description": "Helper method to force the browser to download the file.",
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 451,
            "description": "Gets a JSON-LD object from the place designated by the URI.\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the remote object."
                },
                {
                    "name": "success",
                    "description": "Event to call upon successful retrieval."
                },
                {
                    "name": "failure",
                    "description": "Event to call upon spectacular failure."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 527,
            "description": "Search a repository for JSON-LD compatible data.\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "params": [
                {
                    "name": "query",
                    "description": "ElasticSearch compatible query string, similar to Google query\n           strings."
                },
                {
                    "name": "eachSuccess",
                    "description": "Success event for each found object."
                },
                {
                    "name": "success",
                    "description": "Success event, called after eachSuccess."
                },
                {
                    "name": "failure",
                    "description": "Failure event."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 545,
            "description": "Search a repository for JSON-LD compatible data.\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "params": [
                {
                    "name": "query",
                    "description": "ElasticSearch compatible query string, similar to Google query\n           strings."
                },
                {
                    "name": "paramObj",
                    "description": "Additional parameters that can be used to tailor the search."
                },
                {
                    "name": "eachSuccess",
                    "description": "Success event for each found object."
                },
                {
                    "name": "success",
                    "description": "Success event, called after eachSuccess."
                },
                {
                    "name": "failure",
                    "description": "Failure event."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 667,
            "description": "Lists all types visible to the current user in the repository\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "params": [
                {
                    "name": "success",
                    "description": "Success event"
                },
                {
                    "name": "failure",
                    "description": "Failure event."
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 743,
            "description": "Attempts to save a piece of data.\n\nUses a signature sheet informed by the owner field of the data.",
            "params": [
                {
                    "name": "data",
                    "description": "Data to save to the location designated by its id."
                },
                {
                    "name": "success",
                    "description": ""
                },
                {
                    "name": "failure",
                    "description": ""
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 757,
            "description": "Attempts to save a piece of data without signing it.\n\nUses a signature sheet informed by the owner field of the data.",
            "params": [
                {
                    "name": "data",
                    "description": "Data to save to the location designated by its id."
                },
                {
                    "name": "success",
                    "description": ""
                },
                {
                    "name": "failure",
                    "description": ""
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ebac.repository.js",
            "line": 784,
            "description": "Attempts to delete a piece of data.\n\nUses a signature sheet informed by the owner field of the data.",
            "params": [
                {
                    "name": "data",
                    "description": "Data to save to the location designated by its id."
                },
                {
                    "name": "success",
                    "description": ""
                },
                {
                    "name": "failure",
                    "description": ""
                }
            ],
            "class": "Triple"
        },
        {
            "file": "ec.base.js",
            "line": 17,
            "description": "Source vertex.",
            "itemtype": "property",
            "name": "source",
            "type": "any",
            "class": "Triple"
        },
        {
            "file": "ec.base.js",
            "line": 23,
            "description": "Destination vertex.",
            "itemtype": "property",
            "name": "destination",
            "type": "any",
            "class": "Triple"
        },
        {
            "file": "ec.base.js",
            "line": 29,
            "description": "Object to hold in the edge.",
            "itemtype": "property",
            "name": "edge",
            "type": "any",
            "class": "Triple"
        },
        {
            "file": "ec.base.js",
            "line": 35,
            "description": "Returns true IFF sources, destinations, and edges match.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Edge"
                }
            ],
            "return": {
                "description": "true IFF <see method definition>",
                "type": "Boolean"
            },
            "class": "Triple"
        },
        {
            "file": "ec.base.js",
            "line": 59,
            "description": "Returns true if the result is an object.",
            "static": 1,
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "o",
                    "description": "Object to test.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "true iff the object is an object."
            },
            "class": "EcObject"
        },
        {
            "file": "ec.base.js",
            "line": 77,
            "description": "Returns true if the result is an array.",
            "static": 1,
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "o",
                    "description": "Object to test.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "true iff the object is an array."
            },
            "class": "EcArray"
        },
        {
            "file": "ec.base.js",
            "line": 87,
            "description": "Removes values IFF the values == one another.",
            "static": 1,
            "itemtype": "method",
            "name": "removeDuplicates",
            "params": [
                {
                    "name": "a",
                    "description": "Array to remove duplicates from.",
                    "type": "Array"
                }
            ],
            "class": "EcArray"
        },
        {
            "file": "ec.base.js",
            "line": 114,
            "description": "Counter that counts down when each callback is called. Lots of tricks can be done to cause after to proc in different ways.",
            "itemtype": "property",
            "name": "counter",
            "type": "integer",
            "class": "EcAsyncHelper"
        },
        {
            "file": "ec.base.js",
            "line": 120,
            "description": "\"Each\" method. See class description.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "array",
                    "description": "Array to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "each",
                    "description": "Method that gets invoked per item in the array.",
                    "type": "Function(item,callback)"
                },
                {
                    "name": "after",
                    "description": "Method invoked when all callbacks are called.",
                    "type": "Function(array)"
                }
            ],
            "class": "EcAsyncHelper"
        },
        {
            "file": "ec.base.js",
            "line": 141,
            "description": "Will prevent 'after' from being called.",
            "itemtype": "method",
            "name": "stop",
            "class": "EcAsyncHelper"
        },
        {
            "file": "ec.base.js",
            "line": 191,
            "description": "Returns a view of all edges in this graph. In general, this obeys the\n<code>Array</code> contract, and therefore makes no guarantees about the\nordering of the vertices within the set.",
            "itemtype": "method",
            "name": "getEdges",
            "return": {
                "description": "a <code>Array</code> view of all edges in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 200,
            "description": "Returns a view of all vertices in this graph. In general, this obeys the\n<code>Array</code> contract, and therefore makes no guarantees about the\nordering of the vertices within the set.",
            "itemtype": "method",
            "name": "getVerticies",
            "return": {
                "description": "a <code>Array</code> view of all vertices in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 209,
            "description": "Returns true if this graph's vertex collection contains\n<code>vertex</code>. Equivalent to\n<code>getVertices().contains(vertex)</code>.",
            "itemtype": "method",
            "name": "containsVertex",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose presence is being queried"
                }
            ],
            "return": {
                "description": "true iff this graph contains a vertex <code>vertex</code>"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 220,
            "description": "Returns true if this graph's edge collection contains <code>edge</code>.\nEquivalent to <code>getEdges().contains(edge)</code>.",
            "itemtype": "method",
            "name": "containsEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "the edge whose presence is being queried"
                }
            ],
            "return": {
                "description": "true iff this graph contains an edge <code>edge</code>"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 230,
            "description": "Returns the number of edges in this graph.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "the number of edges in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 237,
            "description": "Returns the number of vertices in this graph.",
            "itemtype": "method",
            "name": "getVertexCount",
            "return": {
                "description": "the number of vertices in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 244,
            "description": "Returns the collection of vertices which are connected to\n<code>vertex</code> via any edges in this graph. If <code>vertex</code>\nis connected to itself with a self-loop, then it will be included in the\ncollection returned.",
            "itemtype": "method",
            "name": "getNeighbors",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose neighbors are to be returned"
                }
            ],
            "return": {
                "description": "the collection of vertices which are connected to\n        <code>vertex</code>, or <code>null</code> if <code>vertex</code>\n        is not present"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 258,
            "description": "Returns the collection of edges in this graph which are connected to\n<code>vertex</code>.",
            "itemtype": "method",
            "name": "getIncidentEdges",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose incident edges are to be returned"
                }
            ],
            "return": {
                "description": "the collection of edges which are connected to\n        <code>vertex</code>, or <code>null</code> if <code>vertex</code>\n        is not present"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 270,
            "description": "Returns the collection of vertices in this graph which are connected to\n<code>edge</code>. Note that for some graph types there are guarantees\nabout the size of this collection (i.e., some graphs contain edges that\nhave exactly two endpoints, which may or may not be distinct).\nImplementations for those graph types may provide alternate methods that\nprovide more convenient access to the vertices.",
            "itemtype": "method",
            "name": "getIncidentVertices",
            "params": [
                {
                    "name": "edge",
                    "description": "the edge whose incident vertices are to be returned"
                }
            ],
            "return": {
                "description": "the collection of vertices which are connected to\n        <code>edge</code>, or <code>null</code> if <code>edge</code> is\n        not present"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 286,
            "description": "Returns an edge that connects this vertex to <code>v</code>. If this edge\nis not uniquely defined (that is, if the graph contains more than one\nedge connecting <code>v1</code> to <code>v2</code>), any of these edges\nmay be returned. <code>findEdgeSet(v1, v2)</code> may be used to return\nall such edges. Returns null if either of the following is true:\n<ul>\n<li/><code>v2</code> is not connected to <code>v1</code>\n<li/>either <code>v1</code> or <code>v2</code> are not present in this\ngraph\n</ul>\n<p>\n<b>Note</b>: for purposes of this method, <code>v1</code> is only\nconsidered to be connected to <code>v2</code> via a given <i>directed</i>\nedge <code>e</code> if\n<code>v1 == e.getSource() && v2 == e.getDest()</code> evaluates to\n<code>true</code>. (<code>v1</code> and <code>v2</code> are connected by\nan undirected edge <code>u</code> if <code>u</code> is incident to both\n<code>v1</code> and <code>v2</code>.)",
            "itemtype": "method",
            "name": "findEdge",
            "params": [
                {
                    "name": "v1",
                    "description": "between this"
                },
                {
                    "name": "v2",
                    "description": "and that"
                }
            ],
            "return": {
                "description": "an edge that connects <code>v1</code> to <code>v2</code>, or\n        <code>null</code> if no such edge exists (or either vertex is not\n        present)"
            },
            "see": [
                "Hypergraph#findEdgeSet(Object",
                "Object)"
            ],
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 315,
            "description": "Returns all edges that connects this vertex to <code>v</code>. If this\nedge is not uniquely defined (that is, if the graph contains more than\none edge connecting <code>v1</code> to <code>v2</code>), any of these\nedges may be returned. <code>findEdgeSet(v1, v2)</code> may be used to\nreturn all such edges. Returns null if <code>v2</code> is not connected\nto <code>v1</code>. <br/>\nReturns an empty collection if either <code>v1</code> or <code>v2</code>\nare not present in this graph.\n\n<p>\n<b>Note</b>: for purposes of this method, <code>v1</code> is only\nconsidered to be connected to <code>v2</code> via a given <i>directed</i>\nedge <code>d</code> if\n<code>v1 == d.getSource() && v2 == d.getDest()</code> evaluates to\n<code>true</code>. (<code>v1</code> and <code>v2</code> are connected by\nan undirected edge <code>u</code> if <code>u</code> is incident to both\n<code>v1</code> and <code>v2</code>.)",
            "itemtype": "method",
            "name": "findEdgeSet",
            "params": [
                {
                    "name": "v1",
                    "description": "between this"
                },
                {
                    "name": "v2",
                    "description": "and that"
                }
            ],
            "return": {
                "description": "a collection containing all edges that connect <code>v1</code> to\n        <code>v2</code>, or <code>null</code> if either vertex is not\n        present"
            },
            "see": [
                "Hypergraph#findEdge(Object",
                "Object)"
            ],
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 343,
            "description": "Adds <code>vertex</code> to this graph. Fails if <code>vertex</code> is\nnull or already in the graph.",
            "itemtype": "method",
            "name": "addVertex",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex to add"
                }
            ],
            "return": {
                "description": "<code>true</code> if the add is successful, and\n        <code>false</code> otherwise"
            },
            "throws": {
                "description": "IllegalArgumentException\n            if <code>vertex</code> is <code>null</code>"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 356,
            "description": "Adds <code>edge</code> to this graph. Fails under the following\ncircumstances:\n<ul>\n<li/><code>edge</code> is already an element of the graph\n<li/>either <code>edge</code> or <code>vertices</code> is\n<code>null</code>\n<li/><code>vertices</code> has the wrong number of vertices for the graph\ntype\n<li/><code>vertices</code> are already connected by another edge in this\ngraph, and this graph does not accept parallel edges\n</ul>",
            "itemtype": "method",
            "name": "addHyperEdge",
            "params": [
                {
                    "name": "edge",
                    "description": ""
                },
                {
                    "name": "vertices",
                    "description": ""
                }
            ],
            "return": {
                "description": "<code>true</code> if the add is successful, and\n        <code>false</code> otherwise"
            },
            "throws": {
                "description": "IllegalArgumentException\n            if <code>edge</code> or <code>vertices</code> is null, or if\n            a different vertex set in this graph is already connected by\n            <code>edge</code>, or if <code>vertices</code> are not a\n            legal vertex set for <code>edge</code>"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 381,
            "description": "Removes <code>vertex</code> from this graph. As a side effect, removes\nany edges <code>e</code> incident to <code>vertex</code> if the removal\nof <code>vertex</code> would cause <code>e</code> to be incident to an\nillegal number of vertices. (Thus, for example, incident hyperedges are\nnot removed, but incident edges--which must be connected to a vertex at\nboth endpoints--are removed.)\n\n<p>\nFails under the following circumstances:\n<ul>\n<li/><code>vertex</code> is not an element of this graph\n<li/><code>vertex</code> is <code>null</code>\n</ul>",
            "itemtype": "method",
            "name": "removeVertex",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex to remove"
                }
            ],
            "return": {
                "description": "<code>true</code> if the removal is successful,\n        <code>false</code> otherwise"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 403,
            "description": "Removes <code>edge</code> from this graph. Fails if <code>edge</code> is\nnull, or is otherwise not an element of this graph.",
            "itemtype": "method",
            "name": "removeEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "the edge to remove"
                }
            ],
            "return": {
                "description": "<code>true</code> if the removal is successful,\n        <code>false</code> otherwise"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 414,
            "description": "Returns <code>true</code> if <code>v1</code> and <code>v2</code> share an\nincident edge. Equivalent to <code>getNeighbors(v1).contains(v2)</code>.",
            "itemtype": "method",
            "name": "isNeighbor",
            "params": [
                {
                    "name": "v1",
                    "description": "the first vertex to test"
                },
                {
                    "name": "v2",
                    "description": "the second vertex to test"
                }
            ],
            "return": {
                "description": "<code>true</code> if <code>v1</code> and <code>v2</code> share an\n        incident edge"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 427,
            "description": "Returns <code>true</code> if <code>vertex</code> and <code>edge</code>\nare incident to each other. Equivalent to\n<code>getIncidentEdges(vertex).contains(edge)</code> and to\n<code>getIncidentVertices(edge).contains(vertex)</code>.",
            "itemtype": "method",
            "name": "isIncident",
            "params": [
                {
                    "name": "vertex",
                    "description": ""
                },
                {
                    "name": "edge",
                    "description": ""
                }
            ],
            "return": {
                "description": "<code>true</code> if <code>vertex</code> and <code>edge</code>\n        are incident to each other"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 440,
            "description": "Returns the number of edges incident to <code>vertex</code>. Special\ncases of interest:\n<ul>\n<li/>Incident self-loops are counted once.\n<li>If there is only one edge that connects this vertex to each of its\nneighbors (and vice versa), then the value returned will also be equal to\nthe number of neighbors that this vertex has (that is, the output of\n<code>getNeighborCount</code>).\n<li>If the graph is directed, then the value returned will be the sum of\nthis vertex's indegree (the number of edges whose destination is this\nvertex) and its outdegree (the number of edges whose source is this\nvertex), minus the number of incident self-loops (to avoid\ndouble-counting).\n</ul>\n<p>\nEquivalent to <code>getIncidentEdges(vertex).size()</code>.",
            "itemtype": "method",
            "name": "degree",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose degree is to be returned"
                }
            ],
            "return": {
                "description": "the degree of this node"
            },
            "see": [
                "Hypergraph#getNeighborCount(Object)"
            ],
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 465,
            "description": "Returns the number of vertices that are adjacent to <code>vertex</code>\n(that is, the number of vertices that are incident to edges in\n<code>vertex</code>'s incident edge set).\n\n<p>\nEquivalent to <code>getNeighbors(vertex).size()</code>.",
            "itemtype": "method",
            "name": "getNeighborCount",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose neighbor count is to be returned"
                }
            ],
            "return": {
                "description": "the number of neighboring vertices"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 479,
            "description": "Returns the number of vertices that are incident to <code>edge</code>.\nFor hyperedges, this can be any nonnegative integer; for edges this must\nbe 2 (or 1 if self-loops are permitted).\n\n<p>\nEquivalent to <code>getIncidentVertices(edge).size()</code>.",
            "itemtype": "method",
            "name": "getIncidentCount",
            "params": [
                {
                    "name": "edge",
                    "description": "the edge whose incident vertex count is to be returned"
                }
            ],
            "return": {
                "description": "the number of vertices that are incident to <code>edge</code>."
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 493,
            "description": "Returns the edge type of <code>edge</code> in this graph.",
            "itemtype": "method",
            "name": "getEdgeType",
            "params": [
                {
                    "name": "edge",
                    "description": ""
                }
            ],
            "return": {
                "description": "the <code>EdgeType</code> of <code>edge</code>, or\n        <code>null</code> if <code>edge</code> has no defined type"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 502,
            "description": "Returns the default edge type for this graph.",
            "itemtype": "method",
            "name": "getDefaultEdgeType",
            "return": {
                "description": "the default edge type for this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 509,
            "description": "Returns the collection of edges in this graph which are of type\n<code>edge_type</code>.",
            "itemtype": "method",
            "name": "getEdgesOfType",
            "params": [
                {
                    "name": "edge_type",
                    "description": "the type of edges to be returned"
                }
            ],
            "return": {
                "description": "the collection of edges which are of type <code>edge_type</code>,\n        or <code>null</code> if the graph does not accept edges of this\n        type"
            },
            "see": [
                "EdgeType"
            ],
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 522,
            "description": "Returns the number of edges of type <code>edge_type</code> in this graph.",
            "itemtype": "method",
            "name": "getEdgeCountOfType",
            "params": [
                {
                    "name": "edge_type",
                    "description": "the type of edge for which the count is to be returned"
                }
            ],
            "return": {
                "description": "the number of edges of type <code>edge_type</code> in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 531,
            "description": "Returns a <code>Array</code> view of the incoming edges incident to\n<code>vertex</code> in this graph.",
            "itemtype": "method",
            "name": "getInEdges",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose incoming edges are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Array</code> view of the incoming edges incident to\n        <code>vertex</code> in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 542,
            "description": "Returns a <code>Array</code> view of the outgoing edges incident to\n<code>vertex</code> in this graph.",
            "itemtype": "method",
            "name": "getOutEdges",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose outgoing edges are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Array</code> view of the outgoing edges incident to\n        <code>vertex</code> in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 553,
            "description": "Returns the number of incoming edges incident to <code>vertex</code>.\nEquivalent to <code>getInEdges(vertex).size()</code>.",
            "itemtype": "method",
            "name": "inDegree",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose indegree is to be calculated"
                }
            ],
            "return": {
                "description": "the number of incoming edges incident to <code>vertex</code>"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 563,
            "description": "Returns the number of outgoing edges incident to <code>vertex</code>.\nEquivalent to <code>getOutEdges(vertex).size()</code>.",
            "itemtype": "method",
            "name": "outDegree",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose outdegree is to be calculated"
                }
            ],
            "return": {
                "description": "the number of outgoing edges incident to <code>vertex</code>"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 573,
            "description": "If <code>directed_edge</code> is a directed edge in this graph, returns\nthe source; otherwise returns <code>null</code>. The source of a directed\nedge <code>d</code> is defined to be the vertex for which <code>d</code>\nis an outgoing edge. <code>directed_edge</code> is guaranteed to be a\ndirected edge if its <code>EdgeType</code> is <code>DIRECTED</code>.",
            "itemtype": "method",
            "name": "getSource",
            "params": [
                {
                    "name": "directed_edge",
                    "description": ""
                }
            ],
            "return": {
                "description": "the source of <code>directed_edge</code> if it is a directed edge\n        in this graph, or <code>null</code> otherwise"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 586,
            "description": "If <code>directed_edge</code> is a directed edge in this graph, returns\nthe destination; otherwise returns <code>null</code>. The destination of\na directed edge <code>d</code> is defined to be the vertex incident to\n<code>d</code> for which <code>d</code> is an incoming edge.\n<code>directed_edge</code> is guaranteed to be a directed edge if its\n<code>EdgeType</code> is <code>DIRECTED</code>.",
            "itemtype": "method",
            "name": "getDest",
            "params": [
                {
                    "name": "directed_edge",
                    "description": ""
                }
            ],
            "return": {
                "description": "the destination of <code>directed_edge</code> if it is a directed\n        edge in this graph, or <code>null</code> otherwise"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 600,
            "description": "Returns a <code>Array</code> view of the predecessors of\n<code>vertex</code> in this graph. A predecessor of <code>vertex</code>\nis defined as a vertex <code>v</code> which is connected to\n<code>vertex</code> by an edge <code>e</code>, where <code>e</code> is an\noutgoing edge of <code>v</code> and an incoming edge of\n<code>vertex</code>.",
            "itemtype": "method",
            "name": "getPredecessors",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose predecessors are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Array</code> view of the predecessors of\n        <code>vertex</code> in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 615,
            "description": "Returns a <code>Array</code> view of the successors of\n<code>vertex</code> in this graph. A successor of <code>vertex</code> is\ndefined as a vertex <code>v</code> which is connected to\n<code>vertex</code> by an edge <code>e</code>, where <code>e</code> is an\nincoming edge of <code>v</code> and an outgoing edge of\n<code>vertex</code>.",
            "itemtype": "method",
            "name": "getSuccessors",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose predecessors are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Array</code> view of the successors of\n        <code>vertex</code> in this graph"
            },
            "class": "Hypergraph"
        },
        {
            "file": "ec.base.js",
            "line": 639,
            "description": "Turn this property off to cause all remote web service calls to be synchronous. Can be useful for test scripts, blocking calls, etc.",
            "itemtype": "property",
            "name": "async",
            "static": 1,
            "type": "boolean",
            "class": "EcRemote"
        },
        {
            "file": "ec.base.js",
            "line": 646,
            "description": "POSTs a request to a remote endpoint. \nComposed of a server endpoint (root URL) and a service (service path).\nSends form data as a multi-part mime request.",
            "itemtype": "method",
            "name": "postExpectingObject",
            "static": 1,
            "params": [
                {
                    "name": "server",
                    "description": "Protocol, hostname and path to the remote handler.",
                    "type": "String"
                },
                {
                    "name": "service",
                    "description": "Path to service to invoke.",
                    "type": "String"
                },
                {
                    "name": "fd",
                    "description": "Form data to send as multi-part mime.",
                    "type": "FormData"
                },
                {
                    "name": "success",
                    "description": "Method that is invoked if the server responds with a success (per jQuery ajax)",
                    "type": "Function(object)"
                },
                {
                    "name": "failure",
                    "description": "Method that is invoked if the server responds with an error (per jQuery ajax) or a non-200/300.",
                    "type": "Function(string)"
                }
            ],
            "class": "EcRemote"
        },
        {
            "file": "ec.base.js",
            "line": 661,
            "description": "POSTs a request to a remote endpoint. \nComposed of a server endpoint (root URL) and a service (service path).\nSends form data as a multi-part mime request.",
            "itemtype": "method",
            "name": "postExpectingString",
            "static": 1,
            "params": [
                {
                    "name": "server",
                    "description": "Protocol, hostname and path to the remote handler.",
                    "type": "String"
                },
                {
                    "name": "service",
                    "description": "Path to service to invoke.",
                    "type": "String"
                },
                {
                    "name": "fd",
                    "description": "Form data to send as multi-part mime.",
                    "type": "FormData"
                },
                {
                    "name": "success",
                    "description": "Method that is invoked if the server responds with a success (per jQuery ajax)",
                    "type": "Function(string)"
                },
                {
                    "name": "failure",
                    "description": "Method that is invoked if the server responds with an error (per jQuery ajax) or a non-200/300.",
                    "type": "Function(string)"
                }
            ],
            "class": "EcRemote"
        },
        {
            "file": "ec.base.js",
            "line": 711,
            "description": "GETs something from a remote endpoint. \nComposed of a server endpoint (root URL) and a service (service path).",
            "itemtype": "method",
            "name": "postExpectingString",
            "static": 1,
            "params": [
                {
                    "name": "server",
                    "description": "Protocol, hostname and path to the remote handler.",
                    "type": "String"
                },
                {
                    "name": "service",
                    "description": "Path to service to invoke.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "Method that is invoked if the server responds with a success (per jQuery ajax)",
                    "type": "Function(object)"
                },
                {
                    "name": "failure",
                    "description": "Method that is invoked if the server responds with an error (per jQuery ajax) or a non-200/300.",
                    "type": "Function(string)"
                }
            ],
            "class": "EcRemote"
        },
        {
            "file": "ec.base.js",
            "line": 739,
            "description": "DELETEs something at a remote endpoint. \nComposed of a server endpoint (root URL) and a service (service path).",
            "itemtype": "method",
            "name": "_delete",
            "static": 1,
            "params": [
                {
                    "name": "server",
                    "description": "Protocol, hostname and path to the remote handler.",
                    "type": "String"
                },
                {
                    "name": "service",
                    "description": "Path to service to invoke.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "Method that is invoked if the server responds with a success (per jQuery ajax)",
                    "type": "Function(object)"
                },
                {
                    "name": "failure",
                    "description": "Method that is invoked if the server responds with an error (per jQuery ajax) or a non-200/300.",
                    "type": "Function(string)"
                }
            ],
            "class": "EcRemote"
        },
        {
            "file": "ec.base.js",
            "line": 849,
            "description": "Returns a <code>Collection</code> view of the incoming edges incident to <code>vertex</code>\nin this graph.",
            "itemtype": "method",
            "name": "getInEdges",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose incoming edges are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Collection</code> view of the incoming edges incident \nto <code>vertex</code> in this graph"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 858,
            "description": "Returns a <code>Collection</code> view of the outgoing edges incident to <code>vertex</code>\nin this graph.",
            "itemtype": "method",
            "name": "getOutEdges",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose outgoing edges are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Collection</code> view of the outgoing edges incident \nto <code>vertex</code> in this graph"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 867,
            "description": "Returns a <code>Collection</code> view of the predecessors of <code>vertex</code> \nin this graph.  A predecessor of <code>vertex</code> is defined as a vertex <code>v</code> \nwhich is connected to \n<code>vertex</code> by an edge <code>e</code>, where <code>e</code> is an outgoing edge of \n<code>v</code> and an incoming edge of <code>vertex</code>.",
            "itemtype": "method",
            "name": "getPredecessors",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose predecessors are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Collection</code> view of the predecessors of \n<code>vertex</code> in this graph"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 879,
            "description": "Returns a <code>Collection</code> view of the successors of <code>vertex</code> \nin this graph.  A successor of <code>vertex</code> is defined as a vertex <code>v</code> \nwhich is connected to \n<code>vertex</code> by an edge <code>e</code>, where <code>e</code> is an incoming edge of \n<code>v</code> and an outgoing edge of <code>vertex</code>.",
            "itemtype": "method",
            "name": "getSuccessors",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose predecessors are to be returned"
                }
            ],
            "return": {
                "description": "a <code>Collection</code> view of the successors of \n<code>vertex</code> in this graph"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 891,
            "description": "Returns the number of incoming edges incident to <code>vertex</code>.\nEquivalent to <code>getInEdges(vertex).size()</code>.",
            "itemtype": "method",
            "name": "inDegree",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose indegree is to be calculated"
                }
            ],
            "return": {
                "description": "the number of incoming edges incident to <code>vertex</code>"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 899,
            "description": "Returns the number of outgoing edges incident to <code>vertex</code>.\nEquivalent to <code>getOutEdges(vertex).size()</code>.",
            "itemtype": "method",
            "name": "outDegree",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose outdegree is to be calculated"
                }
            ],
            "return": {
                "description": "the number of outgoing edges incident to <code>vertex</code>"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 907,
            "description": "Returns <code>true</code> if <code>v1</code> is a predecessor of <code>v2</code> in this graph.\nEquivalent to <code>v1.getPredecessors().contains(v2)</code>.",
            "itemtype": "method",
            "name": "isPredecessor",
            "params": [
                {
                    "name": "v1",
                    "description": "the first vertex to be queried"
                },
                {
                    "name": "v2",
                    "description": "the second vertex to be queried"
                }
            ],
            "return": {
                "description": "<code>true</code> if <code>v1</code> is a predecessor of <code>v2</code>, and false otherwise."
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 916,
            "description": "Returns <code>true</code> if <code>v1</code> is a successor of <code>v2</code> in this graph.\nEquivalent to <code>v1.getSuccessors().contains(v2)</code>.",
            "itemtype": "method",
            "name": "isSuccessor",
            "params": [
                {
                    "name": "v1",
                    "description": "the first vertex to be queried"
                },
                {
                    "name": "v2",
                    "description": "the second vertex to be queried"
                }
            ],
            "return": {
                "description": "<code>true</code> if <code>v1</code> is a successor of <code>v2</code>, and false otherwise."
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 925,
            "description": "Returns the number of predecessors that <code>vertex</code> has in this graph.\nEquivalent to <code>vertex.getPredecessors().size()</code>.",
            "itemtype": "method",
            "name": "getPredecessorCount",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose predecessor count is to be returned"
                }
            ],
            "return": {
                "description": "the number of predecessors that <code>vertex</code> has in this graph"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 933,
            "description": "Returns the number of successors that <code>vertex</code> has in this graph.\nEquivalent to <code>vertex.getSuccessors().size()</code>.",
            "itemtype": "method",
            "name": "getSuccessorCount",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex whose successor count is to be returned"
                }
            ],
            "return": {
                "description": "the number of successors that <code>vertex</code> has in this graph"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 941,
            "description": "If <code>directed_edge</code> is a directed edge in this graph, returns the source; \notherwise returns <code>null</code>. \nThe source of a directed edge <code>d</code> is defined to be the vertex for which  \n<code>d</code> is an outgoing edge.\n<code>directed_edge</code> is guaranteed to be a directed edge if \nits <code>EdgeType</code> is <code>DIRECTED</code>.",
            "itemtype": "method",
            "name": "getSource",
            "params": [
                {
                    "name": "directed_edge",
                    "description": ""
                }
            ],
            "return": {
                "description": "the source of <code>directed_edge</code> if it is a directed edge in this graph, or <code>null</code> otherwise"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 953,
            "description": "If <code>directed_edge</code> is a directed edge in this graph, returns the destination; \notherwise returns <code>null</code>. \nThe destination of a directed edge <code>d</code> is defined to be the vertex \nincident to <code>d</code> for which  \n<code>d</code> is an incoming edge.\n<code>directed_edge</code> is guaranteed to be a directed edge if \nits <code>EdgeType</code> is <code>DIRECTED</code>.",
            "itemtype": "method",
            "name": "getDest",
            "params": [
                {
                    "name": "directed_edge",
                    "description": ""
                }
            ],
            "return": {
                "description": "the destination of <code>directed_edge</code> if it is a directed edge in this graph, or <code>null</code> otherwise"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 966,
            "description": "Returns <code>true</code> if <code>vertex</code> is the source of <code>edge</code>.\nEquivalent to <code>getSource(edge).equals(vertex)</code>.",
            "itemtype": "method",
            "name": "isSource",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex to be queried"
                },
                {
                    "name": "edge",
                    "description": "the edge to be queried"
                }
            ],
            "return": {
                "description": "<code>true</code> iff <code>vertex</code> is the source of <code>edge</code>"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 975,
            "description": "Returns <code>true</code> if <code>vertex</code> is the destination of <code>edge</code>.\nEquivalent to <code>getDest(edge).equals(vertex)</code>.",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex to be queried"
                },
                {
                    "name": "edge",
                    "description": "the edge to be queried"
                }
            ],
            "return": {
                "description": "<code>true</code> iff <code>vertex</code> is the destination of <code>edge</code>"
            },
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 983,
            "description": "Adds edge <code>e</code> to this graph such that it connects \nvertex <code>v1</code> to <code>v2</code>.\nEquivalent to <code>addEdge(e, new Pair<V>(v1, v2))</code>.\nIf this graph does not contain <code>v1</code>, <code>v2</code>, \nor both, implementations may choose to either silently add \nthe vertices to the graph or throw an <code>IllegalArgumentException</code>.\nIf this graph assigns edge types to its edges, the edge type of\n<code>e</code> will be the default for this graph.\nSee <code>Hypergraph.addEdge()</code> for a listing of possible reasons\nfor failure.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "e",
                    "description": "the edge to be added"
                },
                {
                    "name": "v1",
                    "description": "the first vertex to be connected"
                },
                {
                    "name": "v2",
                    "description": "the second vertex to be connected"
                }
            ],
            "return": {
                "description": "<code>true</code> if the add is successful, <code>false</code> otherwise"
            },
            "see": [
                "Hypergraph#addEdge(Object",
                "Collection)",
                "#addEdge(Object",
                "Object",
                "Object",
                "EdgeType)"
            ],
            "class": "Graph"
        },
        {
            "file": "ec.base.js",
            "line": 1003,
            "description": "Returns the vertex at the other end of <code>edge</code> from <code>vertex</code>.\n(That is, returns the vertex incident to <code>edge</code> which is not <code>vertex</code>.)",
            "itemtype": "method",
            "name": "getOpposite",
            "params": [
                {
                    "name": "vertex",
                    "description": "the vertex to be queried"
                },
                {
                    "name": "edge",
                    "description": "the edge to be queried"
                }
            ],
            "return": {
                "description": "the vertex at the other end of <code>edge</code> from <code>vertex</code>"
            },
            "class": "Graph"
        },
        {
            "file": "ec.crypto.js",
            "line": 27,
            "description": "Decodes a PEM encoded SubjectPublicKeyInfo (PKCS#8) or RSAPublicKey (PKCS#1) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "fromPem",
            "static": 1,
            "params": [
                {
                    "name": "pem",
                    "description": "PEM as a string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object used to perform public key operations.",
                "type": "EcPk"
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 45,
            "description": "Compares two public keys, and returns true if their PEM forms match.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to compare to.",
                    "type": "EcPk"
                }
            ],
            "return": {
                "description": "True if the keys match.",
                "type": "Boolean"
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 56,
            "description": "Encodes the public key into a PEM encoded SubjectPublicKeyInfo (PKCS#8) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "toPem",
            "return": {
                "description": "PEM encoded public key without whitespace.",
                "type": "String"
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 65,
            "description": "Encodes the public key into a PEM encoded RSAPublicKey (PKCS#1) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "toPem",
            "return": {
                "description": "PEM encoded public key without whitespace.",
                "type": "String"
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 74,
            "description": "Encodes the public key into a PEM encoded SubjectPublicKeyInfo (PKCS#8) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "toPem",
            "return": {
                "description": "PEM encoded public key without whitespace.",
                "type": "String"
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 87,
            "description": "Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.\n\nSee FIPS 180-2 for details.",
            "author": "Dave Longley\n\nCopyright (c) 2010-2014 Digital Bazaar, Inc.",
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 105,
            "description": "Creates a SHA-256 message digest object.",
            "return": {
                "description": "a message digest object."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 136,
            "description": "Starts the digest.",
            "return": {
                "description": "this digest object."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 160,
            "description": "Updates the digest with the given message input. The given input can\ntreated as raw input (no encoding will be applied) or an encoding of\n'utf8' maybe given to encode the input using UTF-8.",
            "params": [
                {
                    "name": "msg",
                    "description": "the message input to update with."
                },
                {
                    "name": "encoding",
                    "description": "the encoding to use (default: 'raw', other: 'utf8')."
                }
            ],
            "return": {
                "description": "this digest object."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 194,
            "description": "Produces the digest.",
            "return": {
                "description": "a byte buffer containing the digest value."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 268,
            "description": "Initializes the constant tables.",
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 299,
            "description": "Updates a SHA-256 state with the given byte buffer.",
            "params": [
                {
                    "name": "s",
                    "description": "the SHA-256 state to update."
                },
                {
                    "name": "w",
                    "description": "the array to use to store words."
                },
                {
                    "name": "bytes",
                    "description": "the byte buffer to update with."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 439,
            "description": "An API for getting cryptographically-secure random bytes. The bytes are\ngenerated using the Fortuna algorithm devised by Bruce Schneier and\nNiels Ferguson.\n\nGetting strong random bytes is not yet easy to do in javascript. The only\ntruish random entropy that can be collected is from the mouse, keyboard, or\nfrom timing with respect to page loads, etc. This generator makes a poor\nattempt at providing random bytes when those sources haven't yet provided\nenough entropy to initially seed or to reseed the PRNG.",
            "author": "Dave Longley\n\nCopyright (c) 2009-2014 Digital Bazaar, Inc.",
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 506,
            "description": "Creates a new PRNG.",
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 512,
            "description": "Gets random bytes. If a native secure crypto API is unavailable, this\nmethod tries to make the bytes more unpredictable by drawing from data that\ncan be collected from the user of the browser, eg: mouse movement.\n\nIf a callback is given, this method will be called asynchronously.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of random bytes to get."
                },
                {
                    "name": "callback(err, bytes)",
                    "description": "called once the operation completes.",
                    "optional": true
                }
            ],
            "return": {
                "description": "the random bytes in a string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 528,
            "description": "Gets random bytes asynchronously. If a native secure crypto API is\nunavailable, this method tries to make the bytes more unpredictable by\ndrawing from data that can be collected from the user of the browser,\neg: mouse movement.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of random bytes to get."
                }
            ],
            "return": {
                "description": "the random bytes in a string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 683,
            "description": "Utility functions for web applications.",
            "author": "Dave Longley\n\nCopyright (c) 2010-2014 Digital Bazaar, Inc.",
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 808,
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 810,
            "description": "Constructor for a binary string backed byte buffer.",
            "params": [
                {
                    "name": "b",
                    "description": "the bytes to wrap (either encoded as string, one byte per\n         character, or as an ArrayBuffer or Typed Array).",
                    "optional": true
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 870,
            "description": "Gets the number of bytes in this buffer.",
            "return": {
                "description": "the number of bytes in this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 879,
            "description": "Gets whether or not this buffer is empty.",
            "return": {
                "description": "true if this buffer is empty, false if not."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 888,
            "description": "Puts a byte in this buffer.",
            "params": [
                {
                    "name": "b",
                    "description": "the byte to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 899,
            "description": "Puts a byte in this buffer N times.",
            "params": [
                {
                    "name": "b",
                    "description": "the byte to put."
                },
                {
                    "name": "n",
                    "description": "the number of bytes of value b to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 924,
            "description": "Puts bytes in this buffer.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the bytes (as a UTF-8 encoded string) to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 937,
            "description": "Puts a UTF-16 encoded string into this buffer.",
            "params": [
                {
                    "name": "str",
                    "description": "the string to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 948,
            "description": "Puts a 16-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 16-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 961,
            "description": "Puts a 24-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 24-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 975,
            "description": "Puts a 32-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 32-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 990,
            "description": "Puts a 16-bit integer in this buffer in little-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 16-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1003,
            "description": "Puts a 24-bit integer in this buffer in little-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 24-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1017,
            "description": "Puts a 32-bit integer in this buffer in little-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 32-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1032,
            "description": "Puts an n-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the n-bit integer."
                },
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1049,
            "description": "Puts a signed n-bit integer in this buffer in big-endian order. Two's\ncomplement representation is used.",
            "params": [
                {
                    "name": "i",
                    "description": "the n-bit integer."
                },
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1065,
            "description": "Puts the given buffer into this buffer.",
            "params": [
                {
                    "name": "buffer",
                    "description": "the buffer to put into this one."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1076,
            "description": "Gets a byte from this buffer and advances the read pointer by 1.",
            "return": {
                "description": "the byte."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1085,
            "description": "Gets a uint16 from this buffer in big-endian order and advances the read\npointer by 2.",
            "return": {
                "description": "the uint16."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1099,
            "description": "Gets a uint24 from this buffer in big-endian order and advances the read\npointer by 3.",
            "return": {
                "description": "the uint24."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1114,
            "description": "Gets a uint32 from this buffer in big-endian order and advances the read\npointer by 4.",
            "return": {
                "description": "the word."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1130,
            "description": "Gets a uint16 from this buffer in little-endian order and advances the read\npointer by 2.",
            "return": {
                "description": "the uint16."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1144,
            "description": "Gets a uint24 from this buffer in little-endian order and advances the read\npointer by 3.",
            "return": {
                "description": "the uint24."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1159,
            "description": "Gets a uint32 from this buffer in little-endian order and advances the read\npointer by 4.",
            "return": {
                "description": "the word."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1175,
            "description": "Gets an n-bit integer from this buffer in big-endian order and advances the\nread pointer by n/8.",
            "params": [
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "the integer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1192,
            "description": "Gets a signed n-bit integer from this buffer in big-endian order, using\ntwo's complement, and advances the read pointer by n/8.",
            "params": [
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "the integer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1209,
            "description": "Reads bytes out into a UTF-8 string and clears them from the buffer.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of bytes to read, undefined or null for all."
                }
            ],
            "return": {
                "description": "a UTF-8 string of bytes."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1233,
            "description": "Gets a UTF-8 encoded string of the bytes from this buffer without modifying\nthe read pointer.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of bytes to get, omit to get all."
                }
            ],
            "return": {
                "description": "a string full of UTF-8 encoded characters."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1247,
            "description": "Gets a byte at the given index without modifying the read pointer.",
            "params": [
                {
                    "name": "i",
                    "description": "the byte index."
                }
            ],
            "return": {
                "description": "the byte."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1258,
            "description": "Puts a byte at the given index without modifying the read pointer.",
            "params": [
                {
                    "name": "i",
                    "description": "the byte index."
                },
                {
                    "name": "b",
                    "description": "the byte to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1273,
            "description": "Gets the last byte without modifying the read pointer.",
            "return": {
                "description": "the last byte."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1282,
            "description": "Creates a copy of this buffer.",
            "return": {
                "description": "the copy."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1293,
            "description": "Compacts this buffer.",
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1306,
            "description": "Clears this buffer.",
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1317,
            "description": "Shortens this buffer by triming bytes off of the end of this buffer.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of bytes to trim off."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1331,
            "description": "Converts this buffer to a hexadecimal string.",
            "return": {
                "description": "a hexadecimal string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1348,
            "description": "Converts this buffer to a UTF-16 string (standard JavaScript string).",
            "return": {
                "description": "a UTF-16 string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1357,
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1360,
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1362,
            "description": "FIXME: Experimental. Do not use yet.\n\nConstructor for an ArrayBuffer-backed byte buffer.\n\nThe buffer may be constructed from a string, an ArrayBuffer, DataView, or a\nTypedArray.\n\nIf a string is given, its encoding should be provided as an option,\notherwise it will default to 'binary'. A 'binary' string is encoded such\nthat each character is one byte in length and size.\n\nIf an ArrayBuffer, DataView, or TypedArray is given, it will be used\n*directly* without any copying. Note that, if a write to the buffer requires\nmore space, the buffer will allocate a new backing ArrayBuffer to\naccommodate. The starting read and write offsets for the buffer may be\ngiven as options.",
            "params": [
                {
                    "name": "b",
                    "description": "the initial bytes for this buffer.",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "the options to use:\n         [readOffset] the starting read offset to use (default: 0).\n         [writeOffset] the starting write offset to use (default: the\n           length of the first parameter).\n         [growSize] the minimum amount, in bytes, to grow the buffer by to\n           accommodate writes (default: 1024).\n         [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the\n           first parameter, if it is a string (default: 'binary')."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1429,
            "description": "Gets the number of bytes in this buffer.",
            "return": {
                "description": "the number of bytes in this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1438,
            "description": "Gets whether or not this buffer is empty.",
            "return": {
                "description": "true if this buffer is empty, false if not."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1447,
            "description": "Ensures this buffer has enough empty space to accommodate the given number\nof bytes. An optional parameter may be given that indicates a minimum\namount to grow the buffer if necessary. If the parameter is not given,\nthe buffer will be grown by some previously-specified default amount\nor heuristic.",
            "params": [
                {
                    "name": "amount",
                    "description": "the number of bytes to accommodate."
                },
                {
                    "name": "growSize",
                    "description": "the minimum amount, in bytes, to grow the buffer by if\n         necessary.",
                    "optional": true
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1474,
            "description": "Puts a byte in this buffer.",
            "params": [
                {
                    "name": "b",
                    "description": "the byte to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1487,
            "description": "Puts a byte in this buffer N times.",
            "params": [
                {
                    "name": "b",
                    "description": "the byte to put."
                },
                {
                    "name": "n",
                    "description": "the number of bytes of value b to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1503,
            "description": "Puts bytes in this buffer. The bytes may be given as a string, an\nArrayBuffer, a DataView, or a TypedArray.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the bytes to put."
                },
                {
                    "name": "encoding",
                    "description": "the encoding for the first parameter ('binary', 'utf8',\n         'utf16', 'hex'), if it is a string (default: 'binary').",
                    "optional": true
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1602,
            "description": "Puts the given buffer into this buffer.",
            "params": [
                {
                    "name": "buffer",
                    "description": "the buffer to put into this one."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1615,
            "description": "Puts a string into this buffer.",
            "params": [
                {
                    "name": "str",
                    "description": "the string to put."
                },
                {
                    "name": "encoding",
                    "description": "the encoding for the string (default: 'utf16').",
                    "optional": true
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1627,
            "description": "Puts a 16-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 16-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1641,
            "description": "Puts a 24-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 24-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1656,
            "description": "Puts a 32-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 32-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1670,
            "description": "Puts a 16-bit integer in this buffer in little-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 16-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1684,
            "description": "Puts a 24-bit integer in this buffer in little-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 24-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1699,
            "description": "Puts a 32-bit integer in this buffer in little-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the 32-bit integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1713,
            "description": "Puts an n-bit integer in this buffer in big-endian order.",
            "params": [
                {
                    "name": "i",
                    "description": "the n-bit integer."
                },
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1730,
            "description": "Puts a signed n-bit integer in this buffer in big-endian order. Two's\ncomplement representation is used.",
            "params": [
                {
                    "name": "i",
                    "description": "the n-bit integer."
                },
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1747,
            "description": "Gets a byte from this buffer and advances the read pointer by 1.",
            "return": {
                "description": "the byte."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1756,
            "description": "Gets a uint16 from this buffer in big-endian order and advances the read\npointer by 2.",
            "return": {
                "description": "the uint16."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1768,
            "description": "Gets a uint24 from this buffer in big-endian order and advances the read\npointer by 3.",
            "return": {
                "description": "the uint24."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1782,
            "description": "Gets a uint32 from this buffer in big-endian order and advances the read\npointer by 4.",
            "return": {
                "description": "the word."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1794,
            "description": "Gets a uint16 from this buffer in little-endian order and advances the read\npointer by 2.",
            "return": {
                "description": "the uint16."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1806,
            "description": "Gets a uint24 from this buffer in little-endian order and advances the read\npointer by 3.",
            "return": {
                "description": "the uint24."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1820,
            "description": "Gets a uint32 from this buffer in little-endian order and advances the read\npointer by 4.",
            "return": {
                "description": "the word."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1832,
            "description": "Gets an n-bit integer from this buffer in big-endian order and advances the\nread pointer by n/8.",
            "params": [
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "the integer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1849,
            "description": "Gets a signed n-bit integer from this buffer in big-endian order, using\ntwo's complement, and advances the read pointer by n/8.",
            "params": [
                {
                    "name": "n",
                    "description": "the number of bits in the integer."
                }
            ],
            "return": {
                "description": "the integer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1866,
            "description": "Reads bytes out into a UTF-8 string and clears them from the buffer.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of bytes to read, undefined or null for all."
                }
            ],
            "return": {
                "description": "a UTF-8 string of bytes."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1893,
            "description": "Gets a UTF-8 encoded string of the bytes from this buffer without modifying\nthe read pointer.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of bytes to get, omit to get all."
                }
            ],
            "return": {
                "description": "a string full of UTF-8 encoded characters."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1908,
            "description": "Gets a byte at the given index without modifying the read pointer.",
            "params": [
                {
                    "name": "i",
                    "description": "the byte index."
                }
            ],
            "return": {
                "description": "the byte."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1919,
            "description": "Puts a byte at the given index without modifying the read pointer.",
            "params": [
                {
                    "name": "i",
                    "description": "the byte index."
                },
                {
                    "name": "b",
                    "description": "the byte to put."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1932,
            "description": "Gets the last byte without modifying the read pointer.",
            "return": {
                "description": "the last byte."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1941,
            "description": "Creates a copy of this buffer.",
            "return": {
                "description": "the copy."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1950,
            "description": "Compacts this buffer.",
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1967,
            "description": "Clears this buffer.",
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1978,
            "description": "Shortens this buffer by triming bytes off of the end of this buffer.",
            "params": [
                {
                    "name": "count",
                    "description": "the number of bytes to trim off."
                }
            ],
            "return": {
                "description": "this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 1991,
            "description": "Converts this buffer to a hexadecimal string.",
            "return": {
                "description": "a hexadecimal string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2008,
            "description": "Converts this buffer to a string, using the given encoding. If no\nencoding is given, 'utf8' (UTF-8) is used.",
            "params": [
                {
                    "name": "encoding",
                    "description": "the encoding to use: 'binary', 'utf8', 'utf16', 'hex',\n         'base64' (default: 'utf8').",
                    "optional": true
                }
            ],
            "return": {
                "description": "a string representation of the bytes in this buffer."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2043,
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2046,
            "description": "Creates a buffer that stores bytes. A value may be given to put into the\nbuffer that is either a string of bytes or a UTF-16 string that will\nbe encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).",
            "params": [
                {
                    "name": "input",
                    "description": "the bytes to wrap (as a string) or a UTF-16 string to encode\n         as UTF-8.",
                    "optional": true
                },
                {
                    "name": "encoding",
                    "description": "(default: 'raw', other: 'utf8').",
                    "optional": true
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2064,
            "description": "Fills a string with a particular value. If you want the string to be a byte\nstring, pass in String.fromCharCode(theByte).",
            "params": [
                {
                    "name": "c",
                    "description": "the character to fill the string with, use String.fromCharCode\n         to fill the string with a byte value."
                },
                {
                    "name": "n",
                    "description": "the number of characters of value c to fill with."
                }
            ],
            "return": {
                "description": "the filled string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2088,
            "description": "Performs a per byte XOR between two byte strings and returns the result as a\nstring of bytes.",
            "params": [
                {
                    "name": "s1",
                    "description": "first string of bytes."
                },
                {
                    "name": "s2",
                    "description": "second string of bytes."
                },
                {
                    "name": "n",
                    "description": "the number of bytes to XOR."
                }
            ],
            "return": {
                "description": "the XOR'd result."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2118,
            "description": "Converts a hex string into a 'binary' encoded string of bytes.",
            "params": [
                {
                    "name": "hex",
                    "description": "the hexadecimal string to convert."
                }
            ],
            "return": {
                "description": "the binary-encoded string of bytes."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2141,
            "description": "Converts a 'binary' encoded string of bytes to hex.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the byte string to convert."
                }
            ],
            "return": {
                "description": "the string of hexadecimal characters."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2153,
            "description": "Converts an 32-bit integer to 4-big-endian byte string.",
            "params": [
                {
                    "name": "i",
                    "description": "the integer."
                }
            ],
            "return": {
                "description": "the byte string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2201,
            "description": "Base64 encodes a 'binary' encoded string of bytes.",
            "params": [
                {
                    "name": "input",
                    "description": "the binary encoded string of bytes to base64-encode."
                },
                {
                    "name": "maxline",
                    "description": "the maximum number of encoded characters per line to use,\n         defaults to none."
                }
            ],
            "return": {
                "description": "the base64-encoded output."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2240,
            "description": "Base64 decodes a string into a 'binary' encoded string of bytes.",
            "params": [
                {
                    "name": "input",
                    "description": "the base64-encoded input."
                }
            ],
            "return": {
                "description": "the binary encoded string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2277,
            "description": "UTF-8 encodes the given UTF-16 encoded string (a standard JavaScript\nstring). Non-ASCII characters will be encoded as multiple bytes according\nto UTF-8.",
            "params": [
                {
                    "name": "str",
                    "description": "the string to encode."
                }
            ],
            "return": {
                "description": "the UTF-8 encoded string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2290,
            "description": "Decodes a UTF-8 encoded string into a UTF-16 string.",
            "params": [
                {
                    "name": "str",
                    "description": "the string to decode."
                }
            ],
            "return": {
                "description": "the UTF-16 encoded string (standard JavaScript string)."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2309,
            "description": "Encodes a Uint8Array as a binary-encoded string. This encoding uses\na value between 0 and 255 for each character.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the Uint8Array to encode."
                }
            ],
            "return": {
                "description": "the binary-encoded string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2321,
            "description": "Decodes a binary-encoded string to a Uint8Array. This encoding uses\na value between 0 and 255 for each character.",
            "params": [
                {
                    "name": "str",
                    "description": "the binary-encoded string to decode."
                },
                {
                    "name": "output",
                    "description": "an optional Uint8Array to write the output to; if it\n         is too small, an exception will be thrown.",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "the start offset for writing to the output (default: 0).",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Uint8Array or the number of bytes written if output was given."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2345,
            "description": "Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or\nByteBuffer as a string of hexadecimal characters.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the bytes to convert."
                }
            ],
            "return": {
                "description": "the string of hexadecimal characters."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2355,
            "description": "Decodes a hex-encoded string to a Uint8Array.",
            "params": [
                {
                    "name": "hex",
                    "description": "the hexadecimal string to convert."
                },
                {
                    "name": "output",
                    "description": "an optional Uint8Array to write the output to; if it\n         is too small, an exception will be thrown.",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "the start offset for writing to the output (default: 0).",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Uint8Array or the number of bytes written if output was given."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2384,
            "description": "Base64-encodes a Uint8Array.",
            "params": [
                {
                    "name": "input",
                    "description": "the Uint8Array to encode."
                },
                {
                    "name": "maxline",
                    "description": "the maximum number of encoded characters per line to use,\n         defaults to none."
                }
            ],
            "return": {
                "description": "the base64-encoded output string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2422,
            "description": "Decodes a base64-encoded string to a Uint8Array.",
            "params": [
                {
                    "name": "input",
                    "description": "the base64-encoded input string."
                },
                {
                    "name": "output",
                    "description": "an optional Uint8Array to write the output to; if it\n         is too small, an exception will be thrown.",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "the start offset for writing to the output (default: 0).",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Uint8Array or the number of bytes written if output was given."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2475,
            "description": "Encodes the given string as UTF-8 in a Uint8Array.",
            "params": [
                {
                    "name": "str",
                    "description": "the string to encode."
                },
                {
                    "name": "output",
                    "description": "an optional Uint8Array to write the output to; if it\n         is too small, an exception will be thrown.",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "the start offset for writing to the output (default: 0).",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Uint8Array or the number of bytes written if output was given."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2499,
            "description": "Decodes the UTF-8 contents from a Uint8Array.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the Uint8Array to decode."
                }
            ],
            "return": {
                "description": "the resulting string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2510,
            "description": "Encodes the given string as UTF-16 in a Uint8Array.",
            "params": [
                {
                    "name": "str",
                    "description": "the string to encode."
                },
                {
                    "name": "output",
                    "description": "an optional Uint8Array to write the output to; if it\n         is too small, an exception will be thrown.",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "the start offset for writing to the output (default: 0).",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Uint8Array or the number of bytes written if output was given."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2536,
            "description": "Decodes the UTF-16 contents from a Uint8Array.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the Uint8Array to decode."
                }
            ],
            "return": {
                "description": "the resulting string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2547,
            "description": "Deflates the given data using a flash interface.",
            "params": [
                {
                    "name": "api",
                    "description": "the flash interface."
                },
                {
                    "name": "bytes",
                    "description": "the data."
                },
                {
                    "name": "raw",
                    "description": "true to return only raw deflate data, false to include zlib\n         header and trailer."
                }
            ],
            "return": {
                "description": "the deflated data as a string."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2577,
            "description": "Inflates the given data using a flash interface.",
            "params": [
                {
                    "name": "api",
                    "description": "the flash interface."
                },
                {
                    "name": "bytes",
                    "description": "the data."
                },
                {
                    "name": "raw",
                    "description": "true if the incoming data has no zlib header or trailer and is\n         raw DEFLATE data."
                }
            ],
            "return": {
                "description": "the inflated data as a string, null on error."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2593,
            "description": "Sets a storage object.",
            "params": [
                {
                    "name": "api",
                    "description": "the storage interface."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "obj",
                    "description": "the storage object, null to remove."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2623,
            "description": "Gets a storage object.",
            "params": [
                {
                    "name": "api",
                    "description": "the storage interface."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                }
            ],
            "return": {
                "description": "the storage object entry or null if none exists."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2669,
            "description": "Stores an item in local storage.",
            "params": [
                {
                    "name": "api",
                    "description": "the storage interface."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "key",
                    "description": "the key for the item."
                },
                {
                    "name": "data",
                    "description": "the data for the item (any javascript object/primitive)."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2691,
            "description": "Gets an item from local storage.",
            "params": [
                {
                    "name": "api",
                    "description": "the storage interface."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "key",
                    "description": "the key for the item."
                }
            ],
            "return": {
                "description": "the item."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2711,
            "description": "Removes an item from local storage.",
            "params": [
                {
                    "name": "api",
                    "description": "the storage interface."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "key",
                    "description": "the key for the item."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2741,
            "description": "Clears the local disk storage identified by the given ID.",
            "params": [
                {
                    "name": "api",
                    "description": "the storage interface."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2751,
            "description": "Calls a storage function.",
            "params": [
                {
                    "name": "func",
                    "description": "the function to call."
                },
                {
                    "name": "args",
                    "description": "the arguments for the function."
                },
                {
                    "name": "location",
                    "description": "the location argument."
                }
            ],
            "return": {
                "description": "the return value from the function."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2802,
            "description": "Stores an item on local disk.\n\nThe available types of local storage include 'flash', 'web', and 'both'.\n\nThe type 'flash' refers to flash local storage (SharedObject). In order\nto use flash local storage, the 'api' parameter must be valid. The type\n'web' refers to WebStorage, if supported by the browser. The type 'both'\nrefers to storing using both 'flash' and 'web', not just one or the\nother.\n\nThe location array should list the storage types to use in order of\npreference:\n\n['flash']: flash only storage\n['web']: web only storage\n['both']: try to store in both\n['flash','web']: store in flash first, but if not available, 'web'\n['web','flash']: store in web first, but if not available, 'flash'\n\nThe location array defaults to: ['web', 'flash']",
            "params": [
                {
                    "name": "api",
                    "description": "the flash interface, null to use only WebStorage."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "key",
                    "description": "the key for the item."
                },
                {
                    "name": "data",
                    "description": "the data for the item (any javascript object/primitive)."
                },
                {
                    "name": "location",
                    "description": "an array with the preferred types of storage to use."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2834,
            "description": "Gets an item on local disk.\n\nSet setItem() for details on storage types.",
            "params": [
                {
                    "name": "api",
                    "description": "the flash interface, null to use only WebStorage."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "key",
                    "description": "the key for the item."
                },
                {
                    "name": "location",
                    "description": "an array with the preferred types of storage to use."
                }
            ],
            "return": {
                "description": "the item."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2850,
            "description": "Removes an item on local disk.\n\nSet setItem() for details on storage types.",
            "params": [
                {
                    "name": "api",
                    "description": "the flash interface."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "key",
                    "description": "the key for the item."
                },
                {
                    "name": "location",
                    "description": "an array with the preferred types of storage to use."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2864,
            "description": "Clears the local disk storage identified by the given ID.\n\nSet setItem() for details on storage types.",
            "params": [
                {
                    "name": "api",
                    "description": "the flash interface if flash is available."
                },
                {
                    "name": "id",
                    "description": "the storage ID to use."
                },
                {
                    "name": "location",
                    "description": "an array with the preferred types of storage to use."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2877,
            "description": "Parses the scheme, host, and port from an http(s) url.",
            "params": [
                {
                    "name": "str",
                    "description": "the url string."
                }
            ],
            "return": {
                "description": "the parsed url object or null if the url is invalid."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 2917,
            "description": "Returns the window location query variables. Query is parsed on the first\ncall and the same object is returned on subsequent calls. The mapping\nis from keys to an array of values. Parameters without values will have\nan object key set but no value added to the value array. Values are\nunescaped.\n\n...?k1=v1&k2=v2:\n{\n  \"k1\": [\"v1\"],\n  \"k2\": [\"v2\"]\n}\n\n...?k1=v1&k1=v2:\n{\n  \"k1\": [\"v1\", \"v2\"]\n}\n\n...?k1=v1&k2:\n{\n  \"k1\": [\"v1\"],\n  \"k2\": []\n}\n\n...?k1=v1&k1:\n{\n  \"k1\": [\"v1\"]\n}\n\n...?k1&k1:\n{\n  \"k1\": []\n}",
            "params": [
                {
                    "name": "query",
                    "description": "the query string to parse (optional, default to cached\n         results from parsing window location search query)."
                }
            ],
            "return": {
                "description": "object mapping keys to variables."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3002,
            "description": "Parses a fragment into a path and query. This method will take a URI\nfragment and break it up as if it were the main URI. For example:\n   /bar/baz?a=1&b=2\nresults in:\n   {\n      path: [\"bar\", \"baz\"],\n      query: {\"k1\": [\"v1\"], \"k2\": [\"v2\"]}\n   }",
            "return": {
                "description": "object with a path array and query object."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3040,
            "description": "Makes a request out of a URI-like request string. This is intended to\nbe used where a fragment id (after a URI '#') is parsed as a URI with\npath and query parts. The string should have a path beginning and\ndelimited by '/' and optional query parameters following a '?'. The\nquery should be a standard URL set of key value pairs delimited by\n'&'. For backwards compatibility the initial '/' on the path is not\nrequired. The request object has the following API, (fully described\nin the method code):\n   {\n      path: <the path string part>.\n      query: <the query string part>,\n      getPath(i): get part or all of the split path array,\n      getQuery(k, i): get part or all of a query key array,\n      getQueryLast(k, _default): get last element of a query key array.\n   }",
            "return": {
                "description": "object with request parameters."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3066,
            "description": "Get path or element in path.",
            "params": [
                {
                    "name": "i",
                    "description": "optional path index."
                }
            ],
            "return": {
                "description": "path or part of path if i provided."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3076,
            "description": "Get query, values for a key, or value for a key index.",
            "params": [
                {
                    "name": "k",
                    "description": "optional query key."
                },
                {
                    "name": "i",
                    "description": "optional query key index."
                }
            ],
            "return": {
                "description": "query, values for a key, or value for a key index."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3110,
            "description": "Makes a URI out of a path, an object with query parameters, and a\nfragment. Uses jQuery.param() internally for query string creation.\nIf the path is an array, it will be joined with '/'.",
            "params": [
                {
                    "name": "path",
                    "description": "string path or array of strings."
                },
                {
                    "name": "query",
                    "description": "object with query parameters. (optional)"
                },
                {
                    "name": "fragment",
                    "description": "fragment string. (optional)"
                }
            ],
            "return": {
                "description": "string object with request parameters."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3132,
            "description": "Follows a path of keys deep into an object hierarchy and set a value.\nIf a key does not exist or it's value is not an object, create an\nobject in it's place. This can be destructive to a object tree if\nleaf nodes are given as non-final path keys.\nUsed to avoid exceptions from missing parts of the path.",
            "params": [
                {
                    "name": "object",
                    "description": "the starting object."
                },
                {
                    "name": "keys",
                    "description": "an array of string keys."
                },
                {
                    "name": "value",
                    "description": "the value to set."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3167,
            "description": "Follows a path of keys deep into an object hierarchy and return a value.\nIf a key does not exist, create an object in it's place.\nUsed to avoid exceptions from missing parts of the path.",
            "params": [
                {
                    "name": "object",
                    "description": "the starting object."
                },
                {
                    "name": "keys",
                    "description": "an array of string keys."
                },
                {
                    "name": "_default",
                    "description": "value to return if path not found."
                }
            ],
            "return": {
                "description": "the value at the path if found, else default if given, else\n        undefined."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3194,
            "description": "Follow a path of keys deep into an object hierarchy and delete the\nlast one. If a key does not exist, do nothing.\nUsed to avoid exceptions from missing parts of the path.",
            "params": [
                {
                    "name": "object",
                    "description": "the starting object."
                },
                {
                    "name": "keys",
                    "description": "an array of string keys."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3225,
            "description": "Check if an object is empty.\n\nTaken from:\nhttp://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937",
            "params": [
                {
                    "name": "object",
                    "description": "the object to check."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3242,
            "description": "Format with simple printf-style interpolation.\n\n%%: literal '%'\n%s,%o: convert next argument into a string.",
            "params": [
                {
                    "name": "format",
                    "description": "the string to format."
                },
                {
                    "name": "",
                    "description": "arguments to interpolate into the format string.",
                    "multiple": true
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3298,
            "description": "Formats a number.\n\nhttp://snipplr.com/view/5945/javascript-numberformat--ported-from-php/",
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3325,
            "description": "Formats a byte size.\n\nhttp://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/",
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3343,
            "description": "Converts an IPv4 or IPv6 string representation into bytes (in network order).",
            "params": [
                {
                    "name": "ip",
                    "description": "the IPv4 or IPv6 address to convert."
                }
            ],
            "return": {
                "description": "the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't\n        be parsed."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3361,
            "description": "Converts an IPv4 string representation into bytes (in network order).",
            "params": [
                {
                    "name": "ip",
                    "description": "the IPv4 address to convert."
                }
            ],
            "return": {
                "description": "the 4-byte address or null if the address can't be parsed."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3384,
            "description": "Converts an IPv6 string representation into bytes (in network order).",
            "params": [
                {
                    "name": "ip",
                    "description": "the IPv6 address to convert."
                }
            ],
            "return": {
                "description": "the 16-byte address or null if the address can't be parsed."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3414,
            "description": "Converts 4-bytes into an IPv4 string representation or 16-bytes into\nan IPv6 string representation. The bytes must be in network order.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the bytes to convert."
                }
            ],
            "return": {
                "description": "the IPv4 or IPv6 string representation if 4 or 16 bytes,\n        respectively, are given, otherwise null."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3433,
            "description": "Converts 4-bytes into an IPv4 string representation. The bytes must be\nin network order.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the bytes to convert."
                }
            ],
            "return": {
                "description": "the IPv4 string representation or null for an invalid # of bytes."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3452,
            "description": "Converts 16-bytes into an IPv16 string representation. The bytes must be\nin network order.",
            "params": [
                {
                    "name": "bytes",
                    "description": "the bytes to convert."
                }
            ],
            "return": {
                "description": "the IPv16 string representation or null for an invalid # of bytes."
            },
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3504,
            "description": "Estimates the number of processes that can be run concurrently. If\ncreating Web Workers, keep in mind that the main JavaScript process needs\nits own core.",
            "params": [
                {
                    "name": "options",
                    "description": "the options to use:\n         update true to force an update (not use the cached value)."
                },
                {
                    "name": "callback(err,",
                    "description": "max) called once the operation completes."
                }
            ],
            "class": "EcPk"
        },
        {
            "file": "ec.crypto.js",
            "line": 3678,
            "description": "Generates a random secret of length @i",
            "itemtype": "method",
            "name": "newSecret",
            "static": 1,
            "params": [
                {
                    "name": "i",
                    "description": "Length of secret",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "String representing the new secret, encoded using Base64.",
                "type": "String"
            },
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3688,
            "description": "Generates a random Initialization Vector of length @i",
            "itemtype": "method",
            "name": "newIv",
            "static": 1,
            "params": [
                {
                    "name": "i",
                    "description": "Length of initialization Vector",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "String representing the new Initialization Vector, encoded using Base64.",
                "type": "String"
            },
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3701,
            "description": "Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.",
            "author": "Dave Longley\n\nCopyright (c) 2010-2014 Digital Bazaar, Inc.",
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3717,
            "description": "Creates a SHA-1 message digest object.",
            "return": {
                "description": "a message digest object."
            },
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3748,
            "description": "Starts the digest.",
            "return": {
                "description": "this digest object."
            },
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3769,
            "description": "Updates the digest with the given message input. The given input can\ntreated as raw input (no encoding will be applied) or an encoding of\n'utf8' maybe given to encode the input using UTF-8.",
            "params": [
                {
                    "name": "msg",
                    "description": "the message input to update with."
                },
                {
                    "name": "encoding",
                    "description": "the encoding to use (default: 'raw', other: 'utf8')."
                }
            ],
            "return": {
                "description": "this digest object."
            },
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3803,
            "description": "Produces the digest.",
            "return": {
                "description": "a byte buffer containing the digest value."
            },
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3868,
            "description": "Initializes the constant tables.",
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 3880,
            "description": "Updates a SHA-1 state with the given byte buffer.",
            "params": [
                {
                    "name": "s",
                    "description": "the SHA-1 state to update."
                },
                {
                    "name": "w",
                    "description": "the array to use to store words."
                },
                {
                    "name": "bytes",
                    "description": "the byte buffer to update with."
                }
            ],
            "class": "EcAes"
        },
        {
            "file": "ec.crypto.js",
            "line": 4052,
            "description": "Encrypts a block of plaintext (no more than 256 bytes) with a public key using RSA OAEP encryption.\nReturns a base64 encoded ciphertext.",
            "itemtype": "method",
            "name": "encrypt",
            "static": 1,
            "params": [
                {
                    "name": "pk",
                    "description": "Public Key.",
                    "type": "EcPk"
                },
                {
                    "name": "plaintext",
                    "description": "Plaintext. Does not perform encoding.",
                    "type": "String"
                }
            ],
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4063,
            "description": "Decrypts a block of ciphertext (no more than 256 bytes) with a private key using RSA OAEP encryption.\nReturns a unencoded plaintext.",
            "itemtype": "method",
            "name": "decrypt",
            "static": 1,
            "params": [
                {
                    "name": "ppk",
                    "description": "Public private keypair.",
                    "type": "EcPpk"
                },
                {
                    "name": "ciphertext",
                    "description": "Ciphertext.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Unencoded plaintext.",
                "type": "String"
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4075,
            "description": "Creates a signature for the provided text using the public private keypair.\nMay be verified with the public key.\nUses SHA1 hash with a UTF8 decoding of the text.\nReturns base64 encoded signature.",
            "itemtype": "method",
            "name": "sign",
            "static": 1,
            "params": [
                {
                    "name": "ppk",
                    "description": "Public private keypair.",
                    "type": "EcPpk"
                },
                {
                    "name": "text",
                    "description": "Text to sign.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Base64 encoded signature."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4091,
            "description": "Creates a signature for the provided text using the public private keypair.\nMay be verified with the public key.\nUses SHA256 hash with a UTF8 decoding of the text.\nReturns base64 encoded signature.",
            "itemtype": "method",
            "name": "sign",
            "static": 1,
            "params": [
                {
                    "name": "ppk",
                    "description": "Public private keypair.",
                    "type": "EcPpk"
                },
                {
                    "name": "text",
                    "description": "Text to sign.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Base64 encoded signature."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4107,
            "description": "Verifies the integrity of the provided text using a signature and a public key.\nUses SHA1 hash with a UTF8 decoding of the text.",
            "params": [
                {
                    "name": "pk",
                    "description": "Public key.",
                    "type": "EcPk"
                },
                {
                    "name": "text",
                    "description": "Text to verify.",
                    "type": "String"
                },
                {
                    "name": "signature",
                    "description": "Base64 encoded signature.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True IFF the signature is valid."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4131,
            "description": "Javascript implementation of basic RSA algorithms.",
            "author": "Dave Longley\n\nCopyright (c) 2010-2014 Digital Bazaar, Inc.\n\nThe only algorithm currently supported for PKI is RSA.\n\nAn RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo\nASN.1 structure is composed of an algorithm of type AlgorithmIdentifier\nand a subjectPublicKey of type bit string.\n\nThe AlgorithmIdentifier contains an Object Identifier (OID) and parameters\nfor the algorithm, if any. In the case of RSA, there aren't any.\n\nSubjectPublicKeyInfo ::= SEQUENCE {\n  algorithm AlgorithmIdentifier,\n  subjectPublicKey BIT STRING\n}\n\nAlgorithmIdentifer ::= SEQUENCE {\n  algorithm OBJECT IDENTIFIER,\n  parameters ANY DEFINED BY algorithm OPTIONAL\n}\n\nFor an RSA public key, the subjectPublicKey is:\n\nRSAPublicKey ::= SEQUENCE {\n  modulus            INTEGER,    -- n\n  publicExponent     INTEGER     -- e\n}\n\nPrivateKeyInfo ::= SEQUENCE {\n  version                   Version,\n  privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n  privateKey                PrivateKey,\n  attributes           [0]  IMPLICIT Attributes OPTIONAL\n}\n\nVersion ::= INTEGER\nPrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\nPrivateKey ::= OCTET STRING\nAttributes ::= SET OF Attribute\n\nAn RSA private key as the following structure:\n\nRSAPrivateKey ::= SEQUENCE {\n  version Version,\n  modulus INTEGER, -- n\n  publicExponent INTEGER, -- e\n  privateExponent INTEGER, -- d\n  prime1 INTEGER, -- p\n  prime2 INTEGER, -- q\n  exponent1 INTEGER, -- d mod (p-1)\n  exponent2 INTEGER, -- d mod (q-1)\n  coefficient INTEGER -- (inverse of q) mod p\n}\n\nVersion ::= INTEGER\n\nThe OID for the RSA key algorithm is: 1.2.840.113549.1.1.1",
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4387,
            "description": "Wrap digest in DigestInfo object.\n\nThis function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.\n\nDigestInfo ::= SEQUENCE {\n  digestAlgorithm DigestAlgorithmIdentifier,\n  digest Digest\n}\n\nDigestAlgorithmIdentifier ::= AlgorithmIdentifier\nDigest ::= OCTET STRING",
            "params": [
                {
                    "name": "md",
                    "description": "the message digest object with the hash to sign."
                }
            ],
            "return": {
                "description": "the encoded message (ready for RSA encrytion)"
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4435,
            "description": "Performs x^c mod n (RSA encryption or decryption operation).",
            "params": [
                {
                    "name": "x",
                    "description": "the number to raise and mod."
                },
                {
                    "name": "key",
                    "description": "the key to use."
                },
                {
                    "name": "pub",
                    "description": "true if the key is public, false if private."
                }
            ],
            "return": {
                "description": "the result of x^c mod n."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4574,
            "description": "NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or\n'encrypt' on a public key object instead.\n\nPerforms RSA encryption.\n\nThe parameter bt controls whether to put padding bytes before the\nmessage passed in. Set bt to either true or false to disable padding\ncompletely (in order to handle e.g. EMSA-PSS encoding seperately before),\nsignaling whether the encryption operation is a public key operation\n(i.e. encrypting data) or not, i.e. private key operation (data signing).\n\nFor PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01\n(for signing) or 0x02 (for encryption). The key operation mode (private\nor public) is derived from this flag in that case).",
            "params": [
                {
                    "name": "m",
                    "description": "the message to encrypt as a byte string."
                },
                {
                    "name": "key",
                    "description": "the RSA key to use."
                },
                {
                    "name": "bt",
                    "description": "for PKCS#1 v1.5 padding, the block type to use\n  (0x01 for private key, 0x02 for public),\n  to disable padding: true = public key, false = private key."
                }
            ],
            "return": {
                "description": "the encrypted bytes as a string."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4635,
            "description": "NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or\n'verify' on a public key object instead.\n\nPerforms RSA decryption.\n\nThe parameter ml controls whether to apply PKCS#1 v1.5 padding\nor not.  Set ml = false to disable padding removal completely\n(in order to handle e.g. EMSA-PSS later on) and simply pass back\nthe RSA encryption block.",
            "params": [
                {
                    "name": "ed",
                    "description": "the encrypted data to decrypt in as a byte string."
                },
                {
                    "name": "key",
                    "description": "the RSA key to use."
                },
                {
                    "name": "pub",
                    "description": "true for a public key operation, false for private."
                },
                {
                    "name": "ml",
                    "description": "the message length, if known, false to disable padding."
                }
            ],
            "return": {
                "description": "the decrypted message as a byte string."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4699,
            "description": "Creates an RSA key-pair generation state object. It is used to allow\nkey-generation to be performed in steps. It also allows for a UI to\ndisplay progress updates.",
            "params": [
                {
                    "name": "bits",
                    "description": "the size for the private key in bits, defaults to 2048."
                },
                {
                    "name": "e",
                    "description": "the public exponent to use, defaults to 65537 (0x10001)."
                },
                {
                    "name": "options",
                    "description": "the options to use.\n         prng a custom crypto-secure pseudo-random number generator to use,\n           that must define \"getBytesSync\".\n         algorithm the algorithm to use (default: 'PRIMEINC').",
                    "optional": true
                }
            ],
            "return": {
                "description": "the state object to use to generate the key-pair."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4763,
            "description": "Attempts to runs the key-generation algorithm for at most n seconds\n(approximately) using the given state. When key-generation has completed,\nthe keys will be stored in state.keys.\n\nTo use this function to update a UI while generating a key or to prevent\ncausing browser lockups/warnings, set \"n\" to a value other than 0. A\nsimple pattern for generating a key and showing a progress indicator is:\n\nvar state = pki.rsa.createKeyPairGenerationState(2048);\nvar step = function() {\n  // step key-generation, run algorithm for 100 ms, repeat\n  if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {\n    setTimeout(step, 1);\n  } else {\n    // key-generation complete\n    // TODO: turn off progress indicator here\n    // TODO: use the generated key-pair in \"state.keys\"\n  }\n};\n// TODO: turn on progress indicator here\nsetTimeout(step, 0);",
            "params": [
                {
                    "name": "state",
                    "description": "the state to use."
                },
                {
                    "name": "n",
                    "description": "the maximum number of milliseconds to run the algorithm for, 0\n         to run the algorithm to completion."
                }
            ],
            "return": {
                "description": "true if the key-generation completed, false if not."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 4932,
            "description": "Generates an RSA public-private key pair in a single call.\n\nTo generate a key-pair in steps (to allow for progress updates and to\nprevent blocking or warnings in slow browsers) then use the key-pair\ngeneration state functions.\n\nTo generate a key-pair asynchronously (either through web-workers, if\navailable, or by breaking up the work on the main thread), pass a\ncallback function.",
            "params": [
                {
                    "name": "bits",
                    "description": "the size for the private key in bits, defaults to 2048.",
                    "optional": true
                },
                {
                    "name": "e",
                    "description": "the public exponent to use, defaults to 65537.",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "options for key-pair generation, if given then 'bits'\n         and 'e' must *not* be given:\n         bits the size for the private key in bits, (default: 2048).\n         e the public exponent to use, (default: 65537 (0x10001)).\n         workerScript the worker script URL.\n         workers the number of web workers (if supported) to use,\n           (default: 2).\n         workLoad the size of the work load, ie: number of possible prime\n           numbers for each web worker to check per work assignment,\n           (default: 100).\n         e the public exponent to use, defaults to 65537.\n         prng a custom crypto-secure pseudo-random number generator to use,\n           that must define \"getBytesSync\".\n         algorithm the algorithm to use (default: 'PRIMEINC').",
                    "optional": true
                },
                {
                    "name": "callback(err, keypair)",
                    "description": "called once the operation completes.",
                    "optional": true
                }
            ],
            "return": {
                "description": "an object with privateKey and publicKey properties."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5017,
            "description": "Sets an RSA public key from BigIntegers modulus and exponent.",
            "params": [
                {
                    "name": "n",
                    "description": "the modulus."
                },
                {
                    "name": "e",
                    "description": "the exponent."
                }
            ],
            "return": {
                "description": "the public key."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5031,
            "description": "Encrypts the given data with this public key. Newer applications\nshould use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for\nlegacy applications.",
            "params": [
                {
                    "name": "data",
                    "description": "the byte string to encrypt."
                },
                {
                    "name": "scheme",
                    "description": "the encryption scheme to use:\n         'RSAES-PKCS1-V1_5' (default),\n         'RSA-OAEP',\n         'RAW', 'NONE', or null to perform raw RSA encryption,\n         an object with an 'encode' property set to a function\n         with the signature 'function(data, key)' that returns\n         a binary-encoded string representing the encoded data."
                },
                {
                    "name": "schemeOptions",
                    "description": "any scheme-specific options."
                }
            ],
            "return": {
                "description": "the encrypted byte string."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5078,
            "description": "Verifies the given signature against the given digest.\n\nPKCS#1 supports multiple (currently two) signature schemes:\nRSASSA-PKCS1-V1_5 and RSASSA-PSS.\n\nBy default this implementation uses the \"old scheme\", i.e.\nRSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the\nsignature is an OCTET STRING that holds a DigestInfo.\n\nDigestInfo ::= SEQUENCE {\n  digestAlgorithm DigestAlgorithmIdentifier,\n  digest Digest\n}\nDigestAlgorithmIdentifier ::= AlgorithmIdentifier\nDigest ::= OCTET STRING\n\nTo perform PSS signature verification, provide an instance\nof Forge PSS object as the scheme parameter.",
            "params": [
                {
                    "name": "digest",
                    "description": "the message digest hash to compare against the signature,\n         as a binary-encoded string."
                },
                {
                    "name": "signature",
                    "description": "the signature to verify, as a binary-encoded string."
                },
                {
                    "name": "scheme",
                    "description": "signature verification scheme to use:\n         'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n         a Forge PSS object for RSASSA-PSS,\n         'NONE' or null for none, DigestInfo will not be expected, but\n           PKCS#1 v1.5 padding will still be used."
                }
            ],
            "return": {
                "description": "true if the signature was verified, false if not."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5145,
            "description": "Sets an RSA private key from BigIntegers modulus, exponent, primes,\nprime exponents, and modular multiplicative inverse.",
            "params": [
                {
                    "name": "n",
                    "description": "the modulus."
                },
                {
                    "name": "e",
                    "description": "the public exponent."
                },
                {
                    "name": "d",
                    "description": "the private exponent ((inverse of e) mod n)."
                },
                {
                    "name": "p",
                    "description": "the first prime."
                },
                {
                    "name": "q",
                    "description": "the second prime."
                },
                {
                    "name": "dP",
                    "description": "exponent1 (d mod (p-1))."
                },
                {
                    "name": "dQ",
                    "description": "exponent2 (d mod (q-1))."
                },
                {
                    "name": "qInv",
                    "description": "((inverse of q) mod p)"
                }
            ],
            "return": {
                "description": "the private key."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5173,
            "description": "Decrypts the given data with this private key. The decryption scheme\nmust match the one used to encrypt the data.",
            "params": [
                {
                    "name": "data",
                    "description": "the byte string to decrypt."
                },
                {
                    "name": "scheme",
                    "description": "the decryption scheme to use:\n         'RSAES-PKCS1-V1_5' (default),\n         'RSA-OAEP',\n         'RAW', 'NONE', or null to perform raw RSA decryption."
                },
                {
                    "name": "schemeOptions",
                    "description": "any scheme-specific options."
                }
            ],
            "return": {
                "description": "the decrypted byte string."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5214,
            "description": "Signs the given digest, producing a signature.\n\nPKCS#1 supports multiple (currently two) signature schemes:\nRSASSA-PKCS1-V1_5 and RSASSA-PSS.\n\nBy default this implementation uses the \"old scheme\", i.e.\nRSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide\nan instance of Forge PSS object as the scheme parameter.",
            "params": [
                {
                    "name": "md",
                    "description": "the message digest object with the hash to sign."
                },
                {
                    "name": "scheme",
                    "description": "the signature scheme to use:\n         'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n         a Forge PSS object for RSASSA-PSS,\n         'NONE' or null for none, DigestInfo will not be used but\n           PKCS#1 v1.5 padding will still be used."
                }
            ],
            "return": {
                "description": "the signature as a byte string."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5262,
            "description": "Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.",
            "params": [
                {
                    "name": "rsaKey",
                    "description": "the ASN.1 RSAPrivateKey."
                }
            ],
            "return": {
                "description": "the ASN.1 PrivateKeyInfo."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5288,
            "description": "Converts a private key from an ASN.1 object.",
            "params": [
                {
                    "name": "obj",
                    "description": "the ASN.1 representation of a PrivateKeyInfo containing an\n         RSAPrivateKey or an RSAPrivateKey."
                }
            ],
            "return": {
                "description": "the private key."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5339,
            "description": "Converts a private key to an ASN.1 RSAPrivateKey.",
            "params": [
                {
                    "name": "key",
                    "description": "the private key."
                }
            ],
            "return": {
                "description": "the ASN.1 representation of an RSAPrivateKey."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5379,
            "description": "Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.",
            "params": [
                {
                    "name": "obj",
                    "description": "the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey."
                }
            ],
            "return": {
                "description": "the public key."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5420,
            "description": "Converts a public key to an ASN.1 SubjectPublicKeyInfo.",
            "params": [
                {
                    "name": "key",
                    "description": "the public key."
                }
            ],
            "return": {
                "description": "the asn1 representation of a SubjectPublicKeyInfo."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5445,
            "description": "Converts a public key to an ASN.1 RSAPublicKey.",
            "params": [
                {
                    "name": "key",
                    "description": "the public key."
                }
            ],
            "return": {
                "description": "the asn1 representation of a RSAPublicKey."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5464,
            "description": "Encodes a message using PKCS#1 v1.5 padding.",
            "params": [
                {
                    "name": "m",
                    "description": "the message to encode."
                },
                {
                    "name": "key",
                    "description": "the RSA key to use."
                },
                {
                    "name": "bt",
                    "description": "the block type to use, i.e. either 0x01 (for signing) or 0x02\n         (for encryption)."
                }
            ],
            "return": {
                "description": "the padded byte buffer."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5542,
            "description": "Decodes a message using PKCS#1 v1.5 padding.",
            "params": [
                {
                    "name": "em",
                    "description": "the message to decode."
                },
                {
                    "name": "key",
                    "description": "the RSA key to use."
                },
                {
                    "name": "pub",
                    "description": "true if the key is a public key, false if it is private."
                },
                {
                    "name": "ml",
                    "description": "the message length, if specified."
                }
            ],
            "return": {
                "description": "the decoded bytes."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5617,
            "description": "Runs the key-generation algorithm asynchronously, either in the background\nvia Web Workers, or using the main thread and setImmediate.",
            "params": [
                {
                    "name": "state",
                    "description": "the key-pair generation state."
                },
                {
                    "name": "options",
                    "description": "options for key-pair generation:\n         workerScript the worker script URL.\n         workers the number of web workers (if supported) to use,\n           (default: 2, -1 to use estimated cores minus one).\n         workLoad the size of the work load, ie: number of possible prime\n           numbers for each web worker to check per work assignment,\n           (default: 100).",
                    "optional": true
                },
                {
                    "name": "callback(err,",
                    "description": "keypair) called once the operation completes."
                }
            ],
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5739,
            "description": "Converts a positive BigInteger into 2's-complement big-endian bytes.",
            "params": [
                {
                    "name": "b",
                    "description": "the big integer to convert."
                }
            ],
            "return": {
                "description": "the bytes."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5755,
            "description": "Returns the required number of Miller-Rabin tests to generate a\nprime with an error probability of (1/2)^80.\n\nSee Handbook of Applied Cryptography Chapter 4, Table 4.4.",
            "params": [
                {
                    "name": "bits",
                    "description": "the bit size."
                }
            ],
            "return": {
                "description": "the required number of iterations."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5843,
            "description": "Cipher base API.",
            "author": "Dave Longley\n\nCopyright (c) 2010-2014 Digital Bazaar, Inc.",
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5859,
            "description": "Creates a cipher object that can be used to encrypt data using the given\nalgorithm and key. The algorithm may be provided as a string value for a\npreviously registered algorithm or it may be given as a cipher algorithm\nAPI object.",
            "params": [
                {
                    "name": "algorithm",
                    "description": "the algorithm to use, either a string or an algorithm API\n         object."
                },
                {
                    "name": "key",
                    "description": "the key to use, as a binary-encoded string of bytes or a\n         byte buffer."
                }
            ],
            "return": {
                "description": "the cipher."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5892,
            "description": "Creates a decipher object that can be used to decrypt data using the given\nalgorithm and key. The algorithm may be provided as a string value for a\npreviously registered algorithm or it may be given as a cipher algorithm\nAPI object.",
            "params": [
                {
                    "name": "algorithm",
                    "description": "the algorithm to use, either a string or an algorithm API\n         object."
                },
                {
                    "name": "key",
                    "description": "the key to use, as a binary-encoded string of bytes or a\n         byte buffer."
                }
            ],
            "return": {
                "description": "the cipher."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5925,
            "description": "Registers an algorithm by name. If the name was already registered, the\nalgorithm API object will be overwritten.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the algorithm."
                },
                {
                    "name": "algorithm",
                    "description": "the algorithm API object."
                }
            ],
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5937,
            "description": "Gets a registered algorithm by name.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the algorithm."
                }
            ],
            "return": {
                "description": "the algorithm, if found, null if not."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 5964,
            "description": "Starts or restarts the encryption or decryption process, whichever\nwas previously configured.\n\nFor non-GCM mode, the IV may be a binary-encoded string of bytes, an array\nof bytes, a byte buffer, or an array of 32-bit integers. If the IV is in\nbytes, then it must be Nb (16) bytes in length. If the IV is given in as\n32-bit integers, then it must be 4 integers long.\n\nNote: an IV is not required or used in ECB mode.\n\nFor GCM-mode, the IV must be given as a binary-encoded string of bytes or\na byte buffer. The number of bytes should be 12 (96 bits) as recommended\nby NIST SP-800-38D but another length may be given.",
            "params": [
                {
                    "name": "options",
                    "description": "the options to use:\n         iv the initialization vector to use as a binary-encoded string of\n           bytes, null to reuse the last ciphered block from a previous\n           update() (this \"residue\" method is for legacy support only).\n         additionalData additional authentication data as a binary-encoded\n           string of bytes, for 'GCM' mode, (default: none).\n         tagLength desired length of authentication tag, in bits, for\n           'GCM' mode (0-128, default: 128).\n         tag the authentication tag to check if decrypting, as a\n            binary-encoded string of bytes.\n         output the output the buffer to write to, null to create one."
                }
            ],
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6004,
            "description": "Updates the next block according to the cipher mode.",
            "params": [
                {
                    "name": "input",
                    "description": "the buffer to read from."
                }
            ],
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6023,
            "description": "Finishes encrypting or decrypting.",
            "params": [
                {
                    "name": "pad",
                    "description": "a padding function to use in CBC mode, null for default,\n         signature(blockSize, buffer, decrypt)."
                }
            ],
            "return": {
                "description": "true if successful, false on error."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6153,
            "description": "Javascript implementation of a basic Public Key Infrastructure, including\nsupport for RSA public and private keys.",
            "author": "Dave Longley\n\nCopyright (c) 2010-2013 Digital Bazaar, Inc.",
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6171,
            "description": "NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\n\nConverts PEM-formatted data to DER.",
            "params": [
                {
                    "name": "pem",
                    "description": "the PEM-formatted data."
                }
            ],
            "return": {
                "description": "the DER-formatted data."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6188,
            "description": "Converts an RSA private key from PEM format.",
            "params": [
                {
                    "name": "pem",
                    "description": "the PEM-formatted private key."
                }
            ],
            "return": {
                "description": "the private key."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6214,
            "description": "Converts an RSA private key to PEM format.",
            "params": [
                {
                    "name": "key",
                    "description": "the private key."
                },
                {
                    "name": "maxline",
                    "description": "the maximum characters per line, defaults to 64."
                }
            ],
            "return": {
                "description": "the PEM-formatted private key."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6231,
            "description": "Converts a PrivateKeyInfo to PEM format.",
            "params": [
                {
                    "name": "pki",
                    "description": "the PrivateKeyInfo."
                },
                {
                    "name": "maxline",
                    "description": "the maximum characters per line, defaults to 64."
                }
            ],
            "return": {
                "description": "the PEM-formatted private key."
            },
            "class": "EcRsaOaep"
        },
        {
            "file": "ec.crypto.js",
            "line": 6356,
            "description": "Decodes a PEM encoded PrivateKeyInfo (PKCS#8) or RSAPrivateKey (PKCS#1) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "fromPem",
            "static": 1,
            "params": [
                {
                    "name": "pem",
                    "description": "PEM as a string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object used to perform public key operations.",
                "type": "EcPk"
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6373,
            "description": "Generates an RSA Keypair using web workers.",
            "itemtype": "method",
            "name": "generateKeyAsync",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Method called when the keypair is generated.",
                    "type": "Function(EcPpk)"
                }
            ],
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6388,
            "description": "Generates an RSA Keypair synchronously. Can take a while.",
            "itemtype": "method",
            "name": "generateKey",
            "static": 1,
            "return": {
                "description": "Public private keypair.",
                "type": "EcPpk"
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6403,
            "description": "Returns true iff the PEM forms of the public private keypair match.\nCan also match against a public key if the public portion of the keypair match.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "Key",
                    "description": "to compare to.",
                    "type": "EcPpk|EcPk"
                }
            ],
            "return": {
                "description": "boolean If they match."
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6417,
            "description": "Encodes the private key into a PEM encoded RSAPrivateKey (PKCS#1) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "toPem",
            "return": {
                "description": "PEM encoded public key without whitespace.",
                "type": "String"
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6426,
            "description": "Encodes the private key into a PEM encoded RSAPrivateKey (PKCS#1) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "toPem",
            "return": {
                "description": "PEM encoded public key without whitespace.",
                "type": "String"
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6435,
            "description": "Encodes the private key into a PEM encoded PrivateKeyInfo (PKCS#8) formatted RSA Public Key.\n(In case you were curious.)",
            "itemtype": "method",
            "name": "toPem",
            "return": {
                "description": "PEM encoded public key without whitespace.",
                "type": "String"
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6447,
            "description": "Extracts the public key portion from the public private keypair.",
            "itemtype": "method",
            "name": "toPk",
            "return": {
                "description": "Public Key Helper.",
                "type": "EcPk"
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6457,
            "description": "Returns true if this PPK is in an array of PPKs.",
            "itemtype": "method",
            "name": "inArray",
            "params": [
                {
                    "name": "ppks",
                    "description": "Array of ppks",
                    "type": "Array<EcPpk>"
                }
            ],
            "return": {
                "description": "true iff this PPK in ppks."
            },
            "class": "EcPpk"
        },
        {
            "file": "ec.crypto.js",
            "line": 6601,
            "description": "Encrypts plaintext using AES-256-CTR. \nPlaintext is treated as as a sequence of bytes, does not perform UTF8 decoding.\nReturns base64 encoded ciphertext.",
            "itemtype": "method",
            "name": "encrypt",
            "static": 1,
            "params": [
                {
                    "name": "plaintext",
                    "description": "Text to encrypt.",
                    "type": "String"
                },
                {
                    "name": "secret",
                    "description": "Secret to use to encrypt.",
                    "type": "String"
                },
                {
                    "name": "iv",
                    "description": "Initialization Vector to use to encrypt.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Ciphertext encoded using base64.",
                "type": "String"
            },
            "class": "EcAesCtr"
        },
        {
            "file": "ec.crypto.js",
            "line": 6620,
            "description": "Decrypts ciphertext using AES-256-CTR. \nCiphertext must be base64 encoded ciphertext.\nReturns plaintext as a string (Sequence of bytes, no encoding).",
            "itemtype": "method",
            "name": "decrypt",
            "static": 1,
            "params": [
                {
                    "name": "ciphertext",
                    "description": "Ciphertext to decrypt.",
                    "type": "String"
                },
                {
                    "name": "secret",
                    "description": "Secret to use to decrypt.",
                    "type": "String"
                },
                {
                    "name": "iv",
                    "description": "Initialization Vector to use to decrypt.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Plaintext with no encoding.",
                "type": "String"
            },
            "class": "EcAesCtr"
        },
        {
            "file": "ec.crypto.js",
            "line": 6685,
            "description": "Asynchronous form of {{#crossLink \"EcAesCtr/encrypt:method\"}}EcAesCtr.encrypt{{/crossLink}}",
            "itemtype": "method",
            "name": "encrypt",
            "static": 1,
            "params": [
                {
                    "name": "plaintext",
                    "description": "Text to encrypt.",
                    "type": "String"
                },
                {
                    "name": "secret",
                    "description": "Secret to use to encrypt.",
                    "type": "String"
                },
                {
                    "name": "iv",
                    "description": "Initialization Vector to use to encrypt.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "Success method, result is Base64 encoded Ciphertext.",
                    "type": "Function(string)"
                },
                {
                    "name": "failure",
                    "description": "Failure method, parameter is error message.",
                    "type": "Function(string)"
                }
            ],
            "class": "EcAesCtrAsync"
        },
        {
            "file": "ec.crypto.js",
            "line": 6712,
            "description": "Asynchronous form of {{#crossLink \"EcAesCtr/decrypt:method\"}}EcAesCtr.decrypt{{/crossLink}}",
            "itemtype": "method",
            "name": "decrypt",
            "static": 1,
            "params": [
                {
                    "name": "ciphertext",
                    "description": "Text to decrypt.",
                    "type": "String"
                },
                {
                    "name": "secret",
                    "description": "Secret to use to decrypt.",
                    "type": "String"
                },
                {
                    "name": "iv",
                    "description": "Initialization Vector to use to decrypt.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "Success method, result is Plaintext with no encoding.",
                    "type": "Function(string)"
                },
                {
                    "name": "failure",
                    "description": "Failure method, parameter is error message.",
                    "type": "Function(string)"
                }
            ],
            "class": "EcAesCtrAsync"
        },
        {
            "file": "ec.ui.framework.js",
            "line": 10,
            "description": "Parent class of all view manager classes, stores a cache of the views and\ntheir corresponding DOM selectors and provides functions for setting a view\nto correspond to a selector and displaying a view after it has been added to\nthe cache.",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 20,
            "description": "Storage that maps view class instances to DOM Elements",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 24,
            "description": "Set's the view instance for a specific DOM selector",
            "params": [
                {
                    "name": "containerId",
                    "description": "DOM Selector for the element that will correspond to the view"
                },
                {
                    "name": "view",
                    "description": "View that will correspond to the DOM Selector"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 35,
            "description": "Returns the view instance that currently corresponds to a specific DOM\nselector",
            "params": [
                {
                    "name": "containerId",
                    "description": "DOM Selector that corresponds to the view to be returned"
                }
            ],
            "return": {
                "description": "The view that corresponds to the DOM Selector passed in, or null\n        if no view corresponds with it"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 47,
            "description": "Relates the view to a DOM Selector and calls the view's display function\nto populate the inner html of the DOM Selector Element",
            "params": [
                {
                    "name": "view",
                    "description": "View to be displayed in the DOM Selector Element"
                },
                {
                    "name": "containerId",
                    "description": "DOM Selector for element that the view will be displayed in"
                },
                {
                    "name": "callback",
                    "description": "Callback function to be passed in to the view's display\n           function (to be called once the view has been displayed)"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 71,
            "description": "Hides the container specified by the containerId by adding 'hide' class",
            "params": [
                {
                    "name": "containerId",
                    "description": "DOM Selector for the element to add the 'hide' class to"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 81,
            "description": "Object stored in the ScreenManager's history cache array, to keep track of the history of screens and \nwhich DOM element they were displayed in",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 104,
            "description": "Name of the page (used to retrieve the correct screen on a back/forward button press)",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 108,
            "description": "Screen to store and associate with the page name so that it can be loaded if necessary",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 112,
            "description": "ID of the container to display the screen in, once it has been found by page name",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 118,
            "description": "Class that represents a \"view\" that can be displayed in an container element on the page. The View should define \na display function that loads HTML into the container element on the page and then finally calls the callback once\nthe view has been completely initialized",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 127,
            "description": "Function to be defined in subclasses that returns the location of the main html file associated with this view",
            "return": {
                "description": "The string path to an html file"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 134,
            "description": "Display function to override (usually in JavaScript) that will set up any event handlers",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 140,
            "description": "Function that will convert a view to a certain other view class as long as it the converted type inherits the\ncurrent type of the view",
            "params": [
                {
                    "name": "_interface",
                    "description": "Class type that the instance should be converted to"
                }
            ],
            "return": {
                "description": "The converted instance of the type passed in"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 178,
            "description": "STJS Wrapper for the Browser Native History Object",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 187,
            "description": "View Manager sub class that manages loading \"modal\"s and has a few helper functions to make sure that \nthey work properly",
            "author": "djunker",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 197,
            "description": "DOM Selector (ID) of the container to display Modal's in",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 201,
            "description": "Application flag that is set when a modal is open, so we can check from the application whether we're in a \nmodal or not.",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 206,
            "description": "Retrieves the current view that corresponds to the Modal Container Element (Should be a Modal)",
            "return": {
                "description": "EcModal instance that is currently being shown in the Modal container element"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 215,
            "description": "Sets the current modal and then shows it by calling the modals display function",
            "params": [
                {
                    "name": "modal",
                    "description": "Modal Instance to be displayed in the modal container and set as current"
                },
                {
                    "name": "callback",
                    "description": "Function to invoke after the modal has been displayed"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 244,
            "description": "Hides the modal container and returns to the screen or overlay that was being displayed beneath it",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 259,
            "description": "View Subclass representing modal views that are displayed in the modal container",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 268,
            "description": "To be overrided in subclasses, lets the developer define the size of the modal",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 272,
            "description": "Function to be invoked when the modal is closed, can be overriden or left blank if nothing\nneeds to happen on the modal close",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 277,
            "return": {
                "description": "tiny, small, medium, large, or full depending on how large the modal should be"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 282,
            "description": "Subclass of view that is specific for a screen, providing a display name that\nwill be shown in the URL bar and that can be used on startup to check if the\nURL is asking for a certain page on startup.",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 293,
            "description": "Name that identifies a certain type of screen, shown in the URL bar to\nhelp the user understand the page that they are on and used during\nstartup to decide whether or not to load a specifici page on startup.",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 299,
            "description": "Getter for the display name",
            "return": {
                "description": "The display name for the screen"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 309,
            "description": "View Manager child class that manages loading \"screen\"s and saving screen history. This is the main view type\nin an application and represents a view that takes up (mostly) the entire browser page. History is tracked in the\nsession, so  when the back button is pressed, the application will load the previous screen with any data that \nwas associated with it.",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 321,
            "description": "DOM Selector (ID) of the Screen Container that will display all of the screen views",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 325,
            "description": "Array to track the history of the current session",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 329,
            "description": "Screen to be used when another screen is loading information from the server before being able to display\nitself. Notice that the display function does not affect the DOM on the page in any way.",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 340,
            "description": "Screen to be set by application on application startup, dictates what the screen should be if the startup\nScreen hasn't been set",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 345,
            "description": "Screen to be set by application if it notices that a certain screen should be loaded on startup that is \ndifferent from the default Screen",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 350,
            "description": "Callback to be invoked once the application has started and the first screen has been completely loaded\nand displayed",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 355,
            "description": "Callback invoked during a history load (used in Overlay Manager to open an overlay if it was last history view)",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 359,
            "description": "Array of callbacks that will compare any markers saved in the browser to see if a specific startup screen\nshould be set. These callbacks should be defined in the screen Java implementation to check if the screen\nshould be loaded.",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 365,
            "description": "Function to add startup screen callbacks to the array of callbacks",
            "params": [
                {
                    "name": "callback",
                    "description": "callback to add, all callbacks will be invoked on the application startup"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 374,
            "description": "Retrieves the current view that corresponds to the Screen Container Element (Should be a screen)",
            "return": {
                "description": "EcScreen instance that is currently being shown in the screen container element"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 383,
            "description": "Sets the application default Screen that is shown if no startup screen has been defined.\nAlso sets up some code to run during the application load, that calls the startup callbacks\nto see if there is a startup screen different than the defaultScreen, then displays it or the\ndefaultScreen depending on the results",
            "params": [
                {
                    "name": "page",
                    "description": "The default screen that will be displayed if no startup screen is defined during load"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 432,
            "description": "Set's the current screen, then show's it by calling the display function. Depending on the\naddHistory flag, will add the page passed in to the history array, tracking session page history",
            "params": [
                {
                    "name": "page",
                    "description": "The screen to set as current and display"
                },
                {
                    "name": "addHistory",
                    "description": "Flag for whether to store this page in the history array"
                },
                {
                    "name": "callback",
                    "description": "Function to invoke after the page has been displayed and foundation has been set up on the new HTML"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 454,
            "description": "Set's the current screen, then show's it by calling the display function. This replaces the current HistoryClosure\nelement for the current screen in the history array, rather than leaving it and (potentially) adding another\nhistory array element like changeScreen",
            "params": [
                {
                    "name": "page",
                    "description": "Screen to set as current and display"
                },
                {
                    "name": "callback",
                    "description": "Function to invoke after the page has been displayed and foundation has been set up on the new HTML"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 472,
            "description": "Reloads the current screen, leaving the history alone",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to invoke after the page has been redisplayed and foundation has been set up on the new HTML"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 485,
            "description": "Adds the screen passed in and the display container to a HistoryClosure element and pushes it \non the end of the history cache array. This does not ensure that the screen is displayed though.",
            "params": [
                {
                    "name": "screen",
                    "description": "The screen to add to the history cache array"
                },
                {
                    "name": "displayContainerId",
                    "description": "DOM Element ID corresponding to where the screen will be displayed (likely the SCREEN_CONTAINER_ID)"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 516,
            "description": "Replaces the current end of the history array with a new HistoryClosure element that contains the screen and \ncontainerId passed in.",
            "params": [
                {
                    "name": "screen",
                    "description": "Screen to add to the history element that will replace the last in the history array"
                },
                {
                    "name": "displayContainerId",
                    "description": "DOM Element ID corresponding to where the screen will be displayed (likely the SCREEN_CONTAINER_ID)"
                },
                {
                    "name": "params",
                    "description": "Object containing key to value pairs that should be put in the url bar to remember state at this history point"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 552,
            "description": "Sets the url parameters on the current page",
            "params": [
                {
                    "name": "params",
                    "description": "url parameters json object"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 560,
            "description": "Searches through the history array for the last screen that was loaded with the name passed in, and then displays\nit in the container that it was associated with. If there is no screen in the history, then check\nif there is a startupScreen that can be loaded right now, otherwise load the default screen",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the screen to search for in the history array"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 611,
            "description": "Subclass of view for an overlay, extends EcScreen because overlays should have a display name that can be used\nin the URL bar and in the history so the page can be loaded on back button or startup",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 621,
            "description": "View Manager that manages displaying overlay views (views that take over the screen, but can be exited to return to\nthe previous screen) with a few helper functions for managing overlays",
            "author": "devlin.junker@eduworks.com\n(NOT TESTED MUCH YET)",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 632,
            "description": "DOM Selector of the overlay wrapper (Should contain the overlay container and overlay close button)",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 636,
            "description": "DOM Selector of the overlay close button (clicking this should hide the current overlay)",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 640,
            "description": "DOM Selector of the HTML Element that will display the Overlay's HTML",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 644,
            "description": "Used if one of the startupOverlayCallbacks decides that it should be displayed on startup (usually using\nthe URL to check what should be displayed on start)",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 649,
            "description": "Callbacks that can be defined and run on startup, that should check to see if an overlay should be displayed\nimmediately when the application starts",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 654,
            "description": "Adds a callback to be run on startup that can check if an overlay should be displayed (the callback should\nbe defined in the overlay)",
            "params": [
                {
                    "name": "callback",
                    "description": "callback to be added to the startupOverlayCallbacks list"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 664,
            "description": "Application flag to check if we're currently in an overlay or not",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 668,
            "description": "Retrieves the current view that corresponds to the Overlay Container Element (Should be a Overlay)",
            "return": {
                "description": "EcModal instance that is currently being shown in the Overlay container element"
            },
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 677,
            "description": "Variable to hold the last screen, this is useful if we follow a chain of overlays and then want to close them,\nwe'll make sure to go back to the last screen that was visible to the user",
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 683,
            "description": "Set's the current overlay, then show's it by calling the display function and unhiding the overlay container.\nDepending on the addHistory flag, will add the overlay passed in to the history array",
            "params": [
                {
                    "name": "overlay",
                    "description": "The overlay to set as current and display"
                },
                {
                    "name": "addHistory",
                    "description": "Flag for whether to store this overlay in the history array"
                }
            ],
            "class": ""
        },
        {
            "file": "ec.ui.framework.js",
            "line": 713,
            "description": "Hides the overlay container and sets the inOverlay flag to false, adds the last screen to the history array so\nthere is a chain from initial screen to overlay (could be multiple) to initial screen. This way we can press the\nback button and be shown the last overlay.",
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 360,
            "description": "Manages the current user's logged in state and interfaces with the server to \nsign in/out and create users",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 374,
            "description": "Setter for the boolean flag of whether or not a user is signed in",
            "params": [
                {
                    "name": "val",
                    "description": "\n\t\t\ttrue if signed in, false if signed out"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 385,
            "return": {
                "description": "boolean whether or not the the user is logged in"
            },
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 391,
            "description": "Setter for boolean flag of whether or not the current user is admin",
            "params": [
                {
                    "name": "val",
                    "description": "\n\t\t\ttrue = admin, false = not admin"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 399,
            "return": {
                "description": "- whether or not the current user is admin"
            },
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 405,
            "description": "If the last time the user was using the application, they were signed in this\nreturns true (used to remind them to sign in again once they return)",
            "return": {
                "description": "true if previously signed in, false if not signed in last time, or user is here for\nthe first time from this computer"
            },
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 415,
            "description": "Validates a username and password on the server and then parses the user's credentials and\nchecks if they have an admin key. Also tells the identity manager to check for contacts in\nlocal storage after signed in.",
            "params": [
                {
                    "name": "username",
                    "description": "\n\t\t\tusername of the user signing in"
                },
                {
                    "name": "password",
                    "description": "password of the user signing in"
                },
                {
                    "name": "success",
                    "description": "\n\t\t\tcallback on successful login"
                },
                {
                    "name": "failure",
                    "description": "callback on error during login"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 456,
            "description": "Sets the flags so the user is logged out, wipes all sign in data so the user is no longer\nauthenticated and is unidentified",
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 469,
            "description": "Creates a new user and saves the account details on the login server, then signs in\nto the new account on successful creation",
            "params": [
                {
                    "name": "username",
                    "description": "username of the new account"
                },
                {
                    "name": "password",
                    "description": "password of the new account"
                },
                {
                    "name": "success",
                    "description": "callback for successful creation and sign in"
                },
                {
                    "name": "failure",
                    "description": "callback for error during creation"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 493,
            "description": "Saves the users credentials and contacts to the server",
            "params": [
                {
                    "name": "success",
                    "description": "callback for successful save"
                },
                {
                    "name": "failure",
                    "description": "callback for error during save"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 548,
            "description": "Manages the current selected identity for the user, and interfaces the Identity Manager to \nprovide helper functions for ownership and user identification",
            "author": "devlin.junker@eduworks.com",
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 557,
            "description": "Sets the currently selected identity to the ppk specified, only works if the ppk is in the \nlist of identities that the user owns",
            "params": [
                {
                    "name": "ppkPem",
                    "description": "PEM of the identity that will be set to the current identity"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 570,
            "description": "Clears the selected identity, so the user will be identified as public for any actions\nthat they make going forward",
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 577,
            "description": "Returns the contact that is associated with the PEM given, looks at both the user's\nidentities and contacts to match the PEM. The Contact returned will contain the display\nname that the user set for the PEM",
            "params": [
                {
                    "name": "pkPem",
                    "description": "\n\t\t\tPEM of the contact to lookup"
                }
            ],
            "return": {
                "description": "Contact that contains the displayName and public key, if the user\n\t\t\tdoes not have a display name stored for the PEM in either their contacts or identities,\n\t\t\twill return the Unknown Contact which contains the key and a display name of \"Unknown\""
            },
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 606,
            "description": "Adds a Key to the list of user identities managed by the EcIdentityManager",
            "params": [
                {
                    "name": "ppk",
                    "description": "Key to save to user identities"
                },
                {
                    "name": "displayName",
                    "description": "\n\t\t\tName to associate with the key to be saved, to identify it"
                },
                {
                    "name": "success",
                    "description": "Callback function once the key has been added"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 623,
            "description": "Generates a new Encryption Key to save to the identity manager list",
            "params": [
                {
                    "name": "success",
                    "description": "callback, once they key has been generated and added to the identity manager"
                },
                {
                    "name": "displayName",
                    "description": "display name for the key that is being generated to identify it"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 641,
            "description": "Helper function to determine if the logged in user owns a piece of data from the repository,\nuseful for showing certain actions",
            "params": [
                {
                    "name": "data",
                    "description": "\n\t\t\tThe object to check for ownership of"
                }
            ],
            "return": {
                "description": "true if owned, false if not owned by the current user"
            },
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 657,
            "description": "Helper function to determine if the logged in user can modify a piece of data, this means \nthat they either own the data, or it is public",
            "params": [
                {
                    "name": "data",
                    "description": "The object to check for ability to edit"
                }
            ],
            "return": {
                "description": "true if editable, false if not"
            },
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 676,
            "description": "Manages the server that the search controller (through EcRepository) and\nthe identity controller (through EcIdentityManager) communicate with. \nAllows the user to change the server that the UI is talking with via the change server modal.",
            "author": "djunker",
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 731,
            "description": "Adds a server to this list of servers that can be selected from the change server modal",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the server to be displayed in the list"
                },
                {
                    "name": "url",
                    "description": "URL of the server that corresponds to the name"
                },
                {
                    "name": "success",
                    "description": "Callback when the server is successfully added to the list"
                },
                {
                    "name": "failure",
                    "description": "Callback for any errors during adding to the list"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 759,
            "description": "Sets the server that the UI will communicate with, changes where the EcRepository and \nEcRemoteIdentity Manager are pointing to and communicating with",
            "params": [
                {
                    "name": "identifier",
                    "description": "Name of the server that was selected from the list, used to find URL to point at"
                },
                {
                    "name": "success",
                    "description": "Callback when successfully change where the components are pointing and set the\n\t\t\tselected server values"
                },
                {
                    "name": "failure",
                    "description": "Callback if any errors occur during changing where the components are pointing"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 809,
            "description": "Used during setup to set which EcRepository the server controller manages",
            "params": [
                {
                    "name": "repoInterface",
                    "description": "The interface to the repository to be used by the search controller"
                }
            ],
            "class": ""
        },
        {
            "file": "es.cassManager.js",
            "line": 819,
            "description": "Used during setup to set which EcRemoteIdentityManager the server controller manages",
            "params": [
                {
                    "name": "loginServer",
                    "description": "The interface to the server for managing identities and logging in with\n\t\t\tthe identity controller and login controller"
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.cass.js",
            "line": 47,
            "description": "Under construction.\n\nWorking model of a CASS competency.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.cass.js",
            "line": 160,
            "description": "A composition of references to assertions and acceptances that embody a\nperson's profile. It is reasonably safe to assume the maker of this framework\nimplicitly accepts all data referred to by this object.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.cass.js",
            "line": 224,
            "description": "A composition of references to competencies, alignments, and levels that\nembody a competency framework. It is reasonable safe to assume the maker of\nthis framework implicitly accepts all data referred to by this object.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 10,
            "description": "AES encrypted private key and display name. Contains Initialization Vectors,\nbut not secrets. Used to encrypt private identities for storage on remote\nsystems.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 24,
            "description": "AES Initialization Vector used to decode PPK.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 28,
            "description": "AES encrypted Private Key in PEM form.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 32,
            "description": "AES Initialization Vector used to decode displayName.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 36,
            "description": "AES encrypted display name for identity.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 60,
            "description": "Message used to retrieve credentials from a remote system.\n\nTODO: Vulnerable to replay attacks.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 74,
            "description": "Hashed username.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 78,
            "description": "Hashed password to authorize request.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 102,
            "description": "Credential list along with one time pad and session-based token for use in\ncommit actions.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 115,
            "description": "One time pad (aka perfect cipher)",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 119,
            "description": "Token provided by server to use in commit actions.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 123,
            "description": "Credential array.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 127,
            "description": "Contact array.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 151,
            "description": "AES encrypted public key and display name. Contains Initialization Vectors,\nbut not secrets. Used to encrypt public identities for storage on remote\nsystems.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 165,
            "description": "AES Initialization Vector used to decode PPK.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 169,
            "description": "AES encrypted Private Key in PEM form.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 173,
            "description": "AES Initialization Vector used to decode displayName.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 177,
            "description": "AES encrypted display name for identity.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 203,
            "description": "Component of EbacEncryptedValue that contains data needed to decrypt\nencrypted payload. Is, in itself, encrypted.\n\nAlso contains data used to verify that encrypted-data substitution attacks\nwere not performed on the data.\n\nMust be encryptable by RSA, therefore, serialized form is less than 256\nbytes.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 222,
            "description": "IV used to encrypt/decrypt payload.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 226,
            "description": "Hashed and Base64 encoded ID of the parent (if any) object.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 230,
            "description": "Secret used to encrypt/decrypt payload.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 234,
            "description": "Dot and Bracket notated index of the field in the parent-most object (if\nany).",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 280,
            "description": "Signature used to authorize movement of data on behalf of a private-key\nholding owner.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 293,
            "description": "The public key of the authorizing party.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 297,
            "description": "The time in number of milliseconds since midnight of January 1, 1970\n00:00:00 UTC that this signature is authorized to move data.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 302,
            "description": "The signature of this object, having signed the object, having been\nencoded in JSON with no space or tabs in ASCII sort order, having no\nvalue for the signature at the time of signing.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 308,
            "description": "The server authorized to move data. If this is empty, the signature may\nbe used by a server to ask for data from other servers.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 333,
            "description": "Encrypted JSON-LD object.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 346,
            "description": "Optional Hint used to aid search, showing the type of the inner encrypted\nobject.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 351,
            "description": "Base-64 encoded, AES encrypted form of the encrypted object (or data).",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 355,
            "description": "Optional Hint used to aid view, showing a name of the inner encrypted\nobject.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 392,
            "description": "AES encrypted public key and display name. Contains Initialization Vectors,\nbut not secrets. Used to encrypt public identities for storage on remote\nsystems.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 432,
            "description": "Message used to commit credentials to a remote login server.\n\nTODO: Semi-vulnerable to replay attacks. Token field prevents some replay\nattacks.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 448,
            "description": "Hashed username.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 452,
            "description": "Hashed password to authorize commit.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 456,
            "description": "Token provided to client when previously executed Request was done. May\nbe empty if this is used as part of Create action.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.ebac.js",
            "line": 461,
            "description": "List of credentials to commit to the login server storage.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 23,
            "description": "Data wrapper to represent remotely hosted data. Includes necessary fields for\npermission controls, signing, and identification of the object.",
            "author": "fritz.ray@eduworks.com",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 33,
            "description": "PEM encoded public keys of the owner of the object. A repository, upon\nreceiving a write operation, will ensure either the data did not\npreviously exist, or that an owner has provided a signature authorizing\nthe replacement of the old data with the new data.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 40,
            "description": "Signatures of the object. The signing method is as follows: Remove the\nsignature field. Encode the object and its fields in ascii-sort order\nJSON-LD using a space-free, tab-free encoding. Sign the aforementioned\nstring.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 47,
            "description": "URL/URI used to retrieve and store the object, plus identify the object.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 52,
            "description": "PEM encoded public keys of identities authorized to view the object. A\nrepository will ignore write operations from these identities, but will\nallow them to read the object.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 58,
            "description": "Array of EbacEncryptedSecret objects encoded in Base-64, encrypted using\nRSA public keys of owners or readers (or unknown parties) to allow them\naccess to the payload.",
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 64,
            "description": "Will generate an identifier using the server URL provided (usually from\nan EcRepository).",
            "params": [
                {
                    "name": "server",
                    "description": "Base URL of the server's repository functionality."
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 82,
            "description": "Will generate an identifier using the server URL provided (usually from\nan EcRepository).",
            "params": [
                {
                    "name": "server",
                    "description": "Base URL of the server's repository functionality."
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 100,
            "description": "Determines if the object has pk as an owner. Homogenizes the PEM strings\nfor comparison.",
            "params": [
                {
                    "name": "pk",
                    "description": "Public Key of the owner in object (forge) form."
                }
            ],
            "return": {
                "description": "True if owner is represented by the PK, false otherwise."
            },
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 117,
            "description": "Determines if the object has pk as an owner. Homogenizes the PEM strings\nfor comparison.",
            "params": [
                {
                    "name": "pk",
                    "description": "Public Key of the owner in object (forge) form."
                }
            ],
            "return": {
                "description": "True if owner is represented by the PK, false otherwise."
            },
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 130,
            "description": "Encodes the object in a form where it is ready to be signed.",
            "return": {
                "description": "ASCII-sort order encoded space-free and tab-free JSON-LD."
            },
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 152,
            "description": "Sign this object with a private key.",
            "params": [
                {
                    "name": "ppk",
                    "description": "Private Key of the owner in object (forge) form."
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 170,
            "description": "Verify's the object's signatures",
            "return": {
                "description": "true if all of the signatures could be verified, false if they\n        could not"
            },
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 206,
            "description": "Adds an owner to the object, if the owner does not exist.",
            "params": [
                {
                    "name": "newOwner",
                    "description": "PK of the new owner."
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 222,
            "description": "Removes an owner from the object, if the owner does exist.",
            "params": [
                {
                    "name": "oldOwner",
                    "description": "PK of the new owner."
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 237,
            "description": "Adds a reader to the object, if the reader does not exist.",
            "params": [
                {
                    "name": "newReader",
                    "description": "PK of the new reader."
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 253,
            "description": "Removes a reader from the object, if the reader does exist.",
            "params": [
                {
                    "name": "oldReader",
                    "description": "PK of the old reader."
                }
            ],
            "class": ""
        },
        {
            "file": "org.cassproject.schema.general.js",
            "line": 268,
            "description": "Determines if the object will survive and be retreivable from a server,\nshould it be written.",
            "return": {
                "description": "True if the object is NOT VALID for storage, false otherwise."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 14,
            "description": "Represents the @type field in JSON-LD.",
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 18,
            "description": "Represents the @context field in JSON-LD.",
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 32,
            "description": "Determines which fields to serialize into @fields.",
            "params": [
                {
                    "name": "s",
                    "description": ""
                }
            ],
            "return": {
                "description": "True if property is in the set of atProperties."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 48,
            "description": "Forces Javascript to encode the object in alphabetical order in order to\nmake signature based actions more viable. Also places @(at) symbols in\nfront of appropriate fields.",
            "return": {
                "description": "Serializable JSON object."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 100,
            "description": "Helper function to determine if a piece of data is probably a JSON\nobject.",
            "params": [
                {
                    "name": "probableJson",
                    "description": ""
                }
            ],
            "return": {
                "description": "True if is probably JSON. False if not."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 110,
            "description": "Uses the object's fully qualified type name and compares it to the\nprovided type.",
            "params": [
                {
                    "name": "type",
                    "description": "Fully qualified type name uri."
                }
            ],
            "return": {
                "description": "True if match, False if not."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 122,
            "description": "Uses the object's fully qualified type name and compares it to the\nprovided type.",
            "params": [
                {
                    "name": "type",
                    "description": "Fully qualified type name uri."
                }
            ],
            "return": {
                "description": "True if match, False if not."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 139,
            "description": "Gets the fully qualified type name, as JSON-LD allows the \"namespace\" of\nthe type to be defined in @context.",
            "return": {
                "description": "Fully qualified type name."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 156,
            "description": "Also could be called \"upcast\", for those in the know.\n\nGhetto method of copying properties from some other object. As freshly\ndeserialized javascript objects do not inherently attach the functions of\ntheir type, it is this or factory hell.",
            "params": [
                {
                    "name": "that",
                    "description": "The freshly deserialized object, or the object to upcast into\n           this object."
                }
            ],
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 182,
            "description": "Upgrades the object if necessary.",
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 186,
            "description": "Removes the @ symbol from properties in order to make them more\naccessible in Javascript.",
            "return": {
                "description": "This object, with @ properties converted to @-less properties."
            },
            "class": ""
        },
        {
            "file": "org.json-ld.js",
            "line": 205,
            "description": "Gets all versions of JSON-LD type strings for this type of object.",
            "return": {
                "description": "Array of URIs."
            },
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nThe sequence that assertions should be built as such: 1. Generate the ID. 2.\nAdd the owner. 3. Set the subject. 4. Set the agent. Further functions may be\ncalled afterwards in any order. WARNING: The modifications of ownership and\nreadership do not \"just work\".",
            "line": " cass.competency.js:10"
        },
        {
            "message": "Missing item type\nSets the subject of an assertion. Makes a few assumptions: Owners of the\nobject should be able to see and change the encrypted value. Owners and\nreaders of the object should be persisted.",
            "line": " cass.competency.js:119"
        },
        {
            "message": "Missing item type",
            "line": " cass.competency.js:325"
        },
        {
            "message": "Missing item type\nTODO: Test case where an absent relation is in the framework.",
            "line": " cass.competency.js:383"
        },
        {
            "message": "Missing item type",
            "line": " cass.competency.js:552"
        },
        {
            "message": "Missing item type",
            "line": " cass.competency.js:659"
        },
        {
            "message": "Missing item type\nIF IP type is COMPETENCY|ROLLUPRULE: assertionResult = ( IF number of\npositive assertions > 0 && number of negative assertions = 0 THEN\nassertionResult = TRUE IF number of positive assertions = 0 && number of\nnegative assertions > 0 THEN assertionResult = FALSE IF number of\npositive assertions > 0 && number of negative assertions > 0 THEN\nassertionResult = INDETERMINANT IF number of positive assertions = 0 &&\nnumber of negative assertions = 0 THEN assertionResult = UNKNOWN )\n\nIF assertionResult = INDETERMINANT THEN INDETERMINANT ELSE IF any\nequivalent packets = INDETERMINANT THEN INDETERMINANT ELSE IF any sub\npackets = INDETERMINANT THEN INDETERMINANT\n\nELSE IF assertionResult = UNKNOWN: IF all equivalent packets = UNKNOWN IF\nall sub packets = UNKNOWN THEN UNKNOWN IF all sub packets = TRUE|UNKNOWN\nTHEN TRUE IF all sub packets = FALSE|UNKNOWN THEN FALSE ELSE\nINDETERMINANT\n\nELSE IF all equivalent packets = TRUE|UNKNOWN IF all sub packets =\nTRUE|UNKNOWN THEN TRUE ELSE INDETERMINANT\n\nELSE IF all equivalent packets = FALSE|UNKNOWN IF all sub packets =\nFALSE|UNKNOWN THEN FALSE ELSE INDETERMINANT\n\nELSE INDETERMINANT\n\n\nELSE IF assertionResult = TRUE: IF all equivalent packets = TRUE|UNKNOWN\nIF all sub packets = TRUE|UNKNOWN THEN TRUE ELSE INDETERMINANT\n\nELSE INDETERMINANT\n\nELSE IF assertionResult = FALSE: IF all equivalent packets =\nFALSE|UNKNOWN IF all sub packets = FALSE|UNKNOWN THEN FALSE ELSE\nINDETERMINANT\n\nELSE INDETERMINANT",
            "line": " cass.rollup.js:972"
        },
        {
            "message": "Missing item type\nA contact is an identity that we do not own. Using the public key we may: 1.\nSend them information (by encrypting data with their public key) 2. Verify a\nsigned message that was sent (by using the verify function of the public key)\n3. Distinguish between this identity and other identities through the\ndisplayName.",
            "line": " ebac.identity.js:10"
        },
        {
            "message": "Missing item type\nHelper function to encrypt a contact into an encrypted contact (storable\nversion of a contact)",
            "line": " ebac.identity.js:32"
        },
        {
            "message": "Missing item type\nHelper function to decrypt an encrypted contact (storable version of an contact)\ninto an contact",
            "line": " ebac.identity.js:50"
        },
        {
            "message": "Missing item type\nAn identity is an alias that a person or system may own. It consists of a\nprivate key and a display name. Using the private key we may: 1. Perform all\noperations of a EcContact. 2. Decrypt messages using our private key. 3. Sign\nmessages, ensuring the recipient knows that we sent the message and it was\nnot altered.",
            "line": " ebac.identity.js:72"
        },
        {
            "message": "Missing item type\nHelper function to encrypt an identity into a credential (storable\nversion of an identity)",
            "line": " ebac.identity.js:94"
        },
        {
            "message": "Missing item type\nHelper function to decrypt a credential (storable version of an identity)\ninto an identity)",
            "line": " ebac.identity.js:110"
        },
        {
            "message": "Missing item type\nConverts an identity to a contact.",
            "line": " ebac.identity.js:131"
        },
        {
            "message": "Missing item type\nManages identities and contacts, provides hooks to respond to identity and\ncontact events, and builds signatures and signature sheets for authorizing\nmovement of data. Also provides helper functions for identity management.",
            "line": " ebac.identity.js:143"
        },
        {
            "message": "Missing item type\nReads contact data from localstorage.",
            "line": " ebac.identity.js:168"
        },
        {
            "message": "Missing item type\nWrites contact data to localstorage.",
            "line": " ebac.identity.js:193"
        },
        {
            "message": "Missing item type\nReads contact data from localstorage.",
            "line": " ebac.identity.js:209"
        },
        {
            "message": "Missing item type\nWrites contact data to localstorage.",
            "line": " ebac.identity.js:234"
        },
        {
            "message": "Missing item type\nAdds an identity to the identity manager. Checks for duplicates. Triggers\nevents.",
            "line": " ebac.identity.js:254"
        },
        {
            "message": "Missing item type\nAdds a contact to the identity manager. Checks for duplicates. Triggers\nevents.",
            "line": " ebac.identity.js:268"
        },
        {
            "message": "Missing item type\nCreate a signature sheet, authorizing movement of data outside of our\ncontrol.",
            "line": " ebac.identity.js:292"
        },
        {
            "message": "Missing item type\nCreate a signature sheet for all identities, authorizing movement of data\noutside of our control.",
            "line": " ebac.identity.js:341"
        },
        {
            "message": "Missing item type\nGet PPK from PK (if we have it)",
            "line": " ebac.identity.js:389"
        },
        {
            "message": "Missing item type\nGet Contact from PK (if we have it)",
            "line": " ebac.identity.js:404"
        },
        {
            "message": "Missing item type\nGet Identity from PK (if we have it)",
            "line": " ebac.identity.js:418"
        },
        {
            "message": "Missing item type\nSign a piece of data with all available keys that own that data.",
            "line": " ebac.identity.js:432"
        },
        {
            "message": "Missing item type\nLogs into and stores/retrieves credentials from a compatible remote server.\nPerforms anonymization of the user.\n\nRequires initialization with server specific salts. Server specific salts\nprevent co-occurrence attacks, should credentials on one server be\ncompromised (intercepted in transit).\n\nTransmits hashed username, hashed password, and encrypts credentials using\nthe hashed combination of the username and password. This prevents the system\nstoring the credentials from having any knowledge of the user.\n\nPassword recovery is done by, when the password changes, creating a\ncryptographic pad (or perfect cipher) where one half is stored on the server,\nand the other half is stored with the user. Should the user lose this pad and\nforget their password, they are not able to recover or reset their password,\nand their data should be considered lost.",
            "line": " ebac.identity.js:489"
        },
        {
            "message": "Missing item type\nConfigure parameters of the remote login storage.",
            "line": " ebac.identity.js:526"
        },
        {
            "message": "Missing item type\nWipes login data.",
            "line": " ebac.identity.js:611"
        },
        {
            "message": "Missing item type\nConfigure compatible remote identity management server.",
            "line": " ebac.identity.js:621"
        },
        {
            "message": "Missing item type\n\"Log Into\" system, generating credentials. Does not actually remotely\naccess any machine.\n\nPlease clear username and password fields after this function is called.",
            "line": " ebac.identity.js:630"
        },
        {
            "message": "Missing item type\nChange password of user in memory. Does not automatically commit new credentials.\n\nPlease clear username and password fields after this function is called.",
            "line": " ebac.identity.js:653"
        },
        {
            "message": "Missing item type\nFetch credentials from server, invoking events based on login success or\nfailure.\n\nAutomatically populates EcIdentityManager.\n\nRequires login().",
            "line": " ebac.identity.js:684"
        },
        {
            "message": "Missing item type\nCommits credentials in EcIdentityManager to remote server.\n\nWill trigger pad generation and fail if the pad has not been specified.",
            "line": " ebac.identity.js:731"
        },
        {
            "message": "Missing item type\nCreates an account.\n\nPlease note that the remote login server does not throw error messages if\nan account creation is blocked due to being a duplicate. This prevents\nlogin probing. This will always succeed (if the request is properly\nformed and makes it to the server).\n\nWill trigger pad generation and fail if the pad has not been specified.",
            "line": " ebac.identity.js:744"
        },
        {
            "message": "Missing item type\nSplices together passwords (in a fashion more like shuffling a deck of\ncards, not appending).",
            "line": " ebac.identity.js:806"
        },
        {
            "message": "Missing item type\nRepresents an encrypted piece of data. Provides helper functions for\nencryption/decryption of JSON-LD objects, and provides some searchability of\nthe data within.",
            "line": " ebac.repository.js:10"
        },
        {
            "message": "Missing item type\nAdds a reader to the object, if the reader does not exist.",
            "line": " ebac.repository.js:319"
        },
        {
            "message": "Missing item type\nRemoves a reader from the object, if the reader does exist.",
            "line": " ebac.repository.js:340"
        },
        {
            "message": "Missing item type\nA representation of a file.",
            "line": " ebac.repository.js:355"
        },
        {
            "message": "Missing item type\nOptional checksum of the file, used to verify if the file has been\ntransmitted correctly.",
            "line": " ebac.repository.js:367"
        },
        {
            "message": "Missing item type\nMime type of the file.",
            "line": " ebac.repository.js:372"
        },
        {
            "message": "Missing item type\nBase-64 encoded version of the bytestream of a file.\n\nPlease note: This field will be empty in search results, but be populated\nin a direct get.",
            "line": " ebac.repository.js:376"
        },
        {
            "message": "Missing item type\nHelper method to force the browser to download the file.",
            "line": " ebac.repository.js:384"
        },
        {
            "message": "Missing item type\nGets a JSON-LD object from the place designated by the URI.\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "line": " ebac.repository.js:451"
        },
        {
            "message": "Missing item type\nSearch a repository for JSON-LD compatible data.\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "line": " ebac.repository.js:527"
        },
        {
            "message": "Missing item type\nSearch a repository for JSON-LD compatible data.\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "line": " ebac.repository.js:545"
        },
        {
            "message": "Missing item type\nLists all types visible to the current user in the repository\n\nUses a signature sheet gathered from {@link EcIdentityManager}.",
            "line": " ebac.repository.js:667"
        },
        {
            "message": "Missing item type\nAttempts to save a piece of data.\n\nUses a signature sheet informed by the owner field of the data.",
            "line": " ebac.repository.js:743"
        },
        {
            "message": "Missing item type\nAttempts to save a piece of data without signing it.\n\nUses a signature sheet informed by the owner field of the data.",
            "line": " ebac.repository.js:757"
        },
        {
            "message": "Missing item type\nAttempts to delete a piece of data.\n\nUses a signature sheet informed by the owner field of the data.",
            "line": " ebac.repository.js:784"
        },
        {
            "message": "Missing item type\nReturns <code>true</code> if <code>vertex</code> is the destination of <code>edge</code>.\nEquivalent to <code>getDest(edge).equals(vertex)</code>.",
            "line": " ec.base.js:975"
        },
        {
            "message": "Missing item type\nSecure Hash Algorithm with 256-bit digest (SHA-256) implementation.\n\nSee FIPS 180-2 for details.",
            "line": " ec.crypto.js:87"
        },
        {
            "message": "Missing item type\nCreates a SHA-256 message digest object.",
            "line": " ec.crypto.js:105"
        },
        {
            "message": "Missing item type\nStarts the digest.",
            "line": " ec.crypto.js:136"
        },
        {
            "message": "Missing item type\nUpdates the digest with the given message input. The given input can\ntreated as raw input (no encoding will be applied) or an encoding of\n'utf8' maybe given to encode the input using UTF-8.",
            "line": " ec.crypto.js:160"
        },
        {
            "message": "Missing item type\nProduces the digest.",
            "line": " ec.crypto.js:194"
        },
        {
            "message": "Missing item type\nInitializes the constant tables.",
            "line": " ec.crypto.js:268"
        },
        {
            "message": "Missing item type\nUpdates a SHA-256 state with the given byte buffer.",
            "line": " ec.crypto.js:299"
        },
        {
            "message": "Missing item type\nAn API for getting cryptographically-secure random bytes. The bytes are\ngenerated using the Fortuna algorithm devised by Bruce Schneier and\nNiels Ferguson.\n\nGetting strong random bytes is not yet easy to do in javascript. The only\ntruish random entropy that can be collected is from the mouse, keyboard, or\nfrom timing with respect to page loads, etc. This generator makes a poor\nattempt at providing random bytes when those sources haven't yet provided\nenough entropy to initially seed or to reseed the PRNG.",
            "line": " ec.crypto.js:439"
        },
        {
            "message": "Missing item type\nCreates a new PRNG.",
            "line": " ec.crypto.js:506"
        },
        {
            "message": "Missing item type\nGets random bytes. If a native secure crypto API is unavailable, this\nmethod tries to make the bytes more unpredictable by drawing from data that\ncan be collected from the user of the browser, eg: mouse movement.\n\nIf a callback is given, this method will be called asynchronously.",
            "line": " ec.crypto.js:512"
        },
        {
            "message": "Missing item type\nGets random bytes asynchronously. If a native secure crypto API is\nunavailable, this method tries to make the bytes more unpredictable by\ndrawing from data that can be collected from the user of the browser,\neg: mouse movement.",
            "line": " ec.crypto.js:528"
        },
        {
            "message": "Missing item type\nUtility functions for web applications.",
            "line": " ec.crypto.js:683"
        },
        {
            "message": "Missing item type",
            "line": " ec.crypto.js:808"
        },
        {
            "message": "Missing item type\nConstructor for a binary string backed byte buffer.",
            "line": " ec.crypto.js:810"
        },
        {
            "message": "Missing item type\nGets the number of bytes in this buffer.",
            "line": " ec.crypto.js:870"
        },
        {
            "message": "Missing item type\nGets whether or not this buffer is empty.",
            "line": " ec.crypto.js:879"
        },
        {
            "message": "Missing item type\nPuts a byte in this buffer.",
            "line": " ec.crypto.js:888"
        },
        {
            "message": "Missing item type\nPuts a byte in this buffer N times.",
            "line": " ec.crypto.js:899"
        },
        {
            "message": "Missing item type\nPuts bytes in this buffer.",
            "line": " ec.crypto.js:924"
        },
        {
            "message": "Missing item type\nPuts a UTF-16 encoded string into this buffer.",
            "line": " ec.crypto.js:937"
        },
        {
            "message": "Missing item type\nPuts a 16-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:948"
        },
        {
            "message": "Missing item type\nPuts a 24-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:961"
        },
        {
            "message": "Missing item type\nPuts a 32-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:975"
        },
        {
            "message": "Missing item type\nPuts a 16-bit integer in this buffer in little-endian order.",
            "line": " ec.crypto.js:990"
        },
        {
            "message": "Missing item type\nPuts a 24-bit integer in this buffer in little-endian order.",
            "line": " ec.crypto.js:1003"
        },
        {
            "message": "Missing item type\nPuts a 32-bit integer in this buffer in little-endian order.",
            "line": " ec.crypto.js:1017"
        },
        {
            "message": "Missing item type\nPuts an n-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:1032"
        },
        {
            "message": "Missing item type\nPuts a signed n-bit integer in this buffer in big-endian order. Two's\ncomplement representation is used.",
            "line": " ec.crypto.js:1049"
        },
        {
            "message": "Missing item type\nPuts the given buffer into this buffer.",
            "line": " ec.crypto.js:1065"
        },
        {
            "message": "Missing item type\nGets a byte from this buffer and advances the read pointer by 1.",
            "line": " ec.crypto.js:1076"
        },
        {
            "message": "Missing item type\nGets a uint16 from this buffer in big-endian order and advances the read\npointer by 2.",
            "line": " ec.crypto.js:1085"
        },
        {
            "message": "Missing item type\nGets a uint24 from this buffer in big-endian order and advances the read\npointer by 3.",
            "line": " ec.crypto.js:1099"
        },
        {
            "message": "Missing item type\nGets a uint32 from this buffer in big-endian order and advances the read\npointer by 4.",
            "line": " ec.crypto.js:1114"
        },
        {
            "message": "Missing item type\nGets a uint16 from this buffer in little-endian order and advances the read\npointer by 2.",
            "line": " ec.crypto.js:1130"
        },
        {
            "message": "Missing item type\nGets a uint24 from this buffer in little-endian order and advances the read\npointer by 3.",
            "line": " ec.crypto.js:1144"
        },
        {
            "message": "Missing item type\nGets a uint32 from this buffer in little-endian order and advances the read\npointer by 4.",
            "line": " ec.crypto.js:1159"
        },
        {
            "message": "Missing item type\nGets an n-bit integer from this buffer in big-endian order and advances the\nread pointer by n/8.",
            "line": " ec.crypto.js:1175"
        },
        {
            "message": "Missing item type\nGets a signed n-bit integer from this buffer in big-endian order, using\ntwo's complement, and advances the read pointer by n/8.",
            "line": " ec.crypto.js:1192"
        },
        {
            "message": "Missing item type\nReads bytes out into a UTF-8 string and clears them from the buffer.",
            "line": " ec.crypto.js:1209"
        },
        {
            "message": "Missing item type\nGets a UTF-8 encoded string of the bytes from this buffer without modifying\nthe read pointer.",
            "line": " ec.crypto.js:1233"
        },
        {
            "message": "Missing item type\nGets a byte at the given index without modifying the read pointer.",
            "line": " ec.crypto.js:1247"
        },
        {
            "message": "Missing item type\nPuts a byte at the given index without modifying the read pointer.",
            "line": " ec.crypto.js:1258"
        },
        {
            "message": "Missing item type\nGets the last byte without modifying the read pointer.",
            "line": " ec.crypto.js:1273"
        },
        {
            "message": "Missing item type\nCreates a copy of this buffer.",
            "line": " ec.crypto.js:1282"
        },
        {
            "message": "Missing item type\nCompacts this buffer.",
            "line": " ec.crypto.js:1293"
        },
        {
            "message": "Missing item type\nClears this buffer.",
            "line": " ec.crypto.js:1306"
        },
        {
            "message": "Missing item type\nShortens this buffer by triming bytes off of the end of this buffer.",
            "line": " ec.crypto.js:1317"
        },
        {
            "message": "Missing item type\nConverts this buffer to a hexadecimal string.",
            "line": " ec.crypto.js:1331"
        },
        {
            "message": "Missing item type\nConverts this buffer to a UTF-16 string (standard JavaScript string).",
            "line": " ec.crypto.js:1348"
        },
        {
            "message": "Missing item type",
            "line": " ec.crypto.js:1357"
        },
        {
            "message": "Missing item type",
            "line": " ec.crypto.js:1360"
        },
        {
            "message": "Missing item type\nFIXME: Experimental. Do not use yet.\n\nConstructor for an ArrayBuffer-backed byte buffer.\n\nThe buffer may be constructed from a string, an ArrayBuffer, DataView, or a\nTypedArray.\n\nIf a string is given, its encoding should be provided as an option,\notherwise it will default to 'binary'. A 'binary' string is encoded such\nthat each character is one byte in length and size.\n\nIf an ArrayBuffer, DataView, or TypedArray is given, it will be used\n*directly* without any copying. Note that, if a write to the buffer requires\nmore space, the buffer will allocate a new backing ArrayBuffer to\naccommodate. The starting read and write offsets for the buffer may be\ngiven as options.",
            "line": " ec.crypto.js:1362"
        },
        {
            "message": "Missing item type\nGets the number of bytes in this buffer.",
            "line": " ec.crypto.js:1429"
        },
        {
            "message": "Missing item type\nGets whether or not this buffer is empty.",
            "line": " ec.crypto.js:1438"
        },
        {
            "message": "Missing item type\nEnsures this buffer has enough empty space to accommodate the given number\nof bytes. An optional parameter may be given that indicates a minimum\namount to grow the buffer if necessary. If the parameter is not given,\nthe buffer will be grown by some previously-specified default amount\nor heuristic.",
            "line": " ec.crypto.js:1447"
        },
        {
            "message": "Missing item type\nPuts a byte in this buffer.",
            "line": " ec.crypto.js:1474"
        },
        {
            "message": "Missing item type\nPuts a byte in this buffer N times.",
            "line": " ec.crypto.js:1487"
        },
        {
            "message": "Missing item type\nPuts bytes in this buffer. The bytes may be given as a string, an\nArrayBuffer, a DataView, or a TypedArray.",
            "line": " ec.crypto.js:1503"
        },
        {
            "message": "Missing item type\nPuts the given buffer into this buffer.",
            "line": " ec.crypto.js:1602"
        },
        {
            "message": "Missing item type\nPuts a string into this buffer.",
            "line": " ec.crypto.js:1615"
        },
        {
            "message": "Missing item type\nPuts a 16-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:1627"
        },
        {
            "message": "Missing item type\nPuts a 24-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:1641"
        },
        {
            "message": "Missing item type\nPuts a 32-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:1656"
        },
        {
            "message": "Missing item type\nPuts a 16-bit integer in this buffer in little-endian order.",
            "line": " ec.crypto.js:1670"
        },
        {
            "message": "Missing item type\nPuts a 24-bit integer in this buffer in little-endian order.",
            "line": " ec.crypto.js:1684"
        },
        {
            "message": "Missing item type\nPuts a 32-bit integer in this buffer in little-endian order.",
            "line": " ec.crypto.js:1699"
        },
        {
            "message": "Missing item type\nPuts an n-bit integer in this buffer in big-endian order.",
            "line": " ec.crypto.js:1713"
        },
        {
            "message": "Missing item type\nPuts a signed n-bit integer in this buffer in big-endian order. Two's\ncomplement representation is used.",
            "line": " ec.crypto.js:1730"
        },
        {
            "message": "Missing item type\nGets a byte from this buffer and advances the read pointer by 1.",
            "line": " ec.crypto.js:1747"
        },
        {
            "message": "Missing item type\nGets a uint16 from this buffer in big-endian order and advances the read\npointer by 2.",
            "line": " ec.crypto.js:1756"
        },
        {
            "message": "Missing item type\nGets a uint24 from this buffer in big-endian order and advances the read\npointer by 3.",
            "line": " ec.crypto.js:1768"
        },
        {
            "message": "Missing item type\nGets a uint32 from this buffer in big-endian order and advances the read\npointer by 4.",
            "line": " ec.crypto.js:1782"
        },
        {
            "message": "Missing item type\nGets a uint16 from this buffer in little-endian order and advances the read\npointer by 2.",
            "line": " ec.crypto.js:1794"
        },
        {
            "message": "Missing item type\nGets a uint24 from this buffer in little-endian order and advances the read\npointer by 3.",
            "line": " ec.crypto.js:1806"
        },
        {
            "message": "Missing item type\nGets a uint32 from this buffer in little-endian order and advances the read\npointer by 4.",
            "line": " ec.crypto.js:1820"
        },
        {
            "message": "Missing item type\nGets an n-bit integer from this buffer in big-endian order and advances the\nread pointer by n/8.",
            "line": " ec.crypto.js:1832"
        },
        {
            "message": "Missing item type\nGets a signed n-bit integer from this buffer in big-endian order, using\ntwo's complement, and advances the read pointer by n/8.",
            "line": " ec.crypto.js:1849"
        },
        {
            "message": "Missing item type\nReads bytes out into a UTF-8 string and clears them from the buffer.",
            "line": " ec.crypto.js:1866"
        },
        {
            "message": "Missing item type\nGets a UTF-8 encoded string of the bytes from this buffer without modifying\nthe read pointer.",
            "line": " ec.crypto.js:1893"
        },
        {
            "message": "Missing item type\nGets a byte at the given index without modifying the read pointer.",
            "line": " ec.crypto.js:1908"
        },
        {
            "message": "Missing item type\nPuts a byte at the given index without modifying the read pointer.",
            "line": " ec.crypto.js:1919"
        },
        {
            "message": "Missing item type\nGets the last byte without modifying the read pointer.",
            "line": " ec.crypto.js:1932"
        },
        {
            "message": "Missing item type\nCreates a copy of this buffer.",
            "line": " ec.crypto.js:1941"
        },
        {
            "message": "Missing item type\nCompacts this buffer.",
            "line": " ec.crypto.js:1950"
        },
        {
            "message": "Missing item type\nClears this buffer.",
            "line": " ec.crypto.js:1967"
        },
        {
            "message": "Missing item type\nShortens this buffer by triming bytes off of the end of this buffer.",
            "line": " ec.crypto.js:1978"
        },
        {
            "message": "Missing item type\nConverts this buffer to a hexadecimal string.",
            "line": " ec.crypto.js:1991"
        },
        {
            "message": "Missing item type\nConverts this buffer to a string, using the given encoding. If no\nencoding is given, 'utf8' (UTF-8) is used.",
            "line": " ec.crypto.js:2008"
        },
        {
            "message": "Missing item type",
            "line": " ec.crypto.js:2043"
        },
        {
            "message": "Missing item type\nCreates a buffer that stores bytes. A value may be given to put into the\nbuffer that is either a string of bytes or a UTF-16 string that will\nbe encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).",
            "line": " ec.crypto.js:2046"
        },
        {
            "message": "Missing item type\nFills a string with a particular value. If you want the string to be a byte\nstring, pass in String.fromCharCode(theByte).",
            "line": " ec.crypto.js:2064"
        },
        {
            "message": "Missing item type\nPerforms a per byte XOR between two byte strings and returns the result as a\nstring of bytes.",
            "line": " ec.crypto.js:2088"
        },
        {
            "message": "Missing item type\nConverts a hex string into a 'binary' encoded string of bytes.",
            "line": " ec.crypto.js:2118"
        },
        {
            "message": "Missing item type\nConverts a 'binary' encoded string of bytes to hex.",
            "line": " ec.crypto.js:2141"
        },
        {
            "message": "Missing item type\nConverts an 32-bit integer to 4-big-endian byte string.",
            "line": " ec.crypto.js:2153"
        },
        {
            "message": "Missing item type\nBase64 encodes a 'binary' encoded string of bytes.",
            "line": " ec.crypto.js:2201"
        },
        {
            "message": "Missing item type\nBase64 decodes a string into a 'binary' encoded string of bytes.",
            "line": " ec.crypto.js:2240"
        },
        {
            "message": "Missing item type\nUTF-8 encodes the given UTF-16 encoded string (a standard JavaScript\nstring). Non-ASCII characters will be encoded as multiple bytes according\nto UTF-8.",
            "line": " ec.crypto.js:2277"
        },
        {
            "message": "Missing item type\nDecodes a UTF-8 encoded string into a UTF-16 string.",
            "line": " ec.crypto.js:2290"
        },
        {
            "message": "Missing item type\nEncodes a Uint8Array as a binary-encoded string. This encoding uses\na value between 0 and 255 for each character.",
            "line": " ec.crypto.js:2309"
        },
        {
            "message": "Missing item type\nDecodes a binary-encoded string to a Uint8Array. This encoding uses\na value between 0 and 255 for each character.",
            "line": " ec.crypto.js:2321"
        },
        {
            "message": "Missing item type\nEncodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or\nByteBuffer as a string of hexadecimal characters.",
            "line": " ec.crypto.js:2345"
        },
        {
            "message": "Missing item type\nDecodes a hex-encoded string to a Uint8Array.",
            "line": " ec.crypto.js:2355"
        },
        {
            "message": "Missing item type\nBase64-encodes a Uint8Array.",
            "line": " ec.crypto.js:2384"
        },
        {
            "message": "Missing item type\nDecodes a base64-encoded string to a Uint8Array.",
            "line": " ec.crypto.js:2422"
        },
        {
            "message": "Missing item type\nEncodes the given string as UTF-8 in a Uint8Array.",
            "line": " ec.crypto.js:2475"
        },
        {
            "message": "Missing item type\nDecodes the UTF-8 contents from a Uint8Array.",
            "line": " ec.crypto.js:2499"
        },
        {
            "message": "Missing item type\nEncodes the given string as UTF-16 in a Uint8Array.",
            "line": " ec.crypto.js:2510"
        },
        {
            "message": "Missing item type\nDecodes the UTF-16 contents from a Uint8Array.",
            "line": " ec.crypto.js:2536"
        },
        {
            "message": "Missing item type\nDeflates the given data using a flash interface.",
            "line": " ec.crypto.js:2547"
        },
        {
            "message": "Missing item type\nInflates the given data using a flash interface.",
            "line": " ec.crypto.js:2577"
        },
        {
            "message": "Missing item type\nSets a storage object.",
            "line": " ec.crypto.js:2593"
        },
        {
            "message": "Missing item type\nGets a storage object.",
            "line": " ec.crypto.js:2623"
        },
        {
            "message": "Missing item type\nStores an item in local storage.",
            "line": " ec.crypto.js:2669"
        },
        {
            "message": "Missing item type\nGets an item from local storage.",
            "line": " ec.crypto.js:2691"
        },
        {
            "message": "Missing item type\nRemoves an item from local storage.",
            "line": " ec.crypto.js:2711"
        },
        {
            "message": "Missing item type\nClears the local disk storage identified by the given ID.",
            "line": " ec.crypto.js:2741"
        },
        {
            "message": "Missing item type\nCalls a storage function.",
            "line": " ec.crypto.js:2751"
        },
        {
            "message": "Missing item type\nStores an item on local disk.\n\nThe available types of local storage include 'flash', 'web', and 'both'.\n\nThe type 'flash' refers to flash local storage (SharedObject). In order\nto use flash local storage, the 'api' parameter must be valid. The type\n'web' refers to WebStorage, if supported by the browser. The type 'both'\nrefers to storing using both 'flash' and 'web', not just one or the\nother.\n\nThe location array should list the storage types to use in order of\npreference:\n\n['flash']: flash only storage\n['web']: web only storage\n['both']: try to store in both\n['flash','web']: store in flash first, but if not available, 'web'\n['web','flash']: store in web first, but if not available, 'flash'\n\nThe location array defaults to: ['web', 'flash']",
            "line": " ec.crypto.js:2802"
        },
        {
            "message": "Missing item type\nGets an item on local disk.\n\nSet setItem() for details on storage types.",
            "line": " ec.crypto.js:2834"
        },
        {
            "message": "Missing item type\nRemoves an item on local disk.\n\nSet setItem() for details on storage types.",
            "line": " ec.crypto.js:2850"
        },
        {
            "message": "Missing item type\nClears the local disk storage identified by the given ID.\n\nSet setItem() for details on storage types.",
            "line": " ec.crypto.js:2864"
        },
        {
            "message": "Missing item type\nParses the scheme, host, and port from an http(s) url.",
            "line": " ec.crypto.js:2877"
        },
        {
            "message": "Missing item type\nReturns the window location query variables. Query is parsed on the first\ncall and the same object is returned on subsequent calls. The mapping\nis from keys to an array of values. Parameters without values will have\nan object key set but no value added to the value array. Values are\nunescaped.\n\n...?k1=v1&k2=v2:\n{\n  \"k1\": [\"v1\"],\n  \"k2\": [\"v2\"]\n}\n\n...?k1=v1&k1=v2:\n{\n  \"k1\": [\"v1\", \"v2\"]\n}\n\n...?k1=v1&k2:\n{\n  \"k1\": [\"v1\"],\n  \"k2\": []\n}\n\n...?k1=v1&k1:\n{\n  \"k1\": [\"v1\"]\n}\n\n...?k1&k1:\n{\n  \"k1\": []\n}",
            "line": " ec.crypto.js:2917"
        },
        {
            "message": "Missing item type\nParses a fragment into a path and query. This method will take a URI\nfragment and break it up as if it were the main URI. For example:\n   /bar/baz?a=1&b=2\nresults in:\n   {\n      path: [\"bar\", \"baz\"],\n      query: {\"k1\": [\"v1\"], \"k2\": [\"v2\"]}\n   }",
            "line": " ec.crypto.js:3002"
        },
        {
            "message": "Missing item type\nMakes a request out of a URI-like request string. This is intended to\nbe used where a fragment id (after a URI '#') is parsed as a URI with\npath and query parts. The string should have a path beginning and\ndelimited by '/' and optional query parameters following a '?'. The\nquery should be a standard URL set of key value pairs delimited by\n'&'. For backwards compatibility the initial '/' on the path is not\nrequired. The request object has the following API, (fully described\nin the method code):\n   {\n      path: <the path string part>.\n      query: <the query string part>,\n      getPath(i): get part or all of the split path array,\n      getQuery(k, i): get part or all of a query key array,\n      getQueryLast(k, _default): get last element of a query key array.\n   }",
            "line": " ec.crypto.js:3040"
        },
        {
            "message": "Missing item type\nGet path or element in path.",
            "line": " ec.crypto.js:3066"
        },
        {
            "message": "Missing item type\nGet query, values for a key, or value for a key index.",
            "line": " ec.crypto.js:3076"
        },
        {
            "message": "Missing item type\nMakes a URI out of a path, an object with query parameters, and a\nfragment. Uses jQuery.param() internally for query string creation.\nIf the path is an array, it will be joined with '/'.",
            "line": " ec.crypto.js:3110"
        },
        {
            "message": "Missing item type\nFollows a path of keys deep into an object hierarchy and set a value.\nIf a key does not exist or it's value is not an object, create an\nobject in it's place. This can be destructive to a object tree if\nleaf nodes are given as non-final path keys.\nUsed to avoid exceptions from missing parts of the path.",
            "line": " ec.crypto.js:3132"
        },
        {
            "message": "Missing item type\nFollows a path of keys deep into an object hierarchy and return a value.\nIf a key does not exist, create an object in it's place.\nUsed to avoid exceptions from missing parts of the path.",
            "line": " ec.crypto.js:3167"
        },
        {
            "message": "Missing item type\nFollow a path of keys deep into an object hierarchy and delete the\nlast one. If a key does not exist, do nothing.\nUsed to avoid exceptions from missing parts of the path.",
            "line": " ec.crypto.js:3194"
        },
        {
            "message": "Missing item type\nCheck if an object is empty.\n\nTaken from:\nhttp://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937",
            "line": " ec.crypto.js:3225"
        },
        {
            "message": "Missing item type\nFormat with simple printf-style interpolation.\n\n%%: literal '%'\n%s,%o: convert next argument into a string.",
            "line": " ec.crypto.js:3242"
        },
        {
            "message": "Missing item type\nFormats a number.\n\nhttp://snipplr.com/view/5945/javascript-numberformat--ported-from-php/",
            "line": " ec.crypto.js:3298"
        },
        {
            "message": "Missing item type\nFormats a byte size.\n\nhttp://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/",
            "line": " ec.crypto.js:3325"
        },
        {
            "message": "Missing item type\nConverts an IPv4 or IPv6 string representation into bytes (in network order).",
            "line": " ec.crypto.js:3343"
        },
        {
            "message": "Missing item type\nConverts an IPv4 string representation into bytes (in network order).",
            "line": " ec.crypto.js:3361"
        },
        {
            "message": "Missing item type\nConverts an IPv6 string representation into bytes (in network order).",
            "line": " ec.crypto.js:3384"
        },
        {
            "message": "Missing item type\nConverts 4-bytes into an IPv4 string representation or 16-bytes into\nan IPv6 string representation. The bytes must be in network order.",
            "line": " ec.crypto.js:3414"
        },
        {
            "message": "Missing item type\nConverts 4-bytes into an IPv4 string representation. The bytes must be\nin network order.",
            "line": " ec.crypto.js:3433"
        },
        {
            "message": "Missing item type\nConverts 16-bytes into an IPv16 string representation. The bytes must be\nin network order.",
            "line": " ec.crypto.js:3452"
        },
        {
            "message": "Missing item type\nEstimates the number of processes that can be run concurrently. If\ncreating Web Workers, keep in mind that the main JavaScript process needs\nits own core.",
            "line": " ec.crypto.js:3504"
        },
        {
            "message": "Missing item type\nSecure Hash Algorithm with 160-bit digest (SHA-1) implementation.",
            "line": " ec.crypto.js:3701"
        },
        {
            "message": "Missing item type\nCreates a SHA-1 message digest object.",
            "line": " ec.crypto.js:3717"
        },
        {
            "message": "Missing item type\nStarts the digest.",
            "line": " ec.crypto.js:3748"
        },
        {
            "message": "Missing item type\nUpdates the digest with the given message input. The given input can\ntreated as raw input (no encoding will be applied) or an encoding of\n'utf8' maybe given to encode the input using UTF-8.",
            "line": " ec.crypto.js:3769"
        },
        {
            "message": "Missing item type\nProduces the digest.",
            "line": " ec.crypto.js:3803"
        },
        {
            "message": "Missing item type\nInitializes the constant tables.",
            "line": " ec.crypto.js:3868"
        },
        {
            "message": "Missing item type\nUpdates a SHA-1 state with the given byte buffer.",
            "line": " ec.crypto.js:3880"
        },
        {
            "message": "Missing item type\nVerifies the integrity of the provided text using a signature and a public key.\nUses SHA1 hash with a UTF8 decoding of the text.",
            "line": " ec.crypto.js:4107"
        },
        {
            "message": "Missing item type\nJavascript implementation of basic RSA algorithms.",
            "line": " ec.crypto.js:4131"
        },
        {
            "message": "Missing item type\nWrap digest in DigestInfo object.\n\nThis function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.\n\nDigestInfo ::= SEQUENCE {\n  digestAlgorithm DigestAlgorithmIdentifier,\n  digest Digest\n}\n\nDigestAlgorithmIdentifier ::= AlgorithmIdentifier\nDigest ::= OCTET STRING",
            "line": " ec.crypto.js:4387"
        },
        {
            "message": "Missing item type\nPerforms x^c mod n (RSA encryption or decryption operation).",
            "line": " ec.crypto.js:4435"
        },
        {
            "message": "Missing item type\nNOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or\n'encrypt' on a public key object instead.\n\nPerforms RSA encryption.\n\nThe parameter bt controls whether to put padding bytes before the\nmessage passed in. Set bt to either true or false to disable padding\ncompletely (in order to handle e.g. EMSA-PSS encoding seperately before),\nsignaling whether the encryption operation is a public key operation\n(i.e. encrypting data) or not, i.e. private key operation (data signing).\n\nFor PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01\n(for signing) or 0x02 (for encryption). The key operation mode (private\nor public) is derived from this flag in that case).",
            "line": " ec.crypto.js:4574"
        },
        {
            "message": "Missing item type\nNOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or\n'verify' on a public key object instead.\n\nPerforms RSA decryption.\n\nThe parameter ml controls whether to apply PKCS#1 v1.5 padding\nor not.  Set ml = false to disable padding removal completely\n(in order to handle e.g. EMSA-PSS later on) and simply pass back\nthe RSA encryption block.",
            "line": " ec.crypto.js:4635"
        },
        {
            "message": "Missing item type\nCreates an RSA key-pair generation state object. It is used to allow\nkey-generation to be performed in steps. It also allows for a UI to\ndisplay progress updates.",
            "line": " ec.crypto.js:4699"
        },
        {
            "message": "Missing item type\nAttempts to runs the key-generation algorithm for at most n seconds\n(approximately) using the given state. When key-generation has completed,\nthe keys will be stored in state.keys.\n\nTo use this function to update a UI while generating a key or to prevent\ncausing browser lockups/warnings, set \"n\" to a value other than 0. A\nsimple pattern for generating a key and showing a progress indicator is:\n\nvar state = pki.rsa.createKeyPairGenerationState(2048);\nvar step = function() {\n  // step key-generation, run algorithm for 100 ms, repeat\n  if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {\n    setTimeout(step, 1);\n  } else {\n    // key-generation complete\n    // TODO: turn off progress indicator here\n    // TODO: use the generated key-pair in \"state.keys\"\n  }\n};\n// TODO: turn on progress indicator here\nsetTimeout(step, 0);",
            "line": " ec.crypto.js:4763"
        },
        {
            "message": "Missing item type\nGenerates an RSA public-private key pair in a single call.\n\nTo generate a key-pair in steps (to allow for progress updates and to\nprevent blocking or warnings in slow browsers) then use the key-pair\ngeneration state functions.\n\nTo generate a key-pair asynchronously (either through web-workers, if\navailable, or by breaking up the work on the main thread), pass a\ncallback function.",
            "line": " ec.crypto.js:4932"
        },
        {
            "message": "Missing item type\nSets an RSA public key from BigIntegers modulus and exponent.",
            "line": " ec.crypto.js:5017"
        },
        {
            "message": "Missing item type\nEncrypts the given data with this public key. Newer applications\nshould use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for\nlegacy applications.",
            "line": " ec.crypto.js:5031"
        },
        {
            "message": "Missing item type\nVerifies the given signature against the given digest.\n\nPKCS#1 supports multiple (currently two) signature schemes:\nRSASSA-PKCS1-V1_5 and RSASSA-PSS.\n\nBy default this implementation uses the \"old scheme\", i.e.\nRSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the\nsignature is an OCTET STRING that holds a DigestInfo.\n\nDigestInfo ::= SEQUENCE {\n  digestAlgorithm DigestAlgorithmIdentifier,\n  digest Digest\n}\nDigestAlgorithmIdentifier ::= AlgorithmIdentifier\nDigest ::= OCTET STRING\n\nTo perform PSS signature verification, provide an instance\nof Forge PSS object as the scheme parameter.",
            "line": " ec.crypto.js:5078"
        },
        {
            "message": "Missing item type\nSets an RSA private key from BigIntegers modulus, exponent, primes,\nprime exponents, and modular multiplicative inverse.",
            "line": " ec.crypto.js:5145"
        },
        {
            "message": "Missing item type\nDecrypts the given data with this private key. The decryption scheme\nmust match the one used to encrypt the data.",
            "line": " ec.crypto.js:5173"
        },
        {
            "message": "Missing item type\nSigns the given digest, producing a signature.\n\nPKCS#1 supports multiple (currently two) signature schemes:\nRSASSA-PKCS1-V1_5 and RSASSA-PSS.\n\nBy default this implementation uses the \"old scheme\", i.e.\nRSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide\nan instance of Forge PSS object as the scheme parameter.",
            "line": " ec.crypto.js:5214"
        },
        {
            "message": "Missing item type\nWraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.",
            "line": " ec.crypto.js:5262"
        },
        {
            "message": "Missing item type\nConverts a private key from an ASN.1 object.",
            "line": " ec.crypto.js:5288"
        },
        {
            "message": "Missing item type\nConverts a private key to an ASN.1 RSAPrivateKey.",
            "line": " ec.crypto.js:5339"
        },
        {
            "message": "Missing item type\nConverts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.",
            "line": " ec.crypto.js:5379"
        },
        {
            "message": "Missing item type\nConverts a public key to an ASN.1 SubjectPublicKeyInfo.",
            "line": " ec.crypto.js:5420"
        },
        {
            "message": "Missing item type\nConverts a public key to an ASN.1 RSAPublicKey.",
            "line": " ec.crypto.js:5445"
        },
        {
            "message": "Missing item type\nEncodes a message using PKCS#1 v1.5 padding.",
            "line": " ec.crypto.js:5464"
        },
        {
            "message": "Missing item type\nDecodes a message using PKCS#1 v1.5 padding.",
            "line": " ec.crypto.js:5542"
        },
        {
            "message": "Missing item type\nRuns the key-generation algorithm asynchronously, either in the background\nvia Web Workers, or using the main thread and setImmediate.",
            "line": " ec.crypto.js:5617"
        },
        {
            "message": "Missing item type\nConverts a positive BigInteger into 2's-complement big-endian bytes.",
            "line": " ec.crypto.js:5739"
        },
        {
            "message": "Missing item type\nReturns the required number of Miller-Rabin tests to generate a\nprime with an error probability of (1/2)^80.\n\nSee Handbook of Applied Cryptography Chapter 4, Table 4.4.",
            "line": " ec.crypto.js:5755"
        },
        {
            "message": "Missing item type\nCipher base API.",
            "line": " ec.crypto.js:5843"
        },
        {
            "message": "Missing item type\nCreates a cipher object that can be used to encrypt data using the given\nalgorithm and key. The algorithm may be provided as a string value for a\npreviously registered algorithm or it may be given as a cipher algorithm\nAPI object.",
            "line": " ec.crypto.js:5859"
        },
        {
            "message": "Missing item type\nCreates a decipher object that can be used to decrypt data using the given\nalgorithm and key. The algorithm may be provided as a string value for a\npreviously registered algorithm or it may be given as a cipher algorithm\nAPI object.",
            "line": " ec.crypto.js:5892"
        },
        {
            "message": "Missing item type\nRegisters an algorithm by name. If the name was already registered, the\nalgorithm API object will be overwritten.",
            "line": " ec.crypto.js:5925"
        },
        {
            "message": "Missing item type\nGets a registered algorithm by name.",
            "line": " ec.crypto.js:5937"
        },
        {
            "message": "Missing item type\nStarts or restarts the encryption or decryption process, whichever\nwas previously configured.\n\nFor non-GCM mode, the IV may be a binary-encoded string of bytes, an array\nof bytes, a byte buffer, or an array of 32-bit integers. If the IV is in\nbytes, then it must be Nb (16) bytes in length. If the IV is given in as\n32-bit integers, then it must be 4 integers long.\n\nNote: an IV is not required or used in ECB mode.\n\nFor GCM-mode, the IV must be given as a binary-encoded string of bytes or\na byte buffer. The number of bytes should be 12 (96 bits) as recommended\nby NIST SP-800-38D but another length may be given.",
            "line": " ec.crypto.js:5964"
        },
        {
            "message": "Missing item type\nUpdates the next block according to the cipher mode.",
            "line": " ec.crypto.js:6004"
        },
        {
            "message": "Missing item type\nFinishes encrypting or decrypting.",
            "line": " ec.crypto.js:6023"
        },
        {
            "message": "Missing item type\nJavascript implementation of a basic Public Key Infrastructure, including\nsupport for RSA public and private keys.",
            "line": " ec.crypto.js:6153"
        },
        {
            "message": "Missing item type\nNOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\n\nConverts PEM-formatted data to DER.",
            "line": " ec.crypto.js:6171"
        },
        {
            "message": "Missing item type\nConverts an RSA private key from PEM format.",
            "line": " ec.crypto.js:6188"
        },
        {
            "message": "Missing item type\nConverts an RSA private key to PEM format.",
            "line": " ec.crypto.js:6214"
        },
        {
            "message": "Missing item type\nConverts a PrivateKeyInfo to PEM format.",
            "line": " ec.crypto.js:6231"
        },
        {
            "message": "Missing item type\nParent class of all view manager classes, stores a cache of the views and\ntheir corresponding DOM selectors and provides functions for setting a view\nto correspond to a selector and displaying a view after it has been added to\nthe cache.",
            "line": " ec.ui.framework.js:10"
        },
        {
            "message": "Missing item type\nStorage that maps view class instances to DOM Elements",
            "line": " ec.ui.framework.js:20"
        },
        {
            "message": "Missing item type\nSet's the view instance for a specific DOM selector",
            "line": " ec.ui.framework.js:24"
        },
        {
            "message": "Missing item type\nReturns the view instance that currently corresponds to a specific DOM\nselector",
            "line": " ec.ui.framework.js:35"
        },
        {
            "message": "Missing item type\nRelates the view to a DOM Selector and calls the view's display function\nto populate the inner html of the DOM Selector Element",
            "line": " ec.ui.framework.js:47"
        },
        {
            "message": "Missing item type\nHides the container specified by the containerId by adding 'hide' class",
            "line": " ec.ui.framework.js:71"
        },
        {
            "message": "Missing item type\nObject stored in the ScreenManager's history cache array, to keep track of the history of screens and \nwhich DOM element they were displayed in",
            "line": " ec.ui.framework.js:81"
        },
        {
            "message": "Missing item type\nName of the page (used to retrieve the correct screen on a back/forward button press)",
            "line": " ec.ui.framework.js:104"
        },
        {
            "message": "Missing item type\nScreen to store and associate with the page name so that it can be loaded if necessary",
            "line": " ec.ui.framework.js:108"
        },
        {
            "message": "Missing item type\nID of the container to display the screen in, once it has been found by page name",
            "line": " ec.ui.framework.js:112"
        },
        {
            "message": "Missing item type\nClass that represents a \"view\" that can be displayed in an container element on the page. The View should define \na display function that loads HTML into the container element on the page and then finally calls the callback once\nthe view has been completely initialized",
            "line": " ec.ui.framework.js:118"
        },
        {
            "message": "Missing item type\nFunction to be defined in subclasses that returns the location of the main html file associated with this view",
            "line": " ec.ui.framework.js:127"
        },
        {
            "message": "Missing item type\nDisplay function to override (usually in JavaScript) that will set up any event handlers",
            "line": " ec.ui.framework.js:134"
        },
        {
            "message": "Missing item type\nFunction that will convert a view to a certain other view class as long as it the converted type inherits the\ncurrent type of the view",
            "line": " ec.ui.framework.js:140"
        },
        {
            "message": "Missing item type\nSTJS Wrapper for the Browser Native History Object",
            "line": " ec.ui.framework.js:178"
        },
        {
            "message": "Missing item type\nView Manager sub class that manages loading \"modal\"s and has a few helper functions to make sure that \nthey work properly",
            "line": " ec.ui.framework.js:187"
        },
        {
            "message": "Missing item type\nDOM Selector (ID) of the container to display Modal's in",
            "line": " ec.ui.framework.js:197"
        },
        {
            "message": "Missing item type\nApplication flag that is set when a modal is open, so we can check from the application whether we're in a \nmodal or not.",
            "line": " ec.ui.framework.js:201"
        },
        {
            "message": "Missing item type\nRetrieves the current view that corresponds to the Modal Container Element (Should be a Modal)",
            "line": " ec.ui.framework.js:206"
        },
        {
            "message": "Missing item type\nSets the current modal and then shows it by calling the modals display function",
            "line": " ec.ui.framework.js:215"
        },
        {
            "message": "Missing item type\nHides the modal container and returns to the screen or overlay that was being displayed beneath it",
            "line": " ec.ui.framework.js:244"
        },
        {
            "message": "Missing item type\nView Subclass representing modal views that are displayed in the modal container",
            "line": " ec.ui.framework.js:259"
        },
        {
            "message": "Missing item type\nTo be overrided in subclasses, lets the developer define the size of the modal",
            "line": " ec.ui.framework.js:268"
        },
        {
            "message": "Missing item type\nFunction to be invoked when the modal is closed, can be overriden or left blank if nothing\nneeds to happen on the modal close",
            "line": " ec.ui.framework.js:272"
        },
        {
            "message": "Missing item type",
            "line": " ec.ui.framework.js:277"
        },
        {
            "message": "Missing item type\nSubclass of view that is specific for a screen, providing a display name that\nwill be shown in the URL bar and that can be used on startup to check if the\nURL is asking for a certain page on startup.",
            "line": " ec.ui.framework.js:282"
        },
        {
            "message": "Missing item type\nName that identifies a certain type of screen, shown in the URL bar to\nhelp the user understand the page that they are on and used during\nstartup to decide whether or not to load a specifici page on startup.",
            "line": " ec.ui.framework.js:293"
        },
        {
            "message": "Missing item type\nGetter for the display name",
            "line": " ec.ui.framework.js:299"
        },
        {
            "message": "Missing item type\nView Manager child class that manages loading \"screen\"s and saving screen history. This is the main view type\nin an application and represents a view that takes up (mostly) the entire browser page. History is tracked in the\nsession, so  when the back button is pressed, the application will load the previous screen with any data that \nwas associated with it.",
            "line": " ec.ui.framework.js:309"
        },
        {
            "message": "Missing item type\nDOM Selector (ID) of the Screen Container that will display all of the screen views",
            "line": " ec.ui.framework.js:321"
        },
        {
            "message": "Missing item type\nArray to track the history of the current session",
            "line": " ec.ui.framework.js:325"
        },
        {
            "message": "Missing item type\nScreen to be used when another screen is loading information from the server before being able to display\nitself. Notice that the display function does not affect the DOM on the page in any way.",
            "line": " ec.ui.framework.js:329"
        },
        {
            "message": "Missing item type\nScreen to be set by application on application startup, dictates what the screen should be if the startup\nScreen hasn't been set",
            "line": " ec.ui.framework.js:340"
        },
        {
            "message": "Missing item type\nScreen to be set by application if it notices that a certain screen should be loaded on startup that is \ndifferent from the default Screen",
            "line": " ec.ui.framework.js:345"
        },
        {
            "message": "Missing item type\nCallback to be invoked once the application has started and the first screen has been completely loaded\nand displayed",
            "line": " ec.ui.framework.js:350"
        },
        {
            "message": "Missing item type\nCallback invoked during a history load (used in Overlay Manager to open an overlay if it was last history view)",
            "line": " ec.ui.framework.js:355"
        },
        {
            "message": "Missing item type\nArray of callbacks that will compare any markers saved in the browser to see if a specific startup screen\nshould be set. These callbacks should be defined in the screen Java implementation to check if the screen\nshould be loaded.",
            "line": " ec.ui.framework.js:359"
        },
        {
            "message": "Missing item type\nFunction to add startup screen callbacks to the array of callbacks",
            "line": " ec.ui.framework.js:365"
        },
        {
            "message": "Missing item type\nRetrieves the current view that corresponds to the Screen Container Element (Should be a screen)",
            "line": " ec.ui.framework.js:374"
        },
        {
            "message": "Missing item type\nSets the application default Screen that is shown if no startup screen has been defined.\nAlso sets up some code to run during the application load, that calls the startup callbacks\nto see if there is a startup screen different than the defaultScreen, then displays it or the\ndefaultScreen depending on the results",
            "line": " ec.ui.framework.js:383"
        },
        {
            "message": "Missing item type\nSet's the current screen, then show's it by calling the display function. Depending on the\naddHistory flag, will add the page passed in to the history array, tracking session page history",
            "line": " ec.ui.framework.js:432"
        },
        {
            "message": "Missing item type\nSet's the current screen, then show's it by calling the display function. This replaces the current HistoryClosure\nelement for the current screen in the history array, rather than leaving it and (potentially) adding another\nhistory array element like changeScreen",
            "line": " ec.ui.framework.js:454"
        },
        {
            "message": "Missing item type\nReloads the current screen, leaving the history alone",
            "line": " ec.ui.framework.js:472"
        },
        {
            "message": "Missing item type\nAdds the screen passed in and the display container to a HistoryClosure element and pushes it \non the end of the history cache array. This does not ensure that the screen is displayed though.",
            "line": " ec.ui.framework.js:485"
        },
        {
            "message": "Missing item type\nReplaces the current end of the history array with a new HistoryClosure element that contains the screen and \ncontainerId passed in.",
            "line": " ec.ui.framework.js:516"
        },
        {
            "message": "Missing item type\nSets the url parameters on the current page",
            "line": " ec.ui.framework.js:552"
        },
        {
            "message": "Missing item type\nSearches through the history array for the last screen that was loaded with the name passed in, and then displays\nit in the container that it was associated with. If there is no screen in the history, then check\nif there is a startupScreen that can be loaded right now, otherwise load the default screen",
            "line": " ec.ui.framework.js:560"
        },
        {
            "message": "Missing item type\nSubclass of view for an overlay, extends EcScreen because overlays should have a display name that can be used\nin the URL bar and in the history so the page can be loaded on back button or startup",
            "line": " ec.ui.framework.js:611"
        },
        {
            "message": "Missing item type\nView Manager that manages displaying overlay views (views that take over the screen, but can be exited to return to\nthe previous screen) with a few helper functions for managing overlays",
            "line": " ec.ui.framework.js:621"
        },
        {
            "message": "Missing item type\nDOM Selector of the overlay wrapper (Should contain the overlay container and overlay close button)",
            "line": " ec.ui.framework.js:632"
        },
        {
            "message": "Missing item type\nDOM Selector of the overlay close button (clicking this should hide the current overlay)",
            "line": " ec.ui.framework.js:636"
        },
        {
            "message": "Missing item type\nDOM Selector of the HTML Element that will display the Overlay's HTML",
            "line": " ec.ui.framework.js:640"
        },
        {
            "message": "Missing item type\nUsed if one of the startupOverlayCallbacks decides that it should be displayed on startup (usually using\nthe URL to check what should be displayed on start)",
            "line": " ec.ui.framework.js:644"
        },
        {
            "message": "Missing item type\nCallbacks that can be defined and run on startup, that should check to see if an overlay should be displayed\nimmediately when the application starts",
            "line": " ec.ui.framework.js:649"
        },
        {
            "message": "Missing item type\nAdds a callback to be run on startup that can check if an overlay should be displayed (the callback should\nbe defined in the overlay)",
            "line": " ec.ui.framework.js:654"
        },
        {
            "message": "Missing item type\nApplication flag to check if we're currently in an overlay or not",
            "line": " ec.ui.framework.js:664"
        },
        {
            "message": "Missing item type\nRetrieves the current view that corresponds to the Overlay Container Element (Should be a Overlay)",
            "line": " ec.ui.framework.js:668"
        },
        {
            "message": "Missing item type\nVariable to hold the last screen, this is useful if we follow a chain of overlays and then want to close them,\nwe'll make sure to go back to the last screen that was visible to the user",
            "line": " ec.ui.framework.js:677"
        },
        {
            "message": "Missing item type\nSet's the current overlay, then show's it by calling the display function and unhiding the overlay container.\nDepending on the addHistory flag, will add the overlay passed in to the history array",
            "line": " ec.ui.framework.js:683"
        },
        {
            "message": "Missing item type\nHides the overlay container and sets the inOverlay flag to false, adds the last screen to the history array so\nthere is a chain from initial screen to overlay (could be multiple) to initial screen. This way we can press the\nback button and be shown the last overlay.",
            "line": " ec.ui.framework.js:713"
        },
        {
            "message": "Missing item type\nManages the current user's logged in state and interfaces with the server to \nsign in/out and create users",
            "line": " es.cassManager.js:360"
        },
        {
            "message": "Missing item type\nSetter for the boolean flag of whether or not a user is signed in",
            "line": " es.cassManager.js:374"
        },
        {
            "message": "Missing item type",
            "line": " es.cassManager.js:385"
        },
        {
            "message": "Missing item type\nSetter for boolean flag of whether or not the current user is admin",
            "line": " es.cassManager.js:391"
        },
        {
            "message": "Missing item type",
            "line": " es.cassManager.js:399"
        },
        {
            "message": "Missing item type\nIf the last time the user was using the application, they were signed in this\nreturns true (used to remind them to sign in again once they return)",
            "line": " es.cassManager.js:405"
        },
        {
            "message": "Missing item type\nValidates a username and password on the server and then parses the user's credentials and\nchecks if they have an admin key. Also tells the identity manager to check for contacts in\nlocal storage after signed in.",
            "line": " es.cassManager.js:415"
        },
        {
            "message": "Missing item type\nSets the flags so the user is logged out, wipes all sign in data so the user is no longer\nauthenticated and is unidentified",
            "line": " es.cassManager.js:456"
        },
        {
            "message": "Missing item type\nCreates a new user and saves the account details on the login server, then signs in\nto the new account on successful creation",
            "line": " es.cassManager.js:469"
        },
        {
            "message": "Missing item type\nSaves the users credentials and contacts to the server",
            "line": " es.cassManager.js:493"
        },
        {
            "message": "Missing item type\nManages the current selected identity for the user, and interfaces the Identity Manager to \nprovide helper functions for ownership and user identification",
            "line": " es.cassManager.js:548"
        },
        {
            "message": "Missing item type\nSets the currently selected identity to the ppk specified, only works if the ppk is in the \nlist of identities that the user owns",
            "line": " es.cassManager.js:557"
        },
        {
            "message": "Missing item type\nClears the selected identity, so the user will be identified as public for any actions\nthat they make going forward",
            "line": " es.cassManager.js:570"
        },
        {
            "message": "Missing item type\nReturns the contact that is associated with the PEM given, looks at both the user's\nidentities and contacts to match the PEM. The Contact returned will contain the display\nname that the user set for the PEM",
            "line": " es.cassManager.js:577"
        },
        {
            "message": "Missing item type\nAdds a Key to the list of user identities managed by the EcIdentityManager",
            "line": " es.cassManager.js:606"
        },
        {
            "message": "Missing item type\nGenerates a new Encryption Key to save to the identity manager list",
            "line": " es.cassManager.js:623"
        },
        {
            "message": "Missing item type\nHelper function to determine if the logged in user owns a piece of data from the repository,\nuseful for showing certain actions",
            "line": " es.cassManager.js:641"
        },
        {
            "message": "Missing item type\nHelper function to determine if the logged in user can modify a piece of data, this means \nthat they either own the data, or it is public",
            "line": " es.cassManager.js:657"
        },
        {
            "message": "Missing item type\nManages the server that the search controller (through EcRepository) and\nthe identity controller (through EcIdentityManager) communicate with. \nAllows the user to change the server that the UI is talking with via the change server modal.",
            "line": " es.cassManager.js:676"
        },
        {
            "message": "Missing item type\nAdds a server to this list of servers that can be selected from the change server modal",
            "line": " es.cassManager.js:731"
        },
        {
            "message": "Missing item type\nSets the server that the UI will communicate with, changes where the EcRepository and \nEcRemoteIdentity Manager are pointing to and communicating with",
            "line": " es.cassManager.js:759"
        },
        {
            "message": "Missing item type\nUsed during setup to set which EcRepository the server controller manages",
            "line": " es.cassManager.js:809"
        },
        {
            "message": "Missing item type\nUsed during setup to set which EcRemoteIdentityManager the server controller manages",
            "line": " es.cassManager.js:819"
        },
        {
            "message": "Missing item type\nUnder construction.\n\nWorking model of a CASS competency.",
            "line": " org.cassproject.schema.cass.js:47"
        },
        {
            "message": "Missing item type\nA composition of references to assertions and acceptances that embody a\nperson's profile. It is reasonably safe to assume the maker of this framework\nimplicitly accepts all data referred to by this object.",
            "line": " org.cassproject.schema.cass.js:160"
        },
        {
            "message": "Missing item type\nA composition of references to competencies, alignments, and levels that\nembody a competency framework. It is reasonable safe to assume the maker of\nthis framework implicitly accepts all data referred to by this object.",
            "line": " org.cassproject.schema.cass.js:224"
        },
        {
            "message": "Missing item type\nAES encrypted private key and display name. Contains Initialization Vectors,\nbut not secrets. Used to encrypt private identities for storage on remote\nsystems.",
            "line": " org.cassproject.schema.ebac.js:10"
        },
        {
            "message": "Missing item type\nAES Initialization Vector used to decode PPK.",
            "line": " org.cassproject.schema.ebac.js:24"
        },
        {
            "message": "Missing item type\nAES encrypted Private Key in PEM form.",
            "line": " org.cassproject.schema.ebac.js:28"
        },
        {
            "message": "Missing item type\nAES Initialization Vector used to decode displayName.",
            "line": " org.cassproject.schema.ebac.js:32"
        },
        {
            "message": "Missing item type\nAES encrypted display name for identity.",
            "line": " org.cassproject.schema.ebac.js:36"
        },
        {
            "message": "Missing item type\nMessage used to retrieve credentials from a remote system.\n\nTODO: Vulnerable to replay attacks.",
            "line": " org.cassproject.schema.ebac.js:60"
        },
        {
            "message": "Missing item type\nHashed username.",
            "line": " org.cassproject.schema.ebac.js:74"
        },
        {
            "message": "Missing item type\nHashed password to authorize request.",
            "line": " org.cassproject.schema.ebac.js:78"
        },
        {
            "message": "Missing item type\nCredential list along with one time pad and session-based token for use in\ncommit actions.",
            "line": " org.cassproject.schema.ebac.js:102"
        },
        {
            "message": "Missing item type\nOne time pad (aka perfect cipher)",
            "line": " org.cassproject.schema.ebac.js:115"
        },
        {
            "message": "Missing item type\nToken provided by server to use in commit actions.",
            "line": " org.cassproject.schema.ebac.js:119"
        },
        {
            "message": "Missing item type\nCredential array.",
            "line": " org.cassproject.schema.ebac.js:123"
        },
        {
            "message": "Missing item type\nContact array.",
            "line": " org.cassproject.schema.ebac.js:127"
        },
        {
            "message": "Missing item type\nAES encrypted public key and display name. Contains Initialization Vectors,\nbut not secrets. Used to encrypt public identities for storage on remote\nsystems.",
            "line": " org.cassproject.schema.ebac.js:151"
        },
        {
            "message": "Missing item type\nAES Initialization Vector used to decode PPK.",
            "line": " org.cassproject.schema.ebac.js:165"
        },
        {
            "message": "Missing item type\nAES encrypted Private Key in PEM form.",
            "line": " org.cassproject.schema.ebac.js:169"
        },
        {
            "message": "Missing item type\nAES Initialization Vector used to decode displayName.",
            "line": " org.cassproject.schema.ebac.js:173"
        },
        {
            "message": "Missing item type\nAES encrypted display name for identity.",
            "line": " org.cassproject.schema.ebac.js:177"
        },
        {
            "message": "Missing item type\nComponent of EbacEncryptedValue that contains data needed to decrypt\nencrypted payload. Is, in itself, encrypted.\n\nAlso contains data used to verify that encrypted-data substitution attacks\nwere not performed on the data.\n\nMust be encryptable by RSA, therefore, serialized form is less than 256\nbytes.",
            "line": " org.cassproject.schema.ebac.js:203"
        },
        {
            "message": "Missing item type\nIV used to encrypt/decrypt payload.",
            "line": " org.cassproject.schema.ebac.js:222"
        },
        {
            "message": "Missing item type\nHashed and Base64 encoded ID of the parent (if any) object.",
            "line": " org.cassproject.schema.ebac.js:226"
        },
        {
            "message": "Missing item type\nSecret used to encrypt/decrypt payload.",
            "line": " org.cassproject.schema.ebac.js:230"
        },
        {
            "message": "Missing item type\nDot and Bracket notated index of the field in the parent-most object (if\nany).",
            "line": " org.cassproject.schema.ebac.js:234"
        },
        {
            "message": "Missing item type\nSignature used to authorize movement of data on behalf of a private-key\nholding owner.",
            "line": " org.cassproject.schema.ebac.js:280"
        },
        {
            "message": "Missing item type\nThe public key of the authorizing party.",
            "line": " org.cassproject.schema.ebac.js:293"
        },
        {
            "message": "Missing item type\nThe time in number of milliseconds since midnight of January 1, 1970\n00:00:00 UTC that this signature is authorized to move data.",
            "line": " org.cassproject.schema.ebac.js:297"
        },
        {
            "message": "Missing item type\nThe signature of this object, having signed the object, having been\nencoded in JSON with no space or tabs in ASCII sort order, having no\nvalue for the signature at the time of signing.",
            "line": " org.cassproject.schema.ebac.js:302"
        },
        {
            "message": "Missing item type\nThe server authorized to move data. If this is empty, the signature may\nbe used by a server to ask for data from other servers.",
            "line": " org.cassproject.schema.ebac.js:308"
        },
        {
            "message": "Missing item type\nEncrypted JSON-LD object.",
            "line": " org.cassproject.schema.ebac.js:333"
        },
        {
            "message": "Missing item type\nOptional Hint used to aid search, showing the type of the inner encrypted\nobject.",
            "line": " org.cassproject.schema.ebac.js:346"
        },
        {
            "message": "Missing item type\nBase-64 encoded, AES encrypted form of the encrypted object (or data).",
            "line": " org.cassproject.schema.ebac.js:351"
        },
        {
            "message": "Missing item type\nOptional Hint used to aid view, showing a name of the inner encrypted\nobject.",
            "line": " org.cassproject.schema.ebac.js:355"
        },
        {
            "message": "Missing item type\nAES encrypted public key and display name. Contains Initialization Vectors,\nbut not secrets. Used to encrypt public identities for storage on remote\nsystems.",
            "line": " org.cassproject.schema.ebac.js:392"
        },
        {
            "message": "Missing item type\nMessage used to commit credentials to a remote login server.\n\nTODO: Semi-vulnerable to replay attacks. Token field prevents some replay\nattacks.",
            "line": " org.cassproject.schema.ebac.js:432"
        },
        {
            "message": "Missing item type\nHashed username.",
            "line": " org.cassproject.schema.ebac.js:448"
        },
        {
            "message": "Missing item type\nHashed password to authorize commit.",
            "line": " org.cassproject.schema.ebac.js:452"
        },
        {
            "message": "Missing item type\nToken provided to client when previously executed Request was done. May\nbe empty if this is used as part of Create action.",
            "line": " org.cassproject.schema.ebac.js:456"
        },
        {
            "message": "Missing item type\nList of credentials to commit to the login server storage.",
            "line": " org.cassproject.schema.ebac.js:461"
        },
        {
            "message": "Missing item type\nData wrapper to represent remotely hosted data. Includes necessary fields for\npermission controls, signing, and identification of the object.",
            "line": " org.cassproject.schema.general.js:23"
        },
        {
            "message": "Missing item type\nPEM encoded public keys of the owner of the object. A repository, upon\nreceiving a write operation, will ensure either the data did not\npreviously exist, or that an owner has provided a signature authorizing\nthe replacement of the old data with the new data.",
            "line": " org.cassproject.schema.general.js:33"
        },
        {
            "message": "Missing item type\nSignatures of the object. The signing method is as follows: Remove the\nsignature field. Encode the object and its fields in ascii-sort order\nJSON-LD using a space-free, tab-free encoding. Sign the aforementioned\nstring.",
            "line": " org.cassproject.schema.general.js:40"
        },
        {
            "message": "Missing item type\nURL/URI used to retrieve and store the object, plus identify the object.",
            "line": " org.cassproject.schema.general.js:47"
        },
        {
            "message": "Missing item type\nPEM encoded public keys of identities authorized to view the object. A\nrepository will ignore write operations from these identities, but will\nallow them to read the object.",
            "line": " org.cassproject.schema.general.js:52"
        },
        {
            "message": "Missing item type\nArray of EbacEncryptedSecret objects encoded in Base-64, encrypted using\nRSA public keys of owners or readers (or unknown parties) to allow them\naccess to the payload.",
            "line": " org.cassproject.schema.general.js:58"
        },
        {
            "message": "Missing item type\nWill generate an identifier using the server URL provided (usually from\nan EcRepository).",
            "line": " org.cassproject.schema.general.js:64"
        },
        {
            "message": "Missing item type\nWill generate an identifier using the server URL provided (usually from\nan EcRepository).",
            "line": " org.cassproject.schema.general.js:82"
        },
        {
            "message": "Missing item type\nDetermines if the object has pk as an owner. Homogenizes the PEM strings\nfor comparison.",
            "line": " org.cassproject.schema.general.js:100"
        },
        {
            "message": "Missing item type\nDetermines if the object has pk as an owner. Homogenizes the PEM strings\nfor comparison.",
            "line": " org.cassproject.schema.general.js:117"
        },
        {
            "message": "Missing item type\nEncodes the object in a form where it is ready to be signed.",
            "line": " org.cassproject.schema.general.js:130"
        },
        {
            "message": "Missing item type\nSign this object with a private key.",
            "line": " org.cassproject.schema.general.js:152"
        },
        {
            "message": "Missing item type\nVerify's the object's signatures",
            "line": " org.cassproject.schema.general.js:170"
        },
        {
            "message": "Missing item type\nAdds an owner to the object, if the owner does not exist.",
            "line": " org.cassproject.schema.general.js:206"
        },
        {
            "message": "Missing item type\nRemoves an owner from the object, if the owner does exist.",
            "line": " org.cassproject.schema.general.js:222"
        },
        {
            "message": "Missing item type\nAdds a reader to the object, if the reader does not exist.",
            "line": " org.cassproject.schema.general.js:237"
        },
        {
            "message": "Missing item type\nRemoves a reader from the object, if the reader does exist.",
            "line": " org.cassproject.schema.general.js:253"
        },
        {
            "message": "Missing item type\nDetermines if the object will survive and be retreivable from a server,\nshould it be written.",
            "line": " org.cassproject.schema.general.js:268"
        },
        {
            "message": "Missing item type\nRepresents the @type field in JSON-LD.",
            "line": " org.json-ld.js:14"
        },
        {
            "message": "Missing item type\nRepresents the @context field in JSON-LD.",
            "line": " org.json-ld.js:18"
        },
        {
            "message": "Missing item type\nDetermines which fields to serialize into @fields.",
            "line": " org.json-ld.js:32"
        },
        {
            "message": "Missing item type\nForces Javascript to encode the object in alphabetical order in order to\nmake signature based actions more viable. Also places @(at) symbols in\nfront of appropriate fields.",
            "line": " org.json-ld.js:48"
        },
        {
            "message": "Missing item type\nHelper function to determine if a piece of data is probably a JSON\nobject.",
            "line": " org.json-ld.js:100"
        },
        {
            "message": "Missing item type\nUses the object's fully qualified type name and compares it to the\nprovided type.",
            "line": " org.json-ld.js:110"
        },
        {
            "message": "Missing item type\nUses the object's fully qualified type name and compares it to the\nprovided type.",
            "line": " org.json-ld.js:122"
        },
        {
            "message": "Missing item type\nGets the fully qualified type name, as JSON-LD allows the \"namespace\" of\nthe type to be defined in @context.",
            "line": " org.json-ld.js:139"
        },
        {
            "message": "Missing item type\nAlso could be called \"upcast\", for those in the know.\n\nGhetto method of copying properties from some other object. As freshly\ndeserialized javascript objects do not inherently attach the functions of\ntheir type, it is this or factory hell.",
            "line": " org.json-ld.js:156"
        },
        {
            "message": "Missing item type\nUpgrades the object if necessary.",
            "line": " org.json-ld.js:182"
        },
        {
            "message": "Missing item type\nRemoves the @ symbol from properties in order to make them more\naccessible in Javascript.",
            "line": " org.json-ld.js:186"
        },
        {
            "message": "Missing item type\nGets all versions of JSON-LD type strings for this type of object.",
            "line": " org.json-ld.js:205"
        }
    ]
}